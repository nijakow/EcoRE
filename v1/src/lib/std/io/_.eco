"
    io.eco - The `std io` package of the Ecosphere
"

#=std/io: {
    in, out;

    FDByteReader = #<:std/io/FDByteReader>;
    FDByteWriter = #<:std/io/FDByteWriter>;

    PortInput = #<:std/io/PortInput>;
    PortOutput = #<:std/io/PortOutput>;
    PortIO = #<:std/io/PortIO>;

    OpenFileDescriptor: fd   => PortIO clone initWithInput: ((FDByteReader clone) initWithFileDescriptor: fd) Output: ((FDByteWriter clone) initWithFileDescriptor: fd);
    OpenFileForReading: path => PortInput clone init: ((FDByteReader clone) initWithFileDescriptor: #'ecosphere.ecore.io.fd.open_file'(path, 1));
    OpenFileForWriting: path => PortOutput clone init: ((FDByteWriter clone) initWithFileDescriptor: #'ecosphere.ecore.io.fd.open_file'(path, 6));
    OpenFile:           path => OpenFileDescriptor: #'ecosphere.ecore.io.fd.open_file'(path, 7);

    WithOpenFileForReading: path Do: block => (
        |
            port <- OpenFileForReading: path,
            val  <- block value(port)
        |
        port close.  "TODO: Unwind-Protect!"
      ^ val
    );

    SlurpFile: file => WithOpenFileForReading: file Do: [ :port | port readAll ];
    ParseFile: file => (SlurpFile: file) parse;
    EvaluateFile: file InEnv: env => (ParseFile: file) evaluateInEnv: env;
}
