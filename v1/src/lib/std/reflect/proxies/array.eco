
#=std/reflect/proxies/Array: {
    size => #'ecosphere.ecore.object.array.size'(self);
    isEmpty => size isZero;
    at: index => #'ecosphere.ecore.object.array.at'(self, index);
    at: index put: value => #'ecosphere.ecore.object.array.at_put'(self, index, value);
    isArray => true;
    asString => #'ecosphere.ecore.object.array.to_string'(self);

    writeOn: writer => (std util) WriteIterable: self On: writer;

    with inherited iterations = #<:std/util/StandardListIterations>;
    with inherited conversions = #<:std/util/StandardListConversions>;
    with inherited access = #<:std/util/StandardListAccess>;
    with inherited search = #<:std/util/StandardListSearch>;
    
    with inherited parent = #<:std/Clonable>;
}
