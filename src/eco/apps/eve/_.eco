
{
    static with inherited _ = std Module;
    with app <- $package;

    own morphs = {
        static with inherited _ = std Module;

        own ValueMorph = {
            static with inherited _ = std Clonable;
            static with inherited own Morph = (($package gfx morphic) morphs) Morph;

            with inherited trait = {
                static with inherited _ = std Trait;

                renderImplOn: renderer => (
                    renderer setColor: (renderer theme lineColor).
                    
                    "
                        Draw angle-shaped lines in every corner of the morph.
                    "
                    |
                        d  <- ((width min: height) / 4) min: 20.
                        dw <- (width - d),
                        dh <- (height - d)
                    |

                    renderer drawLineX: 0 Y: 0 X: d Y: 0.
                    renderer drawLineX: 0 Y: 0 X: 0 Y: d.

                    renderer drawLineX: dw Y: 0 X: width Y: 0.
                    renderer drawLineX: width Y: 0 X: width Y: d.

                    renderer drawLineX: 0 Y: dh X: 0 Y: height.
                    renderer drawLineX: 0 Y: height X: d Y: height.

                    renderer drawLineX: dw Y: height X: width Y: height.
                    renderer drawLineX: width Y: dh X: width Y: height.

                    $(Morph) renderImplOn: renderer.
                );

                handleClick: click At: point HandMorph: hand => (
                    hand grab: self.
                  ^ true
                );

                handleDropMorph: morph At: point Meta: meta => (
                    (meta morph meta: #'ecosphere.eve.morphs.ValueMorph.value') yes: [ :v |
                        (std io out << 'Dropped value: ' << v) newline commit.
                      ^ false
                    ].
                  ^ false
                );
            };
        };
    };

    protected MakeValueMorphFor: v => (
        | m <- (morphs ValueMorph) new |

        m rigidWidth: 100.
        m rigidHeight: 100.

      ^ m
    );

    ValueMorphFor: v => (
        | m <- MakeValueMorphFor: v |

        m meta: #'ecosphere.eve.morph.property.type' is: #'ecosphere.eve.morphs.ValueMorph'.
        m meta: #'ecosphere.eve.morphs.ValueMorph.value' is: v.

      ^ m
    );

    OpenValueMorphFor: v => (framework actions open) Morph: (ValueMorphFor: v);

    Main => OpenValueMorphFor: 42;
}
