
{
    static with inherited _ = std Clonable;
    with inherited own Morph = $package app gfx morphic morphs Morph;

    polymorphicTerminal;

    protected cachedDimensions;

    with inherited trait = {
        static with inherited _ = std Trait;

        initWithWorld: _world => (
            $(Morph) initWithNoChildren.
            polymorphicTerminal <- _world newTerminal.
            cachedDimensions    <- ((morphic app math geometry) Point) X: 0 Y: 0.
          ^ self
        );

        "baseMinWidth => presenter minWidth;
        baseMinHeight => presenter minHeight;"

        renderImplOn: renderer => (
            |
                mousePos         <- (world yes) handMorph globalOffset,
                relativeMousePos <- mousePos - globalOffset
            |

            (([width == cachedDimensions x] and: [height == cachedDimensions y]) not) if: [
                cachedDimensions <- ((morphic app math geometry) Point) X: width Y: height.
                (polymorphicTerminal viewport) resizeW: width H: height.
            ].

            (polymorphicTerminal controller)
                mouseMovedToX: (relativeMousePos x)
                            Y: (relativeMousePos y).

            (polymorphicTerminal viewport) tick.
            (polymorphicTerminal viewport) renderOn: renderer.
        );

        handleClick: click At: point HandMorph: hand => (
            (polymorphicTerminal controller)
                mouseMovedToX: (point x)
                            Y: (point y).
            "TODO"
          ^ true
        );

        handleKey: key At: point HandMorph: hand => (
            (polymorphicTerminal controller)
                mouseMovedToX: (point x)
                            Y: (point y).
            (polymorphicTerminal controller) keyPressed: key.
            (polymorphicTerminal controller) keyReleased: key.
          ^ true
        );

        handleScrollX: sx Y: sy HandMorph: hand => (
            (polymorphicTerminal controller)
                mouseMovedToX: (point x)
                            Y: (point y).
            (polymorphicTerminal controller) mouseScrolledByX: sx Y: sy.
          ^ true
        );

        writeOn: w => w << 'a polymorphic window morph';
    };
}
