
{
    static with inherited _ = std Module;
    with app = $;

    own core     = (here / 'core' / '_.eco')     importIn: self;
    own builders = (here / 'builders' / '_.eco') importIn: self;
    own drivers  = (here / 'drivers' / '_.eco')  importIn: self;

    Create => (builders morph MorphBehaviorBuilder) New;

    MakeTestWorld => (
        |
            world  <- (core world) NewWorld,
            morph1 <- (Create ~ layouter: ((core layouting layouters) StackLayouter New) ~ build link instantiate),
            morph2 <- (Create ~ renderFunction: $[ :morph :renderer | renderer setR: 255 G: 0 B: 0. renderer fillRectX: 0 Y: 0 W: (morph structure width) H: (morph structure height). ] ~ build link instantiate),
        |

        world declareRoot: morph2.

        (morph2 structure) add: morph1.

      ^ world
    );

    Main => (
        (framework actions open) ui BuildAndOpen: [ :ui |
            ui Window(400, 400,
                (drivers morphic PolymorphicWindowMorph) clone initWithWorld: MakeTestWorld
            )
        ]
    );
}
