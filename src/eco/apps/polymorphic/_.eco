
{
    static with inherited _ = std Module;
    with app = $;

    own core     = (here / 'core'     / '_.eco') importIn: self;
    own builders = (here / 'builders' / '_.eco') importIn: self;
    own drivers  = (here / 'drivers'  / '_.eco') importIn: self;
    own misc     = (here / 'misc'     / '_.eco') importIn: self;

    Create => (builders morph MorphBehaviorBuilder) New;

    MakeTestWorld => (
        |
            world  <- (core world) NewWorld,
            ColorSquareBehavior <- (
                Create
                  ~ renderer: ((core rendering renderers) ColorSquareRenderer New)
                  ~ build
            ),
            TextBehavior <- (
                Create
                  ~ renderer: ((core rendering renderers) BasicTextRenderer New)
                  ~ metrics: ((core metrics metrics) BasicTextMorphMetrics New)
                  ~ horizontalLayout: ((core layouting layouts) ShrinkWrap)
                  ~ verticalLayout: ((core layouting layouts) ShrinkWrap)
                  ~ build
            ),
            morph1 <- (
                Create
                  ~ layouter: ((core layouting layouters) FlexLayouter Vertical)
                  ~ build
                  ~ link
                  ~ instantiate
            ),
            morph2 <- (
                ColorSquareBehavior
                  ~ link: (((std util graphics) Color) R: 0 G: 0 B: 0)
                  ~ instantiate
            ),
            morph3 <- (
                ColorSquareBehavior
                  ~ link: (((std util graphics) Color) R: 255 G: 0 B: 0)
                  ~ instantiate
            ),
            morph4 <- (
                ColorSquareBehavior
                  ~ link: (((std util graphics) Color) R: 255 G: 255 B: 0)
                  ~ instantiate
            ),
            morph5 <- (
                TextBehavior
                  ~ link: ((app gfx eve) Text: 'Hello, world!')
                  ~ instantiate
            ),
        |

        world declareRoot: morph1.

        (morph1 structure) add: morph2.
        (morph1 structure) add: morph3.
        (morph1 structure) add: morph4.
        (morph1 structure) add: morph5.

      ^ world
    );

    Main => (
        (framework actions open) ui BuildAndOpen: [ :ui |
            ui Window(400, 400,
                (drivers morphic PolymorphicWindowMorph) clone initWithWorld: MakeTestWorld
            )
        ]
    );
}
