
{
    static with inherited _ = std Module;
    
    own LayouterTrait = {
        static with inherited _ = std Trait;
        protected polymorphic = $package;
        protected Point => ((polymorphic core) math geometry) Point;

        minWidthForMorph: morph => 0;
        minHeightForMorph: morph => 0;

        minSizeForOrientation: orientation => orientation selectX: 0 Y: 0;

        preferredSizeForOrientation: orientation Constraint: constraint => subclassResponsibility;

        preferredSizeWithConstraints: constraints => (
            Point X: (preferredSizeForOrientation: (morphic orientation Horizontal) Constraint: (constraints x))
                  Y: (preferredSizeForOrientation: (morphic orientation Vertical)   Constraint: (constraints y))
        );

        layoutMorph: morph Constraints: constraints => subclassResponsibility;

        writeOn: w => w << 'a layouter';
    };

    own layouters = (here / 'layouters' / '_.eco') importIn: self;
}
