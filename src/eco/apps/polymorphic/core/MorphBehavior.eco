
{
    static with inherited _ = std Classlike;

    own Instance = {
        static with inherited _ = std Clonable;

        renderer;
        layouter;
        eventHandler;

        with inherited trait = {
            static with inherited _ = std Trait;
            protected polymorphic = $package;

            init => (
                renderer <- (polymorphic core rendering) renderers Default.
                layouter <- (polymorphic core layouting) layouters Default.
              ^ self
            );

            renderer:     r => renderer     <- r;
            layouter:     l => layouter     <- l;
            eventHandler: e => eventHandler <- e;

            defaultHorizontalLayout => (polymorphic core layouting) layouts Default;
            defaultVerticalLayout   => (polymorphic core layouting) layouts Default;

            "This mechanism allows to wrap a state in some instance-specific metadata."
            wrapState: state => state;

            link: state => ((polymorphic core) MorphKernel) Behavior: self State: (wrapState: state);
            link        => ((polymorphic core) MorphKernel) Behavior: self;

            writeOn: w => w << 'a polymorph behavior';
        };
    };

    New => Instance new;
}
