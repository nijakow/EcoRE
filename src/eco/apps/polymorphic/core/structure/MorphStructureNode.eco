
{
    static with inherited _ = std Classlike;

    own Instance = {
        static with inherited _ = std Clonable;

        morph, parentInfo, childrenInfo;

        protected currentOffset,
        protected currentDimension;

        protected xLayout,
        protected yLayout;

        protected cachedBounds,
        protected cachedLocalBounds,
        protected cachedGlobalBounds;

        protected cachedLayoutingConstraints;

        with inherited trait = {
            static with inherited _ = std Trait;
            protected polymorphic = $package;
            protected Point => ((polymorphic core) math geometry) Point;

            initWithMorph: _morph Behavior: behavior => (
                morph              <- _morph.
                parentInfo         <- ((polymorphic core) structure parent) NoParent.
                childrenInfo       <- ((polymorphic core) structure children) Many.
                currentOffset      <- Point X: 0 Y: 0.
                currentDimension   <- Point X: 0 Y: 0.
                xLayout            <- behavior defaultHorizontalLayout.
                yLayout            <- behavior defaultVerticalLayout.
                world              <- No.
                cachedBounds       <- No.
                cachedLocalBounds  <- No.
                cachedGlobalBounds <- No.
                cachedLayoutingConstraints <- No.
              ^ self
            );


            "
                World and Tree
            "
            world => parentInfo world;

            parentInfo: newParent => parentInfo <- newParent;

            parent => (
                parentInfo ifParent: [ :p | Yes: p ].
              ^ No
            );

            childrenDo:        aBlock => childrenInfo do:        aBlock;
            childrenReverseDo: aBlock => childrenInfo reverseDo: aBlock;

            allChildrenDo: aBlock => childrenDo: [ :child |
                aBlock value(child).
                child allChildrenDo: aBlock
            ];

            allChildrenReverseDo: aBlock => childrenReverseDo: [ :child |
                child allChildrenReverseDo: aBlock.
                aBlock value(child)
            ];

            allDoBefore: beforeBlock After: afterBlock => (
                beforeBlock value(self morph).
                childrenDo: [ :child | (child structure) allDoBefore: beforeBlock After: afterBlock ].
                afterBlock value(self morph)
            );

            add: child => (
                (child structure) remove.
                childrenInfo addChild: child.
                (child structure) parentInfo: ((((polymorphic core) structure parent) RegularParent) Parent: (self morph)).
                (child structure) onAdd.
                "TODO: Event handling"
              ^ self
            );

            addTo: morph => (
                (morph structure) add: self.
              ^ self
            );

            protected isLinked => parentInfo hasParent;  "This method checks if we are linked to a parent morph."

            protected unlink => (
                "
                    TODO: How are we going to handle unlinking from the world?
                "
                (isLinked) if: [
                    (self structure) onRemove.
                    parentInfo removeChild: self.
                    parentInfo: ((polymorphic core) structure parent) NoParent.
                    "TODO: Event handling"
                ].
              ^ self
            );

            remove => unlink;

            replaceWith: replacement => parentInfo replaceChild: self With: replacement;

            onAdd    => ( structureChanged. world yes: [ :w | (w manager) notifyAdd:    (self morph) ]. "TODO: Handle event" );  "TODO: Propagate event to children"
            onRemove => ( structureChanged. world yes: [ :w | (w manager) notifyRemove: (self morph) ]. "TODO: Handle event" );  "TODO: Propagate event to children"


            "
                Position and Size
            "
            offset         => currentOffset;
            relativeOffset => currentOffset;
            dimension      => currentDimension;
            width          => dimension x;
            height         => dimension y;

            extentForOrientation: orientation => dimension dimensionForOrientation: orientation;

            bounds => (
                cachedBounds no: [ cachedBounds <- Yes: (((polymorphic core) math geometry) Rectangle Origin: relativeOffset W: width H: height) ].
              ^ cachedBounds yes
            );

            localBounds => (
                cachedLocalBounds no: [ cachedLocalBounds <- Yes: ((Point Origin) extent: dimension). ].
              ^ cachedLocalBounds yes
            );

            globalBounds => (
                cachedGlobalBounds no: [ cachedGlobalBounds <- Yes: ((parentInfo hasParent) if: [ bounds translateBy: (parentInfo morph) structure globalBounds origin ] else: [ bounds ]) ].
              ^ cachedGlobalBounds yes
            );

            globalOffset => globalBounds origin;

            invalidatePositionCaches => (
                cachedBounds       <- No.
                cachedLocalBounds  <- No.
                cachedGlobalBounds <- No.
              ^ self
            );

            invalidateCaches => (
                invalidatePositionCaches.
                cachedLayoutingConstraints <- No.
                childrenDo: [ :child | (child structure) invalidateCaches ].
              ^ self
            );

            reshape: rect => reshapeX: (rect x) Y: (rect y) W: (rect w) H: (rect h);
            reshapeX: x Y: y W: w H: h => (
                currentOffset    <- Point X: x Y: y.
                currentDimension <- Point X: w Y: h.
                shapeChanged.
              ^ self
            );

            moveToX: x Y: y => reshapeX: x Y: y W: width H: height;
            moveTo: point => moveToX: (point x) Y: (point y);

            resizeToW: w H: h => reshapeX: (relativeOffset x) Y: (relativeOffset y) W: w H: h;
            resizeTo: point => resizeToW: (point x) H: (point y);


            "
                Layouting
            "
            layoutForOrientation: orientation => orientation selectX: xLayout Y: yLayout;

            "TODO: Are these methods really needed?"
            protected baseMinWidth => ((morph behavior) layouter) minWidthForMorph: morph;
            protected baseMinHeight => ((morph behavior) layouter) minHeightForMorph: morph;
            protected baseMinSizeForOrientation: orientation => orientation selectX: baseMinWidth Y: baseMinHeight;

            minSizeForOrientation: orientation => (morph behavior metrics) minSizeForMorph: morph Orientation: orientation;
            minWidth  => minSizeForOrientation: ((polymorphic core) math geometry) orientation Horizontal;
            minHeight => minSizeForOrientation: ((polymorphic core) math geometry) orientation Vertical;

            notifyParentAboutChange => (
                parentInfo aChildLayoutChanged.
              ^ self
            );

            structureChanged => (
                invalidateCaches.
                notifyParentAboutChange.
              ^ self
            );

            shapeChanged => (
                (isLayoutDirty) if: [
                    layoutChanged.
                ] else: [
                    invalidatePositionCaches.
                    notifyParentAboutChange.
                ].
              ^ self
            );

            changed => (
                layoutChanged.
              ^ self
            );

            layoutChanged => (
                invalidatePositionCaches.
                notifyParentAboutChange.
                world yes: [ :w | (w manager) needsLayout: (self morph) ].
              ^ self
            );

            protected isLayoutDirty => isLayoutDirtyForConstraints: dimension;
            protected isLayoutDirtyForConstraints: constraints => (
                cachedLayoutingConstraints yes: [ :c |
                    (c equalsPoint: constraints) if: [
                      ^ false
                    ]
                ].
              ^ true
            );

            forceLayoutWithConstraints: constraints => (
                cachedLayoutingConstraints <- Yes: constraints.
                (morph behavior layouter) layoutMorph: morph Constraints: constraints.
            );
            forceLayoutInPlace => forceLayoutWithConstraints: dimension;

            layoutWithConstraints: constraints => (
                (isLayoutDirtyForConstraints: constraints) if: [
                    forceLayoutWithConstraints: constraints.
                ].
            );
            layoutInPlace => layoutWithConstraints: dimension;

            layoutWithoutConstraints => (
                layoutWithConstraints: (Point X: (minWidth) Y: (minHeight))
            );
            layoutWithHintedConstraints: hint => (
                layoutWithConstraints: (Point X: ((hint x) max: (minWidth))
                                              Y: ((hint y) max: (minHeight)))
            );


            writeOn: w => w << 'a polymorph structure node';
        };
    };

    NewForMorph: morph Behavior: behavior => Instance clone initWithMorph: morph Behavior: behavior;
}
