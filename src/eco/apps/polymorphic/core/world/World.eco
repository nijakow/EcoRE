
{
    static with inherited _ = std Classlike;

    own Instance = {
        static with inherited _ = std Clonable;

        manager;

        protected theRoot <- No;

        with inherited trait = {
            static with inherited _ = std Trait;
            protected polymorphic = $package;

            initWithManager: _manager => (
                manager    <- _manager.
                theRoot <- No.
              ^ self
            );

            declareRoot: morph => (
                "Assert that the root is not already defined."
                (theRoot) yes: [ :tr |
                    (std sys error) ThrowMessage: 'Root already defined.'.
                ].
                
                "Add the new root to the world."
                (morph structure) remove.
                (morph structure) parentInfo: (((polymorphic core structure parent) WorldParent) World: self).
                (morph structure) onAdd.

                "Set the root."
                theRoot <- Yes: morph.

                "No specific return value."
              ^ self
            );

            root => theRoot yes;

            allMorphsDo: aBlock => theRoot yes: [ :root |
                (root structure) allChildrenDo: aBlock
            ];

            allMorphsReverseDo: aBlock => theRoot yes: [ :root |
                (root structure) allChildrenReverseDo: aBlock
            ];

            renderOn: renderer => (
                theRoot yes: [ :root |
                    (root structure) allDoBefore: [ :morph |
                        renderer pushRelativeOffset: ((morph structure) offset).
                        ((morph behavior) renderer) renderMorph: morph OnRenderer: renderer.
                    ] After: [ :morph |
                        renderer popOffset.
                    ]
                ]
            );

            tick => (
                manager tick.
              ^ self
            );

            resizeW: w H: h => (
                theRoot yes: [ :root |
                    (root structure) resizeToW: w H: h.
                ].
              ^ self
            );

            newSession  => ((polymorphic core world) Session) World: self;
            newViewport => ((polymorphic core world) Viewport) World: self;
            newTerminal => ((polymorphic core world) Terminal) World: self;

            writeOn: w => w << 'a polymorphic world';
        };
    };

    Manager: manager => (Instance clone) initWithManager: manager;
}
