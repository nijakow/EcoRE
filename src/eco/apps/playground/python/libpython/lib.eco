{
    static with inherited _ = std Module;

    lib <- No;

    PyObject <- (ffi types void);
    PyTypeObject => PyObject;
    PyModuleObject => PyObject;
    PyLongObject => PyObject;
    PyUnicodeObject => PyObject;

    Py_None <- No;

    PyType_Type    <- No,
    PyModule_Type  <- No,
    PyLong_Type    <- No,
    PyUnicode_Type <- No;

    PyEco_Initialize <- No,
    PyEco_Finalize   <- No;

    PyEco_IsNone <- No;

    Py_IncRef <- No,
    Py_DecRef <- No;

    PyEco_TypeCheck <- No.

    PyImport_ImportModule <- No,
    PyModule_New <- No;

    PyLong_FromLong <- No,
    PyLong_AsLong   <- No;

    PyUnicode_FromString       <- No,
    PyEco_PyUnicode_GrabString <- No;

    PyRun_SimpleString <- No;

    protected Symbol: name => (
        (self lib) yes: [ :lib |
            ^ lib symbol: name
        ].
      ^ No
    );

    protected Function: name Type: type => (
        (self lib) yes: [ :lib |
            ^ lib function: name type: type
        ].
      ^ No
    );

    protected LoadFuncs => (
        PyEco_Initialize <- Function: #'PyEco_Initialize' Type: ((ffi types void) function()).
        PyEco_Finalize   <- Function: #'PyEco_Finalize' Type: ((ffi types void) function()).

        Py_None <- Yes: ((Function: #'PyEco_GetNone' Type: ((PyObject pointer) function())) yes value()).

        PyType_Type    <- Symbol: #'PyType_Type'.
        PyModule_Type  <- Symbol: #'PyModule_Type'.
        PyLong_Type    <- Symbol: #'PyLong_Type'.
        PyUnicode_Type <- Symbol: #'PyUnicode_Type'.

        PyEco_IsNone <- Function: #'PyEco_IsNone' Type: ((ffi types bool) function(PyObject pointer)).

        Py_IncRef <- Function: #'Py_IncRef' Type: ((ffi types void) function(PyObject pointer)).
        Py_DecRef <- Function: #'Py_DecRef' Type: ((ffi types void) function(PyObject pointer)).

        PyEco_TypeCheck <- Function: #'PyEco_TypeCheck' Type: ((ffi types bool) function(PyObject pointer, PyTypeObject pointer)).

        PyImport_ImportModule <- Function: #'PyImport_ImportModule' Type: ((PyModuleObject pointer) function(ffi types string)).
        PyModule_New <- Function: #'PyModule_New' Type: ((PyModuleObject pointer) function(ffi types string)).

        PyLong_FromLong <- Function: #'PyLong_FromLong' Type: ((PyLongObject pointer) function(ffi types long)).
        PyLong_AsLong   <- Function: #'PyLong_AsLong' Type: ((ffi types long) function(PyLongObject pointer)).

        PyUnicode_FromString <- Function: #'PyUnicode_FromString' Type: ((PyUnicodeObject pointer) function(ffi types string)).
        PyEco_PyUnicode_GrabString <- Function: #'PyEco_PyUnicode_GrabString' Type: ((ffi types string) function(PyUnicodeObject pointer)).

        PyRun_SimpleString <- Function: #'PyRun_SimpleString' Type: ((ffi types int) function(ffi types string)).

      ^ self
    );

    Setup: file => (
        lib <- ffi DLOpen: file.
        LoadFuncs.
      ^ self
    );

    InitLinux => Setup: (std os files here / '..' / 'pyeco' / 'libpyeco.so') path;
    InitMac => Setup: (std os files here / '..' / 'pyeco' / 'libpyeco.dylib') path;

    Init => (
        std os type
            ~ ifLinux: [ ^ InitLinux ]
            ~ ifMacOS: [ ^ InitMac   ].
        'PyEco is not supported on this platform' throw.
    );
}