
{
    static with inherited _ = std Module;
    protected libpython <- $package;

    own PyObject = {
        static with inherited _ = std Clonable;

        ptr;

        with inherited trait = {
            static with inherited _ = std Trait;
            protected libpython <- $package;

            initWithPtr: _ptr => (
                ptr <- _ptr.
                std reflect EnableFinalization: self.
              ^ self
            );

            incref => (
                libpython funcs IncRef: ptr.
              ^ self
            );

            decref => (
                (libpython lib Py_DecRef yes) value(ptr).
              ^ self
            );

            attribute: name => libpython objects Object: ((libpython funcs) Object: ptr Attribute: name);
            attribute: name put: value => (
                ((libpython funcs) Object: ptr Attribute: name Put: (value ptr)).
              ^ self
            );
            call: args => (
                | argsTuple <- libpython objects Tuple: args |
              ^ (libpython objects) Object: ((libpython funcs) Object: ptr CallWithArgs: (argsTuple ptr)).
            );
            call(...) => call: std util newArray(...);
            callMethod: name Args: args => (
                | argsTuple <- libpython objects Tuple: args |
              ^ (libpython objects) Object: ((libpython funcs) Object: ptr CallMethod: name WithArgs: (argsTuple ptr)).
            );
            callMethod(name, ...) => callMethod: name Args: std util newArray(...);

            pull => self;

            finalize => decref;

            writeOn: w => w << 'a PyObject';
        };
    };

    own PyNone = {
        static with inherited _ = std Clonable;
        with inherited own PyObject = $ PyObject;

        with inherited trait = {
            static with inherited _ = std Trait;
            
            initWithPtr: _ptr => (
                $(PyObject) initWithPtr: _ptr.
              ^ self
            );

            writeOn: w => w << 'PyNone';
        };
    };

    own PyType = {
        static with inherited _ = std Clonable;
        with inherited own PyObject = $ PyObject;

        with inherited trait = {
            static with inherited _ = std Trait;
            
            initWithPtr: _ptr => (
                $(PyObject) initWithPtr: _ptr.
              ^ self
            );

            typecheck: obj => (libpython funcs TypeCheck: (obj ptr) Against: ptr);

            writeOn: w => w << 'a PyType';
        };
    };

    own PyModule = {
        static with inherited _ = std Clonable;
        with inherited own PyObject = $ PyObject;

        with inherited trait = {
            static with inherited _ = std Trait;
            
            initWithPtr: _ptr => (
                $(PyObject) initWithPtr: _ptr.
              ^ self
            );

            writeOn: w => w << 'a PyModule';
        };
    };

    own PyLong = {
        static with inherited _ = std Clonable;
        with inherited own PyObject = $ PyObject;

        with inherited trait = {
            static with inherited _ = std Trait;
            
            initWithPtr: _ptr => (
                $(PyObject) initWithPtr: _ptr.
              ^ self
            );

            pull => (libpython funcs LongGrabEcoInt: ptr);

            writeOn: w => w << 'a PyLong(' << (self pull) << ')';
        };
    };

    own PyUnicode = {
        static with inherited _ = std Clonable;
        with inherited own PyObject = $ PyObject;

        with inherited trait = {
            static with inherited _ = std Trait;
            
            initWithPtr: _ptr => (
                $(PyObject) initWithPtr: _ptr.
              ^ self
            );

            pull => (libpython funcs UnicodeGrabEcoString: ptr);

            writeOn: w => w << 'a PyUnicode';
        };
    };

    own PyTuple = {
        static with inherited _ = std Clonable;
        with inherited own PyObject = $ PyObject;

        with inherited trait = {
            static with inherited _ = std Trait;
            
            initWithPtr: _ptr => (
                $(PyObject) initWithPtr: _ptr.
              ^ self
            );

            size => (libpython funcs TupleGrabSize: ptr);
            at: index => (libpython objects Object: (libpython funcs Tuple: ptr At: index));
            at: index put: value => (
                libpython funcs Tuple: ptr At: index Put: (value ptr).
              ^ self
            );

            writeOn: w => (
                w << 'a PyTuple('.
                0 for: size do: [ :i |
                    (i > 0) if: [ w << ', ' ].
                    w << (self at: i).
                ].
                w << ')'.
            );
        };
    };

    Tuple: array => (
        | tuple <- (PyTuple clone) initWithPtr: (libpython funcs NewTuple: (array size)) |
        array forEach: [ :i :each | tuple at: i put: each ].
      ^ tuple
    );
    Tuple(...) => Tuple: std util newArray(...);

    Object: ptr => (
        (libpython funcs IsNone: ptr) if: [ ^ PyNone ].
        (libpython funcs IsLong: ptr) if: [ ^ (PyLong clone) initWithPtr: ptr ].
        (libpython funcs IsUnicode: ptr) if: [ ^ (PyUnicode clone) initWithPtr: ptr ].
        (libpython funcs IsTuple: ptr) if: [ ^ (PyTuple clone) initWithPtr: ptr ].
        (libpython funcs IsType: ptr) if: [ ^ (PyType clone) initWithPtr: ptr ].
        (libpython funcs IsModule: ptr) if: [ ^ (PyModule clone) initWithPtr: ptr ].
      ^ (PyObject clone) initWithPtr: ptr
    );

    From: ecoobj => (
        (ecoobj isInt)    if: [ ^ Object: (libpython funcs NewLongFromEcoInt: ecoobj) ].
        (ecoobj isString) if: [ ^ Object: (libpython funcs NewUnicodeFromEcoString: ecoobj) ].
        (ecoobj isArray)  if: [ ^ Tuple: ecoobj ].
        std sys error ThrowMessage: 'Can not convert Eco object to Python object!'.
    );


    Init => (
        PyNone initWithPtr: (libpython lib Py_None yes).
      ^ self
    );
}
