
{
    static with inherited _ = std Module;
    protected libpython <- $package;

    own PyObject = {
        static with inherited _ = std Clonable;

        protected ptr;

        with inherited trait = {
            static with inherited _ = std Trait;
            protected libpython <- $package;

            initWithPtr: _ptr => (
                ptr <- _ptr.
                std reflect EnableFinalization: self.
              ^ self
            );

            incref => (
                libpython funcs IncRef: ptr.
              ^ self
            );

            decref => (
                (libpython lib Py_DecRef yes) value(ptr).
              ^ self
            );

            pull => self;

            finalize => decref;

            writeOn: w => w << 'a PyObject';
        };
    };

    own PyModule = {
        static with inherited _ = std Clonable;
        with inherited own PyObject = $ PyObject;

        with inherited trait = {
            static with inherited _ = std Trait;
            
            initWithPtr: _ptr => (
                $(PyObject) initWithPtr: _ptr.
              ^ self
            );

            writeOn: w => w << 'a PyModule';
        };
    };

    Object: ptr => (
        (libpython funcs IsModule: ptr) if: [ ^ (PyModule clone) initWithPtr: ptr ].
      ^ (PyObject clone) initWithPtr: ptr
    );
}
