
{
    static with inherited _ = std Module;

    own lib = {
        static with inherited _ = std Module;

        lib <- No;

        Py_Initialize <- No,
        Py_FinalizeEx <- No;

        PyRun_SimpleString <- No;

        protected Function: name Type: type => (
            (self lib) yes: [ :lib |
                ^ lib function: name type: type
            ].
          ^ No
        );

        protected LoadFuncs => (
            Py_Initialize <- Function: #'Py_Initialize' Type: ((ffi types void) function()).
            Py_FinalizeEx <- Function: #'Py_FinalizeEx' Type: ((ffi types int) function()).

            PyRun_SimpleString <- Function: #'PyRun_SimpleString' Type: ((ffi types int) function(ffi types string)).

          ^ self
        );

        Init: file => (
            lib <- ffi DLOpen: 'libpython3.11.so'.
            LoadFuncs.
          ^ self
        );
    };

    own objects = {
        static with inherited _ = std Module;

        own PyObject = {
            static with inherited _ = std Clonable;

            with inherited trait = {
                static with inherited _ = std Trait;

                writeOn: w => w << 'a PyObject';
            };
        };
    };

    RunSimpleString: string => (lib PyRun_SimpleString yes) value(string);

    Init => (
        lib Init: 'libpython3.11.so'.
        (lib Py_Initialize yes) value.
      ^ self
    );
}
