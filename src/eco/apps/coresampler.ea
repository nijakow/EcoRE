
{
    static with inherited _ = std Module;
    with app = $;

    own Kernel = {
        static with inherited _ = std Clonable;

        window    <- No,
        rebuilder <- No;
        
        with inherited trait = {
            static with inherited _ = std Trait;

            window: win => window <- Yes: win;
            rebuilder: rb => rebuilder <- Yes: rb;

            xRayDo: block => (
                window yes: [ :win |
                    | offset <- win globalOffset |

                    (win world) yes: [ :world |
                        |
                            morphs <- std util newVector,
                        |

                        [ :break |
                            world xRayAt: offset Do: [ :morph |
                                "
                                    Ignore morphs from the core sampler itself.
                                "
                                (morph == win) if: [ break value ].

                                "
                                    But collect all other morphs.
                                "
                                morphs add: morph.
                            ].
                        ] withBreak.

                        morphs reverseDo: block.
                    ].
                ].

              ^ self
            );

            update => (
                rebuilder
                    yes: [ :rb | rb value. ].
            );

            writeOn: w => w << 'a coresampler kernel';
        };
    };

    Stringify: object => (
        | sw <- (std io StringWriter) new |

        sw << object.

      ^ sw build
    );

    MenuForMorph: morph Hand: hand => (
        (framework actions open ui) BuildAndOpenContextMenu: [ :cmb |
            cmb item: 'Inspect'
                does: $[ :(framework, morph) |
                            (framework actions open) OutlinerForObject: morph
                       ] bind(framework, morph).
            cmb item: 'Grab'
                does: $[ :(hand, morph) |
                            hand grab: morph
                       ] bind(hand, morph).
            cmb item: 'Close'
                does: $[ :(morph) |
                            morph unlink
                       ] bind(morph).
        ].
    );

    BuildCS: ui => (
        |
            kernel <- Kernel new,
            win <-
                ui Window(380, 400,
                    ui VBox(
                        ui HBox(
                            ui Spacer
                                ~ xLayout: ui layouts Flexible
                                ~ yLayout: ui layouts ShrinkWrap,
                            ui Padding(10, (ui Label: 'Core Sampler')),
                            ui Spacer
                                ~ xLayout: ui layouts Flexible
                                ~ yLayout: ui layouts ShrinkWrap
                        ) ~ yLayout: ui layouts ShrinkWrap,
                        ui WithRebuilderDo: $[ :(us, ui, kernel) :rebuild |
                            | vbox <- ui VBox() |

                            kernel xRayDo: [ :morph |
                                vbox add: (
                                    ui Button(
                                        ui Padding(5, ui Label: (us Stringify: morph)),
                                        $[ :(us, morph) :sender, :hand | us MenuForMorph: morph Hand: hand ] bind(us, morph)
                                    ) ~ yLayout: ui layouts ShrinkWrap
                                )
                            ].

                            kernel rebuilder: rebuild.

                            ui Scrollable(
                                ui Padding(5, vbox)
                            )
                        ] bind(self, ui, kernel),
                        ui Button(ui Padding(5, ui Label: 'Update'), $[ :(kernel) :sender | kernel update ] bind(kernel))
                            ~ xLayout: ui layouts Flexible
                            ~ yLayout: ui layouts ShrinkWrap
                    )
                )
        |

        kernel window: win.

      ^ win
    );

    Main => (
        (framework actions open ui) BuildAndOpen: [ :ui |
            BuildCS: ui.
        ].
    )
}
