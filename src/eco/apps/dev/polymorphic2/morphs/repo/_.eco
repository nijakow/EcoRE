
std Module
{
    TestMorph <- ($package core morph Behavior) New
                ~ presenter:
                    {
                        isa std Singleton;

                        with inherited PresenterTrait <- ($package core morph behavior presenting) PresenterTrait;

                        drawOn: stream Kernel: kernel => (
                            stream emit: ((polymorphic core objects Rectangle) X: 0 Y: 0 W: 64 H: 64).
                          ^ self
                        );

                        writeOn: w => w << 'the test presenter';
                    };
    
    EmitMorph <- ($package core morph Behavior) New
                ~ presenter:
                    {
                        drawOn: stream Kernel: kernel => (
                            stream emit: ((kernel state) payload).
                          ^ self
                        );

                        writeOn: w => w << 'the emit presenter';
                    };

    FlexMorph :: Module
    {
        protected polymorphic <- $package;

        Behavior <- ($package core morph Behavior) New
                  ~ presenter:
                      {
                        isa std Singleton;

                        with inherited PresenterTrait <- ($package core morph behavior presenting) PresenterTrait;

                        drawOn: stream Kernel: kernel => (
                            |
                                orientation <- ((kernel state) payload) orientation,
                                morphs      <- ((kernel state) payload) morphs
                            |

                            morphs do: [ :morph |
                                "Very simple for now..."
                                stream emit: morph.
                                (orientation vertical?) -> [
                                    stream newline.
                                ].
                            ].

                          ^ self
                        );

                        writeOn: w => w << 'the flex presenter';
                      };
        
        Payload :: Classlike
        {
            Instance :: Clonable
            {
                |
                    orientation,
                    morphs
                |

                {
                    protected polymorphic <- $package;

                    initWithOrientation: o => (
                        orientation <- o.
                        morphs      <- std util newVector.
                      ^ self
                    );
                }
            };

            Orientation: orientation => (Instance clone) initWithOrientation: orientation;
        };

        ForOrientation: orientation => (Behavior link: (Payload Orientation: orientation));

        Horizontal => ForOrientation: (polymorphic math geometry orientation) Horizontal;
        Vertical   => ForOrientation: (polymorphic math geometry orientation) Vertical;
    };
}
