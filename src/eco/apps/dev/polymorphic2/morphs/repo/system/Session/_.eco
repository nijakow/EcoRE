
std Module
{
    Behavior <- ($package core) NewBehavior
                    ~ name: 'a session morph'
                    ~ presenterFunction: $[ :(polymorphic) :stream :kernel |
                            |
                                extent <- ((kernel payload) desktop) extent
                            |

                            stream withRoom: extent ForGraphicsDo: [ :graphics |
                                graphics in: (((polymorphic math geometry) Point Origin) extent: extent)
                                        put: (kernel payload) desktopMorph.
                                graphics at: (kernel payload) hand position
                                        put: (kernel payload) handMorph.
                            ].
                    ] bind($package)
                    ~ build;

    State :: Classlike {
        Instance :: Clonable
        {
            |
                bounds,
                handMorph,
                desktopMorph,
            |

            {
                protected polymorphic <- $package;

                initWithDriver: driver => (
                    bounds       <- ((polymorphic math geometry) Rectangle) W: 0 H: 0.
                    handMorph    <- (((polymorphic morphs) repo system) Hand) Driver: driver.
                    desktopMorph <- (((polymorphic morphs) repo system) Desktop) New.
                  ^ self
                );

                hand    => handMorph payload;
                desktop => desktopMorph payload;

                extent: extent => (
                    bounds <- ((polymorphic math geometry) Rectangle) Extent: extent.
                    desktop extent: extent.
                  ^ self
                );

                writeOn: w => w << 'a session';
            }
        };

        Driver: driver => (Instance clone) initWithDriver: driver;
    };

    Driver: driver => Behavior link: (State Driver: driver);
}
