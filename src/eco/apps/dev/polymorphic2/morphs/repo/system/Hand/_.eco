
std Module
{
    Behavior <- ($package core) NewBehavior
                    ~ name: 'a hand morph'
                    ~ presenterFunction: $[ :(polymorphic) :stream :kernel |
                        ((kernel payload) grabbedMorph) yes: [ :gm |
                            stream withGraphicsDo: [ :graphics |
                                graphics at: ((kernel payload) grabbedMorphTranslation)
                                        put: gm. 
                            ].
                        ] no: [
                            stream << 'a hand'.
                        ].
                    ] bind($package)
                    ~ enableBlessing
                    ~ build;

    State :: Classlike {
        Instance :: Clonable
        {
            |
                driver,
                maybeMorphKernel <- No,
                position,
                grabbedMorph,
                grabbedMorphTranslation,
            |

            {
                protected polymorphic <- $package;

                initWithDriver: _driver => (
                    driver                  <- _driver.
                    maybeMorphKernel        <- No.
                    position                <- (polymorphic math geometry) Point Origin.
                    grabbedMorph            <- No.
                    grabbedMorphTranslation <- (polymorphic math geometry) Point Origin.
                  ^ self
                );

                protected changed => (
                    maybeMorphKernel yes: [ :kernel | kernel changed ].
                  ^ self
                );

                protected changedPlacement => (
                    maybeMorphKernel yes: [ :kernel | kernel changedPlacement ].
                  ^ self
                );

                bless: kernel => maybeMorphKernel <- Yes: kernel;

                moveToX: x Y: y => (
                    position <- (polymorphic math geometry) Point X: x Y: y.
                    changedPlacement.
                  ^ self
                );

                tryGrab: kernel Translation: translation => (
                    grabbedMorph            <- Yes: kernel.
                    grabbedMorphTranslation <- translation.
                    changed.
                  ^ self
                );

                tryGrab: kernel => tryGrab: kernel Translation: ((polymorphic math geometry) Point Origin);

                tryRelease => (
                    grabbedMorph yes: [ :gm |
                        (driver dispatcher)
                            dropMorph: gm Hand: self. "TODO: Check if the event was handled"
                        grabbedMorph <- No.
                        changed.
                      ^ true
                    ].
                  ^ false
                );

                writeOn: w => w << 'a hand';
            }
        };

        Driver: driver => (Instance clone) initWithDriver: driver;
    };

    Driver: driver => Behavior link: (State Driver: driver);
}
