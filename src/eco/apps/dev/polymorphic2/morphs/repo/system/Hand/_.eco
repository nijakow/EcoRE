
std Module
{
    Behavior <- ($package core) NewBehavior
                    ~ presenterFunction: $[ :(polymorphic) :stream :kernel |
                        stream << 'a hand'.
                        stream withGraphicsDo: [ :graphics |
                            graphics at: ((polymorphic math geometry) Point Origin)
                                    put: (kernel payload) circle.
                        ].
                    ] bind($package)
                    ~ build;

    State :: Classlike {
        Instance :: Clonable
        {
            |
                position,
                grabbedMorph,
                circle,
            |

            {
                protected polymorphic <- $package;

                init => (
                    position     <- (polymorphic math geometry) Point Origin.
                    grabbedMorph <- No.
                    circle       <- ((polymorphic morphs) repo fun) TestMorph3_1 link.
                  ^ self
                );

                moveToX: x Y: y => (
                    position <- (polymorphic math geometry) Point X: x Y: y.
                  ^ self
                );

                writeOn: w => w << 'a hand';
            }
        };

        New => Instance new;
    };

    New => Behavior link: (State New);
}
