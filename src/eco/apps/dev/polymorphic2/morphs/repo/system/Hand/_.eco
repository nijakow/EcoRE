
std Module
{
    Behavior <- ($package core) NewBehavior
                    ~ name: 'a hand morph'
                    ~ presenterFunction: $[ :(polymorphic) :stream :kernel |
                        stream << 'a hand'.
                        ((kernel payload) grabbedMorph) yes: [ :gm |
                            stream newline.
                            stream emit: gm.
                        ].
                    ] bind($package)
                    ~ enableBlessing
                    ~ build;

    State :: Classlike {
        Instance :: Clonable
        {
            |
                maybeMorphKernel <- No,
                position,
                grabbedMorph,
            |

            {
                protected polymorphic <- $package;

                init => (
                    maybeMorphKernel <- No.
                    position         <- (polymorphic math geometry) Point Origin.
                    grabbedMorph     <- No.
                  ^ self
                );

                protected changed => (
                    maybeMorphKernel yes: [ :kernel | kernel changed ].
                  ^ self
                );

                bless: kernel => maybeMorphKernel <- Yes: kernel;

                moveToX: x Y: y => (
                    position <- (polymorphic math geometry) Point X: x Y: y.
                    changed.
                  ^ self
                );

                writeOn: w => w << 'a hand';
            }
        };

        New => Instance new;
    };

    New => Behavior link: (State New);
}
