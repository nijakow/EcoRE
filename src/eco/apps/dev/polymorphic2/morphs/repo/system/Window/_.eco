
std Module
{
    Behavior <- ($package core) NewBehavior
                    ~ name: 'a window morph'
                    ~ presenterFunction: $[ :(polymorphic) :stream :kernel |
                        stream withGraphicsDo: [ :graphics |
                            (graphics maybeBounds) yes: [ :bounds |
                                graphics at: ((polymorphic math geometry) Point Origin)
                                        put: (((polymorphic core objects) FilledRectangle)
                                                    X: 0
                                                    Y: 0
                                                    W: (bounds w)
                                                    H: (bounds h)
                                                Color: ((polymorphic color) Color R: 192 G: 128 B: 128)).
                            ].
                            ((kernel payload) child) yes: [ :c | stream emit: c ].
                        ].
                    ] bind($package)
                    ~ on: (($package event) predicates AddMorph) do: $[ :kernel :event |
                        ((kernel state) payload) child: (event body).
                        kernel changed.
                    ]
                    ~ on: (($package event) predicates MouseClick) do: $[ :(polymorphic) :context :event |
                        | hand <- ((event body) hand) payload |
                        hand tryGrab: (context kernel) Translation: ((polymorphic math geometry) Point X: ((context x) negate) Y: ((context y) negate)).
                    ] bind($package)
                    ~ build;

    State :: Classlike {
        Instance :: Clonable
        {
            |
                maybeMorphKernel <- No,
                child            <- No,
            |

            {
                protected polymorphic <- $package;

                init => (
                    maybeMorphKernel <- No.
                    child            <- No.
                  ^ self
                );

                bless: kernel => maybeMorphKernel <- Yes: kernel;

                protected changed => (
                    maybeMorphKernel yes: [ :kernel | kernel changed ].
                  ^ self
                );

                child: c => child <- Yes: c;

                writeOn: w => w << 'a desktop';
            }
        };

        New => Instance new;
        Child: c => New ~ child: c;
    };

    New      => Behavior link: (State New);
    Child: c => Behavior link: (State Child: c);
}
