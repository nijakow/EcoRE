
std Module
{
    Behavior <- ($package core) NewBehavior
                    ~ name: 'a desktop morph'
                    ~ presenterFunction: $[ :(polymorphic) :stream :kernel |
                        stream withGraphicsDo: [ :graphics |
                            (stream << 'Hello, world!') newline commit.
                            ((kernel payload) windows) forEach: [ :window :winbounds |
                                graphics in: winbounds put: window.
                            ].
                        ].
                    ] bind($package)
                    ~ on: (($package event) predicates AddMorph) do: $[ :kernel :event |
                        ((kernel state) payload) openMorph: (event body).
                        kernel changed.
                    ]
                    ~ build;

    State :: Classlike {
        Instance :: Clonable
        {
            |
                extent,
                windows,
            |

            {
                protected polymorphic <- $package;

                init => (
                    extent  <- (polymorphic math geometry) Point X: 0 Y: 0.
                    windows <- std util newMap.
                  ^ self
                );

                extent: e => (
                    extent <- e.
                  ^ self
                );

                openMorph: kernel => (
                    |
                        minBounds <- kernel minBounds,
                        newBounds <- (polymorphic math geometry) Rectangle
                                        X: (extent x / 2) - (minBounds w / 2)
                                        Y: (extent y / 2) - (minBounds h / 2)
                                        W: minBounds w
                                        H: minBounds h
                    |
                    windows at: kernel put: newBounds.
                  ^ self
                );

                writeOn: w => w << 'a desktop';
            }
        };

        New => Instance new;
    };

    New => Behavior link: (State New);
}
