
std Module
{
    Behavior <- ($package core) NewBehavior
                    ~ name: 'a desktop morph'
                    ~ presenterFunction: $[ :(polymorphic) :stream :kernel |
                        stream withGraphicsDo: [ :graphics |
                            (stream << 'Hello, world!') newline commit.
                            ((kernel payload) windows) forEach: [ :window :winbounds |
                                graphics in: winbounds put: window.
                            ].
                        ].
                    ] bind($package)
                    ~ build;

    State :: Classlike {
        Instance :: Clonable
        {
            |
                extent,
                windows,
            |

            {
                protected polymorphic <- $package;

                init => (
                    extent  <- (polymorphic math geometry) Point X: 0 Y: 0.
                    windows <- std util newMap.
                  ^ self
                );

                extent: extent => (
                    (std io out << 'Resizing to ' << extent) newline commit.
                  ^ self
                );

                writeOn: w => w << 'a desktop';
            }
        };

        New => Instance new;
    };

    New => Behavior link: (State New);
}
