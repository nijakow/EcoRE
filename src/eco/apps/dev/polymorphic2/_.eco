
std Module
{
    with app = $;

    core :: (here / 'core' / '_.eco') importIn: self;


    PaperWrapperMorph :: Clonable {
        with inherited own Morph = $package gfx morphic morphs Morph;

        paper <- No;

        {
            paper: p => (
                paper <- Yes: p.
                renderDirty.
              ^ self
            );

            renderImplOn: renderer => (
                paper yes: [ :p | p renderOn: renderer ].
              ^ self
            );

            writeOn: w => w << 'a paper wrapper morph';
        }
    };


    Test => (
        |
            paper  <- ((core paper) Paper) Extent: (math geometry Point X: 400 Y: 400),
            stream <- paper stream,
            r      <- 5,
            circle <- (core objects FilledCircle Radius: r)
        |

        stream emit: ((core objects Text) Caption: 'Hello World!').

        stream emit: circle.
        stream emit: circle.

        stream withRoom: (math geometry Point X: 100 Y: 100) ForGraphicsDo: [ :graphics |
            graphics at: (math geometry Point X:  0 Y:  0) put: (core objects Rectangle Bounds: (graphics bounds)).
            graphics at: (math geometry Point X: 50 Y: 50) put: (core objects FilledCircle Radius: 25).
        ].

        stream emit: circle.
        stream newline.

        1 to: 25 do: [ :i |
            stream emit: circle.
            ((i mod: 5) == 0) if: [
                stream newline.
            ].
        ].

        stream newline.

        stream emit: (((core morph Behavior) New) link).

        stream withGraphicsDo: [ :graphics |
            graphics at: (math geometry Point X:  0 Y:  0) put: (core objects Rectangle Bounds: (graphics bounds)).
            graphics at: (math geometry Point X: (graphics bounds w / 2) Y: (graphics bounds h / 2)) put: (core objects FilledCircle Radius: 25).
        ].

        (framework actions open) ui BuildAndOpen: [ :ui |
            ui Window(400, 400,
                ui Clipped(
                    PaperWrapperMorph new paper: paper
                )
            )
        ]
    );
}
