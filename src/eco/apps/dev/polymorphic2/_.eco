
std Module
{
    with app = $;

    core   :: (here / 'core'   / '_.eco') importIn: self;
    color  :: (here / 'color'  / '_.eco') importIn: self;
    event  :: (here / 'event'  / '_.eco') importIn: self;
    morphs :: (here / 'morphs' / '_.eco') importIn: self;


    DriverWrapperMorph :: Clonable {
        with inherited own Morph = ($package gfx morphic) morphs Morph;

        driver <- No;

        {
            driver: d => (
                driver <- Yes: d.
                renderDirty.
              ^ self
            );

            renderImplOn: renderer => (
                driver yes: [ :d | (d rootPaper) renderOn: renderer ].
              ^ self
            );

            writeOn: w => w << 'a driver wrapper morph';
        }
    };


    Test => (
        |
            driver <- ((core world) Driver) New
        |

        driver run.

        (framework actions open) ui BuildAndOpen: [ :ui |
            ui Window(450, 450,
                ui Clipped(
                    (DriverWrapperMorph new) driver: driver
                )
            )
        ]
    );
}
