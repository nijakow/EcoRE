
std Module
{
    with app = $;

    core   :: (here / 'core'   / '_.eco') importIn: self;
    color  :: (here / 'color'  / '_.eco') importIn: self;
    event  :: (here / 'event'  / '_.eco') importIn: self;
    morphs :: (here / 'morphs' / '_.eco') importIn: self;


    DriverWrapperMorph :: Clonable {
        with inherited own Morph = ($package gfx morphic) morphs Morph;

        driver <- No;

        {
            driver: d => (
                driver <- Yes: d.
                renderDirty.
              ^ self
            );

            renderImplOn: renderer => (
                driver yes: [ :theDriver | 
                    |
                        mousePos         <- (world yes) handMorph globalOffset,
                        relativeMousePos <- mousePos - globalOffset
                    |

                    (theDriver)
                        mouseMovedToX: (relativeMousePos x)
                                    Y: (relativeMousePos y).

                    [
                        (theDriver) tick.
                        (theDriver rootPaper) renderOn: renderer.
                    ] catch: [ :ex |
                        (std io out << 'Oops! Something went wrong in polymorphic2!') newline commit.
                    ].
                ].

              ^ self
            );

            handleClick: click At: point HandMorph: hand => (
                (driver yes)
                    mouseMovedToX: (point x)
                                Y: (point y).
                "TODO"
              ^ true
            );

            handleKey: key At: point HandMorph: hand => (
                (driver yes)
                    mouseMovedToX: (point x)
                                Y: (point y).
                (driver yes) keyPressed: key.
                (driver yes) keyReleased: key.
              ^ true
            );

            handleScrollX: sx Y: sy HandMorph: hand => (
                (driver yes) mouseScrolledByX: sx Y: sy.
              ^ true
            );

            writeOn: w => w << 'a driver wrapper morph';
        }
    };


    Test => (
        |
            driver <- ((core world) Driver) New
        |

        driver run.

        (framework actions open) ui BuildAndOpen: [ :ui |
            ui Window(450, 450,
                ui Clipped(
                    (DriverWrapperMorph new) driver: driver
                )
            )
        ]
    );
}
