
std Module
{
    with app = $;

    core   :: (here / 'core'   / '_.eco') importIn: self;
    color  :: (here / 'color'  / '_.eco') importIn: self;
    morphs :: (here / 'morphs' / '_.eco') importIn: self;


    PaperWrapperMorph :: Clonable {
        with inherited own Morph = $package gfx morphic morphs Morph;

        paper <- No;

        {
            paper: p => (
                paper <- Yes: p.
                renderDirty.
              ^ self
            );

            renderImplOn: renderer => (
                paper yes: [ :p | p renderOn: renderer ].
              ^ self
            );

            writeOn: w => w << 'a paper wrapper morph';
        }
    };


    Test => (
        |
            world  <- ((core world) World) New,
            paper  <- ((core paper) Paper) Extent: (math geometry Point X: 400 Y: 400),
            stream <- paper stream,
            r      <- 5,
            circle <- (core objects FilledCircle Radius: r)
        |

        paper node: (world node).

        1 to: 5 do: [ :i | (stream << i) newline ].

        stream emit: ((core objects Text) Caption: 'Hello World!').

        stream emit: circle.
        stream emit: circle.

        stream withRoom: (math geometry Point X: 100 Y: 100) ForGraphicsDo: [ :graphics |
            graphics at: (math geometry Point X:  0 Y:  0) put: (core objects Rectangle Bounds: (graphics bounds)).
            graphics at: (math geometry Point X: 50 Y: 50) put: (core objects FilledCircle Radius: 25).
        ].

        stream emit: circle.
        stream emit: ((morphs repo FrameMorph) Child: ((morphs repo TestMorph2) link)).
        stream newline.

        1 to: 25 do: [ :i |
            stream emit: circle.
            ((i mod: 5) == 0) if: [
                stream newline.
            ].
        ].

        stream newline.

        | behavior <- (core morph Behavior) New |

        stream emit: (behavior link).
        stream emit: circle.
        stream emit: (behavior link).
        stream emit: circle.
        stream newline.
        stream emit: circle.
        stream emit: (behavior link).
        stream emit: circle.
        stream emit: (behavior link).
        stream newline.

        | flex2 |

        (
            |
                flex    <- morphs repo FlexMorph Horizontal,
                payload <- (flex state) payload
            |

            (payload morphs) add: (morphs repo TestMorph link).
            (payload morphs) add: (morphs repo TestMorph link).

            (
                
                    flex2    <- morphs repo FlexMorph Vertical,
                |    payload2 <- (flex2 state) payload
                |

                (payload2 morphs) add: (morphs repo TestMorph link).
                (payload2 morphs) add: (morphs repo TestMorph link).
                (payload2 morphs) add: (morphs repo TestMorph link).

                (
                    |
                        flex3    <- morphs repo FlexMorph Horizontal,
                        payload3 <- (flex3 state) payload
                    |

                    1 to: 4 do: [ :i |
                        (payload3 morphs) add: ((morphs repo EmitMorph) link: (core objects FilledCircle Radius: ((11 - i) * 3))).
                    ].

                    (payload2 morphs) add: flex3.
                ).

                (payload2 morphs) add: (morphs repo TestMorph link).

                (payload morphs) add: flex2.
                (payload morphs) add: flex2.
            ).

            (payload morphs) add: (morphs repo TestMorph link).
            (payload morphs) add: (morphs repo TestMorph link).

            stream emit: ((morphs repo FrameMorph) Child: flex).
            stream emit: ((core objects Text) Caption: 'Some text :D').
            stream newline.
        ).

        ((flex2 state payload) morphs) add: ((morphs repo EmitMorph) link: ((core objects Text) Caption: 'This is where the fun begins >:D')).
        flex2 changed.

        (
            |
                margin1  <- (morphs repo MarginMorph) Margin: 10,
            |

            (margin1 state) payload
              ~ child: ((morphs repo EmitMorph) link: (core objects FilledCircle Radius: 25)).
            
            stream emit: margin1.
        ).

        stream emit: ((morphs repo EmitMorph) link: (core objects FilledCircle Radius: 25)).
        stream newline.
        stream emit: (core objects FilledCircle Radius: 25).
        stream emit: (core objects FilledCircle Radius: 25).
        stream newline.

        stream withGraphicsDo: [ :graphics |
            graphics at: (math geometry Point X:  0 Y:  0)
                    put: (core objects Rectangle Bounds: (graphics bounds) Color: (color colors Red)).

            graphics at: (math geometry Point X: (graphics bounds w / 2) Y: (graphics bounds h / 2))
                    put: (core objects FilledCircle Radius: 25 Color: (color colors Red)).
        ].

        (framework actions open) ui BuildAndOpen: [ :ui |
            ui Window(400, 400,
                ui Clipped(
                    PaperWrapperMorph new paper: paper
                )
            )
        ]
    );
}
