
{
    isa std Classlike;

    Instance :: Clonable
    {
        |
            bounds,
            presentations
        |

        {
            protected polymorphic <- $package;

            initWithBounds: _bounds => (
                bounds        <- _bounds.
                presentations <- std util newVector.
              ^ self
            );

            add: presentation => (
                presentations add: presentation.
              ^ self
            );

            emitter => (polymorphic core stream Emitter) Paper: self;
            stream  => emitter stream;

            renderOn: renderer => (
                presentations do: [ :each | each renderOn: renderer ].
              ^ self
            );

            "For now, ignore viewport and just render everything."
            renderOn: renderer Viewport: viewport => renderOn: renderer;

            writeOn: w => w << 'a paper';
        }
    };

    Bounds: bounds => (Instance clone) initWithBounds: bounds;
    Extent: extent => Bounds: (extent asRectangle);
}
