
{
    isa std Classlike;

    Instance :: Clonable
    {
        |
            extent             <- No,
            realWidth          <- 0,
            realHeight         <- 0,
            parentPresentation <- No,
            presentations,
        |

        {
            protected polymorphic <- $package;

            initWithMaybeExtent: _extent => (
                extent             <- _extent.
                presentations      <- std util newVector.
                realWidth          <- 0.
                realHeight         <- 0.
                parentPresentation <- No.
              ^ self
            );

            maybeExtent => extent;
            realExtent  => (polymorphic math geometry Point) X: realWidth Y: realHeight;

            parentPresentation: p => parentPresentation <- Yes: p;

            claimBounds: bounds => (
                | bottomRight <- bounds bottomRight |

                realWidth  <- realWidth  max: bottomRight x.
                realHeight <- realHeight max: bottomRight y.

              ^ self
            );

            add: presentation => (
                parentPresentation yes: [ :pp |
                    presentation parent: pp.
                ].
                claimBounds: presentation bounds.
                presentations add: presentation.
              ^ self
            );

            clear => (
                presentations do: [ :each | each noParent ].
                presentations clear.
                realWidth  <- 0.
                realHeight <- 0.
              ^ self
            );

            clearAndReset => (
                self clear.
                self extent <- No.
              ^ self
            );

            emitter => (polymorphic core stream Emitter) Paper: self;
            stream  => (polymorphic core stream Stream) Emitter: emitter;

            renderOn: renderer => (
                presentations do: [ :each | each renderOn: renderer ].
              ^ self
            );

            "For now, ignore viewport and just render everything."
            renderOn: renderer Viewport: viewport => renderOn: renderer;

            writeOn: w => w << 'a paper';
        }
    };

    Extent: extent => (Instance clone) initWithMaybeExtent: (Yes: extent);
    New            => (Instance clone) initWithMaybeExtent: No;
}
