
{
    isa std Classlike;

    Instance :: Clonable
    {
        |
            morph,
            bounds
        |

        {
            with inherited Presentation <- $package;

            initWithMorph: m Bounds: b => (
                morph  <- m.
                bounds <- b.
              ^ self
            );

            morphPresentation? => true;

            connectToParentNode: parentNode => (
                morph connectToParentNode: parentNode.
              ^ self
            );

            disconnectFromParentNode => (
                morph disconnect.
              ^ self
            );

            renderOn: renderer => (
                morph ensureNotDirty.
                renderer withPushedRelativeOffset: offset Do: [
                    (morph paper) renderOn: renderer.
                ].
              ^ self
            );

            writeOn: w => w << 'a morph presentation';
        }
    };

    Morph: morph Bounds: bounds => (Instance clone) initWithMorph: morph Bounds: bounds;
}
