
{
    isa std Classlike;

    Instance :: Clonable
    {
        |
            bounds,
            kernel,
            paper,

            protected dirty? <- true
        |

        {
            with inherited Presentation <- $package;

            bounds: b kernel: k => (
                bounds <- b.
                kernel <- k.
                paper  <- (polymorphic core paper Paper) Extent: (b extent).
              ^ self
            );

            morphPresentation? => true;

            protected ensureNotDirty => (
                dirty? -> [
                    kernel drawOnStream: (paper stream) Instance: self.
                    dirty? <- false.
                ].
              ^ self
            );

            renderOn: renderer => (
                ensureNotDirty.
                renderer withPushedRelativeOffset: offset Do: [
                    paper renderOn: renderer.
                ].
              ^ self
            );

            writeOn: w => w << 'a morph presentation';
        }
    };

    Kernel: kernel Bounds: bounds  => (Instance clone) bounds: bounds kernel: kernel;
}
