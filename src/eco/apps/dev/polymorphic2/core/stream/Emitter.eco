
{
    isa std Classlike;

    Instance :: Clonable
    {
        |
            paper,
            bounds
        |

        {
            protected polymorphic <- $package;

            paper: p bounds: b => (
                paper  <- p.
                bounds <- b.
              ^ self
            );

            graphicsForBounds: bounds => (polymorphic core stream Graphics) Emitter: self Bounds: bounds;
            streamAtX: x Y: y         => (polymorphic core stream Stream) Emitter: self X: x Y: y;
            streamAt: point           => (polymorphic core stream Stream) Emitter: self At: point;
            stream                    => (polymorphic core stream Stream) Emitter: self;

            emitDrawable: drawable In: bounds => (
                | presentation <- (polymorphic core paper presenting DrawablePresentation) Object: drawable Bounds: bounds |

                paper add: presentation.

              ^ self
            );

            emitMorph: kernel In: bounds => (
                "TODO: Lookup morph kernel in the paper cache"

                | presentation <- (polymorphic core objects presenting MorphPresentation) Kernel: kernel Bounds: bounds |

                paper add: presentation.

              ^ self
            );

            writeOn: w => w << 'an emitter';
        }
    };

    Paper: paper Bounds: bounds => (Instance clone) paper: paper bounds: bounds;
    Paper: paper                => Paper: paper Bounds: (paper bounds);
}
