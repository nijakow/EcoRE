
{
    isa std Classlike;

    protected polymorphic <- $package;

    Instance :: Clonable
    {
        |
            paper,
            origin,
            maybeContext,
            maybeExtent,
        |

        {
            protected polymorphic <- $package;

            paper: p Origin: o MaybeExtent: e MaybeContext: c => (
                paper        <- p.
                origin       <- o.
                maybeContext <- c.
                maybeExtent  <- e.
              ^ self
            );

            context => maybeContext yes;

            extent => maybeExtent yes;
            bounds => (polymorphic math geometry Rectangle) Origin: origin Extent: extent;

            emitDrawable: drawable In: bounds => (
                | presentation <- (polymorphic core paper presenting DrawablePresentation) Object: drawable Bounds: bounds |

                paper add: presentation.

              ^ self
            );

            emitDrawable: drawable At: offset => (
                | presentation <- (polymorphic core paper presenting DrawablePresentation) Object: drawable Offset: offset |

                paper add: presentation.

              ^ self
            );

            emitMorph: kernel In: bounds => (
                |
                    boundsInfo <- ((polymorphic core morph) BoundsInfo)
                                        Bounds: (((polymorphic math geometry) Rectangle)
                                                    X: 0
                                                    Y: 0
                                                    W: (bounds w)
                                                    H: (bounds h))
                                        Offset: (bounds origin)
                |
              ^ emitMorph: kernel BoundsInfo: boundsInfo
            );

            emitMorph: kernel BoundsInfo: boundsInfo => (
                (paper lookupKernel: kernel) yes: [ :morph |
                    morph changeBounds: boundsInfo.

                    |
                        presentation <- ((polymorphic core paper) presenting MorphPresentation) Morph: morph
                    |

                    (morph paper) resize: (boundsInfo extent).

                    paper addOld: presentation.
                ] no: [
                    |
                        morph        <- kernel instantiateInBoundsInfo: boundsInfo,
                        presentation <- ((polymorphic core paper) presenting MorphPresentation) Morph: morph
                    |

                    (morph paper) resize: (boundsInfo extent).

                    paper add: presentation.
                ].
              ^ self
            );

            claimBounds: bounds => (
                paper claimBounds: (bounds translateBy: origin).
              ^ self
            );

            writeOn: w => w << 'an emitter';
        }
    };

    Paper: paper Origin: origin MaybeExtent: extent MaybeContext: context => (Instance clone) paper: paper Origin: origin MaybeExtent: extent MaybeContext: context;

    Paper: paper Origin: origin MaybeExtent: extent => Paper: paper Origin: origin MaybeExtent: extent MaybeContext: No;
    Paper: paper Origin: origin Extent: extent      => Paper: paper Origin: origin MaybeExtent: (Yes: extent);
    Paper: paper Origin: origin                     => Paper: paper Origin: origin MaybeExtent: (paper maybeExtent);
    Paper: paper                                    => Paper: paper Origin: ((polymorphic math geometry Point) Origin);

    Paper: paper MaybeContext: context => Paper: paper Origin: ((polymorphic math geometry Point) Origin) MaybeExtent: (paper maybeExtent) MaybeContext: context;
}
