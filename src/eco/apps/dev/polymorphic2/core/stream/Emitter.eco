
{
    isa std Classlike;

    protected polymorphic <- $package;

    Instance :: Clonable
    {
        |
            paper,
            origin,
            maybeExtent
        |

        {
            protected polymorphic <- $package;

            paper: p origin: o maybeExtent: e => (
                paper       <- p.
                origin      <- o.
                maybeExtent <- e.
              ^ self
            );

            extent => maybeExtent yes;
            bounds => (polymorphic math geometry Rectangle) Origin: origin Extent: extent;

            emitDrawable: drawable In: bounds => (
                | presentation <- (polymorphic core paper presenting DrawablePresentation) Object: drawable Bounds: bounds |

                paper add: presentation.

              ^ self
            );

            emitMorph: kernel In: bounds Paper: morphPaper => (
                "TODO: Lookup morph kernel in the paper cache"

                | presentation <- (polymorphic core paper presenting MorphPresentation) Kernel: kernel Bounds: bounds Paper: morphPaper |

                paper add: presentation.

              ^ self
            );

            emitMorph: kernel In: bounds => emitMorph: kernel In: bounds Paper: ((polymorphic core paper Paper) New);

            writeOn: w => w << 'an emitter';
        }
    };

    Paper: paper Origin: origin MaybeExtent: extent => (Instance clone) paper: paper origin: origin maybeExtent: extent;
    Paper: paper Origin: origin Extent: extent      => Paper: paper Origin: origin MaybeExtent: (Yes: extent);
    Paper: paper Origin: origin                     => Paper: paper Origin: origin MaybeExtent: (paper maybeExtent);
    Paper: paper                                    => Paper: paper Origin: ((polymorphic math geometry Point) Origin);
}
