
{
    isa std Classlike;

    Instance :: Clonable
    {
        |
            emitter,
            bounds
        |

        {
            protected polymorphic <- $package;

            emitter: e bounds: b => (
                emitter <- e.
                bounds <- b.
              ^ self
            );

            protected boundsForOffset: offset => (
              ^ (polymorphic math geometry Rectangle)
                    X: offset x + bounds x
                    Y: offset y + bounds y
                    W: bounds w
                    H: bounds h
            );

            at: offset PutDrawable: drawable => (
                emitter emitDrawable: drawable In: (boundsForOffset: offset).
              ^ self
            );

            at: offset PutMorph: morph => (
                emitter emitMorph: morph In: (boundsForOffset: offset).
              ^ self
            );

            at: offset put: object => object emitOnGraphics: self At: offset;
            in: bounds put: object => object emitOnGraphics: self In: bounds;

            writeOn: w => w << 'a graphics stream';
        }
    };

    Emitter: emitter Bounds: bounds => (Instance clone) emitter: emitter bounds: bounds;
}
