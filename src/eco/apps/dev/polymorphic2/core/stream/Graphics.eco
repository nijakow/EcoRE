
{
    isa std Classlike;

    Instance :: Clonable
    {
        |
            emitter,
            origin,
            maybeExtent
        |

        {
            protected polymorphic <- $package;

            emitter: e Origin: o MaybeExtent: me => (
                emitter     <- e.
                origin      <- o.
                maybeExtent <- me.
                me yes: [ :extent |
                    emitter claimBounds: ((polymorphic math geometry Rectangle) Origin: origin Extent: extent).
                ].
              ^ self
            );

            maybeBounds => (
                maybeExtent yes: [ :extent |
                  ^ Yes: ((polymorphic math geometry) Rectangle) Origin: origin Extent: extent
                ].
              ^ No
            );

            bounds => (polymorphic math geometry Rectangle) Origin: origin Extent: (maybeExtent yes);

            protected boundsForOffset: offset Drawable: drawable => (
              ^ (polymorphic math geometry Rectangle)
                    X: origin x + offset x
                    Y: origin y + offset y
                    W: drawable bounds w
                    H: drawable bounds h
            );

            protected boundsForOffset: offset Morph: kernel Paper: paper => (
              ^ (polymorphic math geometry Rectangle)
                    X: origin x + offset x
                    Y: origin y + offset y
                    W: paper realWidth
                    H: paper realHeight
            );

            at: offset PutDrawable: drawable => (
                emitter emitDrawable: drawable In: (boundsForOffset: offset Drawable: drawable).
              ^ self
            );

            at: offset PutMorph: morph => (
                | paper <- morph drawOnEmptyPaper |
                emitter emitMorph: morph In: (boundsForOffset: offset Morph: morph Paper: paper).
              ^ self
            );

            in: bounds PutDrawable: drawable => (
                emitter emitDrawable: drawable In: bounds.
              ^ self
            );

            in: bounds PutMorph: morph => (
                emitter emitMorph: morph In: bounds.
              ^ self
            );

            at: offset put: object => object emitOnGraphics: self At: offset;
            in: bounds put: object => object emitOnGraphics: self In: bounds;

            writeOn: w => w << 'a graphics stream';
        }
    };

    Emitter: emitter Origin: origin MaybeExtent: extent => (Instance clone) emitter: emitter Origin: origin MaybeExtent: extent;
    Emitter: emitter Origin: origin Extent: extent      => Emitter: emitter Origin: origin MaybeExtent: (Yes: extent);
    Emitter: emitter Origin: origin                     => Emitter: emitter Origin: origin MaybeExtent: No;
    Emitter: emitter Bounds: bounds                     => Emitter: emitter Origin: (bounds origin) Extent: (bounds extent);
    Emitter: emitter                                    => Emitter: emitter Origin: (emitter origin) MaybeExtent: (emitter maybeExtent);
}
