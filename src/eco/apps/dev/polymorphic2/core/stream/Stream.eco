{
    isa std Classlike;

    Instance :: Clonable
    {
        |
            emitter,

            xOffset <- 0,
            yOffset <- 0,

            nextLineDelta <- 0
        |

        {
            protected polymorphic <- $package;

            emitter: e x: x y: y => (
                emitter <- e.
                xOffset <- x.
                yOffset <- y.
              ^ self
            );

            protected cursor => (polymorphic math geometry Point) X: xOffset Y: yOffset;
            protected bounds => emitter bounds;

            protected graphicsWithOrigin: origin MaybeExtent: extent => emitter graphicsWithOrigin: origin MaybeExtent: extent;
            protected graphicsInBounds: bounds                       => emitter graphicsForBounds: bounds;
            
            protected graphicsExtent: extent => (
                | currentCursor <- cursor |
                reserveExtent: extent.
              ^ graphicsInBounds: (currentCursor extent: extent)
            );

            protected reserveExtentX: x Y: y => (
                xOffset <- xOffset + x.
                nextLineDelta <- nextLineDelta max: y.
              ^ self
            );

            protected reserveExtent: extent => reserveExtentX: (extent x) Y: (extent y);

            withGraphicsDo: block => block value(graphicsWithOrigin: (emitter origin) MaybeExtent: (emitter maybeExtent));
            withGraphicsInBounds: bounds Do: block => block value(graphicsInBounds: bounds);
            withRoom: extent ForGraphicsDo: block  => block value(graphicsExtent: extent);

            "TODO: Outputting objects via the '<<' operator"

            "TODO: Outputting objects at a specific position using 'emit:at:'"

            emitDrawable: object => (
                |
                    objectBounds  <- object bounds,
                    currentX      <- xOffset,
                    currentY      <- yOffset
                |
                reserveExtentX: (objectBounds w) Y: (objectBounds h).
                emitter emitDrawable: object In: ((polymorphic math geometry Rectangle) X: (currentX - objectBounds x) Y: (currentY - objectBounds y) W: (objectBounds w) H: (objectBounds h)).
              ^ self
            );

            emitMorphKernel: kernel => (
                |
                    paper           <- kernel drawOnEmptyPaper,
                    objectMinWidth  <- paper realWidth,
                    objectMinHeight <- paper realHeight,
                    currentX        <- xOffset,
                    currentY        <- yOffset,
                    bounds          <- (polymorphic math geometry Rectangle) X: (currentX) Y: (currentY) W: (objectMinWidth) H: (objectMinHeight)
                |
                reserveExtentX: objectMinWidth Y: objectMinHeight.
                emitter emitMorph: kernel In: bounds Paper: paper.
              ^ self
            );

            emit: object => object emitOnStream: self;

            "TODO: Outputting objects without adjusting their position"

            newline => (
                xOffset <- emitter origin x.
                yOffset <- yOffset + nextLineDelta.
                nextLineDelta <- 0.
              ^ self
            );

            commit => self;
        }
    };

    Emitter: emitter X: x Y: y => (Instance clone) emitter: emitter x: x y: y;
    Emitter: emitter At: point => Emitter: emitter X: (point x) Y: (point y);
    Emitter: emitter           => Emitter: emitter X: (emitter origin x) Y: (emitter origin y);
}
