
{
    isa std Classlike;

    Instance :: Clonable
    {
        |
            parent     <- No,
            maybeMorph <- No
        |

        {
            with inherited Node <- $package;

            initWithMorph: m => (
                parent     <- No.
                maybeMorph <- Yes: m.
              ^ self
            );

            morph => maybeMorph yes;

            world => (parent) yes: [ :p | ^ p world ] no: [ ^ No ];

            reparent: p => (
                parent <- Yes: p.
              ^ self
            );

            disconnect => (
                parent <- No.
              ^ self
            );

            childrenDo: block => (
                morph childrenDo: block.
              ^ self
            );

            writeOn: w => (
                w << 'a morph node'.
                parent yes: [ :p |
                    w << ' (parent is ' << p << ')'.
                ].
            );
        }
    };

    Morph: morph => (Instance clone) initWithMorph: morph;
}
