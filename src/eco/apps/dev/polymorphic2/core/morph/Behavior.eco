
{
    isa std Classlike;

    Instance :: Clonable
    {
        |
            presenter,
            dispatcher,
            name <- 'a morph',
            caching? <- true,
            blessing? <- false,
            animated? <- false,
            dispatch? <- true,
            disposeFunction <- No,
            minBoundsFunction,
        |
        
        {
            protected polymorphic <- $package;

            init => (
                presenter  <- ((polymorphic core morph) behavior presenting) DefaultPresenter.
                dispatcher <- (((polymorphic core event) handling) Dispatcher) New.
                caching?   <- true.
                blessing?  <- false.
                animated?  <- false.
                dispatch?  <- true.
                disposeFunction <- No.
                minBoundsFunction <- $[ :kernel | ((kernel behavior) presenter) minBoundsOfKernel: kernel ].
              ^ self
            );

            name: n => name <- n;
            caching: c => caching? <- c;
            blessing: b => blessing? <- b;
            animated: a => animated? <- a;
            dispatch: d => dispatch? <- d;
            disposeFunction: f => disposeFunction <- Yes: f;
            minBoundsFunction: f => minBoundsFunction <- f;

            presenter: p => presenter <- p;

            linkWithState: state => ((polymorphic core morph) Kernel) Behavior: self State: state;

            link: payload => linkWithState: (((polymorphic core morph) State) Payload: payload);
            link          => linkWithState: (((polymorphic core morph) State) New);

            writeOn: w => w << 'a morph behavior';
        }
    };

    New => Instance new;
}
