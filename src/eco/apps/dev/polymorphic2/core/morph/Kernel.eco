
{
    isa std Classlike;

    Instance :: Clonable
    {
        |
            behavior,
            state
        |
        
        {
            protected polymorphic <- $package;

            initWithBehavior: b State: s => (
                behavior <- b.
                state <- s.
              ^ self
            );

            emitOnStream: stream                => stream emitMorphKernel: self;
            emitOnGraphics: graphics At: offset => graphics at: offset PutMorph: self;
            emitOnGraphics: graphics In: bounds => graphics in: bounds PutMorph: self;

            minWidth  => (behavior presenter) minWidthOfKernel: self;
            minHeight => (behavior presenter) minHeightOfKernel: self;
            minExtent => ((polymorphic math geometry) Point) X: minWidth Y: minHeight;
            minExtentForOrientation: orientation => (
                (orientation horizontal?) -> [ ^ minWidth  ].
                (orientation vertical?)   -> [ ^ minHeight ].
              ^ std sys error ThrowMessage: 'Unknown orientation!'
            );

            layoutForOrientation: orientation => ((polymorphic core morph) behavior layouting) ShrinkWrap;

            drawOnStream: stream                    => ( (behavior presenter) drawOn: stream Kernel: self. ^ self );
            drawOnStream: stream Instance: instance => drawOnStream: stream;

            drawOnPaper: paper => drawOnStream: (paper stream);

            drawOnEmptyPaper => (
                | paper <- (polymorphic core paper Paper) New |

                drawOnPaper: paper.

              ^ paper
            );

            writeOn: w => w << 'a morph kernel';
        }
    };

    Behavior: behavior State: state => (Instance clone) initWithBehavior: behavior State: state;
}
