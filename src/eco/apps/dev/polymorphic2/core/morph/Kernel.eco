
{
    isa std Classlike;

    Instance :: Clonable
    {
        |
            behavior,
            state,
            protected morphs,
            protected cachedMinExtent
        |
        
        {
            protected polymorphic <- $package;

            initWithBehavior: b State: s => (
                behavior        <- b.
                state           <- s.
                morphs          <- std util newVector.
                cachedMinExtent <- No.
              ^ self
            );

            emitOnStream: stream                => stream emitMorphKernel: self;
            emitOnGraphics: graphics At: offset => graphics at: offset PutMorph: self;
            emitOnGraphics: graphics In: bounds => graphics in: bounds PutMorph: self;

            protected calcMinWidth  => (behavior presenter) minWidthOfKernel: self;
            protected calcMinHeight => (behavior presenter) minHeightOfKernel: self;

            protected maybeSaveMinExtent => (
                (behavior caching?) if: [
                    cachedMinExtent <- Yes: (((polymorphic math geometry) Point)
                                                X: calcMinWidth
                                                Y: calcMinHeight).
                ].
              ^ self
            );

            minWidth => (
                cachedMinExtent  no: [ maybeSaveMinExtent ].
                cachedMinExtent yes: [ :cm | ^ cm x ].
              ^ calcMinWidth
            );
            minHeight => (
                cachedMinExtent  no: [ maybeSaveMinExtent ].
                cachedMinExtent yes: [ :cm | ^ cm y ].
              ^ calcMinHeight
            );
            minExtent => (
                cachedMinExtent  no: [ maybeSaveMinExtent ].
                cachedMinExtent yes: [ :cm | ^ cm ].
              ^ ((polymorphic math geometry) Point) X: calcMinWidth Y: calcMinHeight.
            );
            minExtentForOrientation: orientation => (
                (orientation horizontal?) -> [ ^ minWidth  ].
                (orientation vertical?)   -> [ ^ minHeight ].
              ^ std sys error ThrowMessage: 'Unknown orientation!'
            );

            layoutForOrientation: orientation => ((polymorphic core morph) behavior layouting) ShrinkWrap;

            drawOnStream: stream                    => ( (behavior presenter) drawOn: stream Kernel: self. ^ self );
            drawOnStream: stream Instance: instance => drawOnStream: stream;

            drawOnPaper: paper => drawOnStream: (paper stream);

            drawOnEmptyPaper => (
                | paper <- (polymorphic core paper Paper) New |

                drawOnPaper: paper.

              ^ paper
            );

            instantiateInBounds: bounds WithPaper: paper => ((polymorphic core morph) Morph) Kernel: self Bounds: bounds Paper: paper;
            instantiateInBounds: bounds                  => ((polymorphic core morph) Morph) Kernel: self Bounds: bounds;

            addMorph: morph => (
                morphs add: morph.
              ^ self
            );

            removeMorph: morph => (
                morphs remove: morph.
              ^ self
            );

            clearCaches => (
                cachedMinExtent <- No.
              ^ self
            );

            changed => (
                clearCaches.
                morphs do: [ :each |
                    each kernelChangeCallback.
                ].
              ^ self
            );

            writeOn: w => w << 'a morph kernel';
        }
    };

    Behavior: behavior State: state => (Instance clone) initWithBehavior: behavior State: state;
}
