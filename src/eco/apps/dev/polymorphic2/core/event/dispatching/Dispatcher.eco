
{
    isa std Classlike;

    Instance :: Clonable
    {
        |
            driver,
        |

        {
            protected polymorphic <- $package;

            initWithDriver: d => (
                driver <- d.
              ^ self
            );

            protected dispatch: event AtX: x Y: y Morph: morph Stopper: stopper => (
                (std io out << ' - Dispatching event ' << event << ' at ' << x << ' ' << y << ' on ' << morph) newline commit.

                |
                    behavior <- (morph kernel) behavior,
                    context  <- ((polymorphic core event) dispatching Context)
                                    Morph: morph
                                        X: x
                                        Y: y
                |

                |
                    result <- (behavior dispatcher)
                                   handle: event
                                  context: context
                |

                (result shouldStop?) -> [ stopper value ].

                morph childrenDo: [ :each |
                    beginDispatch: event AtX: x Y: y Morph: each Stopper: stopper.
                ].

              ^ self
            );

            protected beginDispatch: event AtX: x Y: y Morph: morph Stopper: stopper => (
                (std io out << ' - CHECKING: Dispatching event ' << event << ' at ' << x << ' ' << y << ' on ' << morph << ' with bounds ' << (morph bounds)) newline commit.
                ((morph bounds) containsX: x Y: y) -> [
                    dispatch: event
                         AtX: x - (morph boundsInfo offset) x
                           Y: y - (morph boundsInfo offset) y
                       Morph: morph
                     Stopper: stopper
                ].
              ^ self
            );

            dispatch: event AtX: x Y: y => (
                | stopper <- [ ^ self ] |
                (driver rootPaper) morphsDo: [ :each |
                    beginDispatch: event AtX: x Y: y Morph: each Stopper: stopper.
                ].
              ^ self
            );

            dropMorph: morph Hand: hand => (
                |
                    event <- (polymorphic event events) DropMorph: morph
                |

                dispatch: event AtX: ((hand position) x) Y: ((hand position) y).

              ^ self
            );

            mouseMovedToX: x Y: y => (
              ^ self
            );

            mouseClickedAtX: x Y: y Click: click => (
                |
                    event <- (polymorphic event events) MouseClick: click Hand: ((driver session) handMorph)
                |

                (std io out << 'Mouse clicked! ' << x << ' ' << y) newline commit.

                dispatch: event AtX: x Y: y.

              ^ self
            );

            mouseReleasedAtX: x Y: y Click: click => (
                "TODO"
              ^ self
            );

            keyPressedAtX: x Y: y Key: key => (
                (std io out << 'Key pressed!') newline commit.
              ^ self
            );

            keyReleasedAtX: x Y: y Key: key => (
                (std io out << 'Key released!') newline commit.
              ^ self
            );

            writeOn: w => w << 'an event dispatcher';
        }
    };

    Driver: driver => (Instance clone) initWithDriver: driver;
}
