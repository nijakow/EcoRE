
{
    isa std Classlike;

    Instance :: Clonable
    {
        |
            driver,
        |

        {
            initWithDriver: d => (
                driver <- d.
              ^ self
            );

            protected dispatch: event AtX: x Y: y Morph: morph Stopper: stopper => (
              ^ self
            );

            protected beginDispatch: event AtX: x Y: y Morph: morph Stopper: stopper => (
              ^ dispatch: event
                     AtX: (morph origin) x
                       Y: (morph origin) y
                   Morph: morph
                 Stopper: stopper
            );

            dispatch: event AtX: x Y: y => (
                | stopper <- [ ^ self ] |
                (driver rootPaper) morphsDo: [ :each |
                    beginDispatch: event AtX: x Y: y Morph: each Stopper: stopper.
                ].
              ^ self
            );

            mouseMovedToX: x Y: y => (
                (std io out << 'Mouse moved to ' << x << ' ' << y) newline commit.
              ^ self
            );

            mouseClickedAtX: x Y: y Click: click => (
                (std io out << 'Mouse clicked!') newline commit.
              ^ self
            );

            keyPressedAtX: x Y: y Key: key => (
                (std io out << 'Key pressed!') newline commit.
              ^ self
            );

            keyReleasedAtX: x Y: y Key: key => (
                (std io out << 'Key released!') newline commit.
              ^ self
            );

            writeOn: w => w << 'an event dispatcher';
        }
    };

    Driver: driver => (Instance clone) initWithDriver: driver;
}
