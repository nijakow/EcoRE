
{
    isa std Classlike;

    Instance :: std Clonable
    {
        |
            world,
            rootPaper,
            rootMorph,
        |

        {
            protected polymorphic <- $package;

            initWithWorld: w => (
                world     <- w.
                rootPaper <- ((polymorphic core paper) Paper) Extent: ((polymorphic math geometry) Point X: 400 Y: 400).
                rootMorph <- ((polymorphic morphs) repo TestMorph4) link.

                rootPaper node: (world node).
                (world node) paper: rootPaper.

              ^ self
            );

            initWithoutWorld => initWithWorld: (((polymorphic core world) World) New);

            mouseMovedToX: cx Y: cy => (
              ^ self
            );

            mouseScrolledByX: dx Y: dy => (
              ^ self
            );

            keyPressed: key => (
              ^ self
            );

            keyReleased: key => (
              ^ self
            );

            tick => (
                "Do nothing..."
              ^ self
            );

            run => (
                (rootPaper stream) emit: rootMorph.
              ^ self
            );

            writeOn: w => w << 'a polymorphic driver';
        }
    };

    World: world => (Instance clone) initWithWorld: world;
    New          => (Instance clone) initWithoutWorld;
}
