
{
    isa std Classlike;

    Instance :: std Clonable
    {
        |
            world,
            rootPaper,
            rootMorph
        |

        {
            protected polymorphic <- $package;

            initWithWorld: w => (
                world     <- w.
                rootPaper <- ((polymorphic core paper) Paper) Extent: ((polymorphic math geometry) Point X: 400 Y: 400).
                rootMorph <- ((polymorphic morphs) repo TestMorph4) link.
              ^ self
            );

            initWithoutWorld => initWithWorld: (((polymorphic core world) World) New);

            run => (
                |
                    paper  <- rootPaper,
                    stream <- paper stream,
                |

                paper node: (world node).

                stream emit: rootMorph.
            );

            writeOn: w => w << 'a polymorphic driver';
        }
    };

    World: world => (Instance clone) initWithWorld: world;
    New          => (Instance clone) initWithoutWorld;
}
