
{
    isa std Classlike;

    Instance :: std Clonable
    {
        |
            world,
            rootPaper,
            rootMorph,
            dispatcher,

            cachedMouseX <- 0,
            cachedMouseY <- 0,
        |

        {
            protected polymorphic <- $package;

            initWithWorld: w => (
                world      <- w.
                rootPaper  <- ((polymorphic core paper) Paper) Extent: ((polymorphic math geometry) Point X: 400 Y: 400).
                rootMorph  <- ((polymorphic morphs) repo TestMorph4) link.
                dispatcher <- ((polymorphic core event) dispatching Dispatcher) New;

                rootPaper node: (world node).
                (world node) paper: rootPaper.

              ^ self
            );

            initWithoutWorld => initWithWorld: (((polymorphic core world) World) New);

            mouseMovedToX: x Y: y => (
                cachedMouseX <- x,
                cachedMouseY <- y.

                dispatcher
                    mouseMovedToX: x
                                Y: y.
                
              ^ self
            );

            mouseClicked: click => (
                dispatcher
                    mouseClickedAtX: cachedMouseX
                                  Y: cachedMouseY
                              Click: click.
              ^ self
            );

            mouseScrolledByX: dx Y: dy => (
              ^ self
            );

            keyPressed: key => (
                dispatcher
                    keyPressedAtX: cachedMouseX
                                Y: cachedMouseY
                              Key: key.
              ^ self
            );

            keyReleased: key => (
                dispatcher
                    keyReleasedAtX: cachedMouseX
                                 Y: cachedMouseY
                               Key: key.
              ^ self
            );

            tick => (
                "Do nothing..."
              ^ self
            );

            run => (
                (rootPaper stream) emit: rootMorph.
              ^ self
            );

            writeOn: w => w << 'a polymorphic driver';
        }
    };

    World: world => (Instance clone) initWithWorld: world;
    New          => (Instance clone) initWithoutWorld;
}
