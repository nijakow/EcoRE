
{
    isa std Classlike;

    Instance :: Clonable
    {
        |
            baseColor,
            backgroundColor,
            mainAccentColor,
            lineColor,
            textColor,
            inverseTextColor,
            transparentAttentionColor,
            transparentBackgroundColor,
            transparentMainAccentColor,
        |

        {
            protected color <- $package;

            init => (
                baseColor:        ((color) R: 0 G:  42 B:  47).
                backgroundColor:  ((color) R: 0 G:  42 B:  47).
                mainAccentColor:  ((color) R: 0 G: 120 B: 136).
                lineColor:        ((color) R: 0 G: 120 B: 136).
                textColor:        ((color) R: 0 G: 182 B: 203).
                inverseTextColor: ((color) R: 0 G: 182 B: 203).
                transparentAttentionColor: ((color) R: 0 G: 182 B: 203 A: 64).
                transparentBackgroundColor: ((color) R: 0 G:  42 B:  47 A: 64).
                transparentMainAccentColor: ((color) R: 0 G: 120 B: 136 A: 64).

                "baseColor:        ((color) R: 240 G: 240 B: 240).
                backgroundColor:  ((color) R: 240 G: 240 B: 240).
                mainAccentColor:  ((color) R:  64 G:  64 B:  64).
                lineColor:        ((color) R:  16 G:  16 B:  16).
                textColor:        ((color) R:  16 G:  16 B:  16).
                inverseTextColor: ((color) R: 192 G: 192 B: 192).

                transparentAttentionColor: ((color) R: 0 G: 182 B: 203 A: 16)."

              ^ self
            );

            desktopColor           => baseColor;
            windowColor            => mainAccentColor;
            transparentWindowColor => transparentMainAccentColor;  "TODO: Remove this!"
            windowBackgroundColor  => transparentWindowColor;

            baseColor:        c => baseColor <- c;
            backgroundColor:  c => backgroundColor <- c;
            mainAccentColor:  c => mainAccentColor <- c;
            lineColor:        c => lineColor <- c;
            textColor:        c => textColor <- c;
            inverseTextColor: c => inverseTextColor <- c;

            transparentAttentionColor:  c => transparentAttentionColor  <- c;
            transparentBackgroundColor: c => transparentBackgroundColor <- c;
            transparentMainAccentColor: c => transparentMainAccentColor <- c;

            writeOn: w => w << 'a polymorphic color theme';
        }
    };

    New => Instance new;
}
