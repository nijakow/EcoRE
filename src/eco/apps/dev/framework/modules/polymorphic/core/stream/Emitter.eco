
{
    isa std Classlike;

    protected polymorphic <- $package;

    Instance :: Clonable
    {
        |
            paper,
        |

        {
            protected polymorphic <- $package;

            initWithPaper: p => (
                paper <- p.
              ^ self
            );

            maybeContext => paper maybeContext;
            maybeBounds  => paper maybeFixedBounds;
            maybeExtent  => maybeBounds yes: [ :bounds | Yes: bounds extent ] no: [ No ];

            context => maybeContext yes;
            extent  => maybeExtent  yes;
            bounds  => maybeBounds  yes;

            emitDrawable: drawable In: bounds => (
                | presentation <- (polymorphic core paper presenting DrawablePresentation) Object: drawable Bounds: bounds |

                paper add: presentation.

              ^ self
            );

            emitDrawable: drawable At: offset => (
                | presentation <- (polymorphic core paper presenting DrawablePresentation) Object: drawable Offset: offset |

                paper add: presentation.

              ^ self
            );

            emitMorph: kernel In: bounds => (
                |
                    placement <- ((polymorphic core morph) Placement)
                                        Bounds: (((polymorphic math geometry) Rectangle)
                                                    X: 0
                                                    Y: 0
                                                    W: (bounds w)
                                                    H: (bounds h))
                                        Offset: (bounds origin)
                |
              ^ emitMorph: kernel Placement: placement
            );

            emitMorph: kernel Placement: placement => (
                (paper lookupKernel: kernel) yes: [ :morph |
                    morph changeBounds: placement.

                    |
                        presentation <- ((polymorphic core paper) presenting MorphPresentation) Morph: morph
                    |

                    (morph paper) changeFixedBounds: (placement bounds).

                    paper addOld: presentation.
                ] no: [
                    |
                        morph        <- kernel instantiateWithPlacement: placement MaybeContext: maybeContext,
                        presentation <- ((polymorphic core paper) presenting MorphPresentation) Morph: morph
                    |

                    (morph paper) changeFixedBounds: (placement bounds).

                    paper add: presentation.
                ].
              ^ self
            );

            claimBounds: bounds => (
                paper claimBounds: bounds.
              ^ self
            );

            writeOn: w => w << 'an emitter';
        }
    };

    Paper: paper => (Instance clone) initWithPaper: paper;
}
