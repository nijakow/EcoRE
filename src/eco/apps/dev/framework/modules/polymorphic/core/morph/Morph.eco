
{
    isa std Classlike;

    Instance :: Clonable
    {
        |
            placement,
            kernel,
            paper,

            node
        |

        {
            protected polymorphic <- $package;

            initWithKernel: k Placement: pl Paper: p MaybeContext: c => (
                kernel     <- k.
                placement  <- pl.
                paper      <- p.
                node       <- (((polymorphic core morph) tree nodes) MorphNode) Morph: self.

                paper node: node. "Set the paper's node to a MorphNode pointing to us..."
                c yes: [ :con | paper context: con ]. 

              ^ self
            );

            initWithKernel: kernel Placement: placement                       => initWithKernel: kernel Placement: placement Paper: ((polymorphic core paper Paper) New) MaybeContext: No;
            initWithKernel: kernel Placement: placement MaybeContext: context => initWithKernel: kernel Placement: placement Paper: ((polymorphic core paper Paper) New) MaybeContext: context;

            name => kernel name;

            bounds => placement translatedBounds;
            origin => bounds origin;

            iAmDirty => (
                world yes: [ :w | w iAmDirty: self ].
              ^ self
            );

            protected executeChanged => (
                world yes: [ :w | w iHaveChanged: self ].
              ^ self
            );

            kernelChangedContentCallback => (
                executeChanged.
              ^ self
            );

            kernelChangedPlacementCallback => (
                parentMorph yes: [ :p | p aChildChanged ].
              ^ self
            );

            kernelChangeCallback => (
                kernelChangedContentCallback.
                kernelChangedPlacementCallback.
              ^ self
            );

            changed => (
                kernel changed.
              ^ self
            );

            aChildChanged => (
                kernel clearCaches.
                executeChanged.
              ^ self
            );

            kernelDisposeCallback => (
                parentMorph yes: [ :p |
                    (p kernel) disposeChild: (self kernel).
                ].
              ^ self
            );

            changeBounds: newBounds => (
                (((newBounds extent) equalsPoint: (bounds extent)) not) if: [
                    "paper clearAndReset."
                    paper changeFixedBounds: (newBounds bounds).
                    iAmDirty.
                ].
                placement <- newBounds.
              ^ self
            );

            protected enterWorld: world => (
                world addMorph: self.
                kernel addMorph: self.
                iAmDirty.
              ^ self
            );

            protected exitWorld: world => (
                kernel removeMorph: self.
                world removeMorph: self.
              ^ self
            );

            connectToParentNode: parentNode => (
                node reparent: parentNode.
                world yes: [ :w | enterWorld: w ].
              ^ self
            );

            disconnectFromParentNode => (
                paper destroy. "Destroy the paper, so that all children are purged."
                world yes: [ :w | exitWorld: w ].
                node disconnect.
              ^ self
            );

            enable => (
              ^ self
            );

            disable => (
              ^ self
            );

            parent      => node parent;
            parentMorph => parent yes: [ :p | p maybeMorph ];

            world => node world;

            childrenDo: block => (
                paper morphsDo: block.
              ^ self
            );

            childrenReverseDo: block => (
                paper morphsReverseDo: block.
              ^ self
            );

            protected internalRedraw => (
                kernel drawOnStream: (paper stream) Instance: self.
              ^ self
            );

            redrawInPlace => (
                paper clear.
                internalRedraw.
              ^ self
            );
            redrawFreely => (
                | b <- paper realBounds |
                
                paper clear.
                internalRedraw.

                "If the size of the paper has changed, we need to forward the change to the parent presentation."
                "(((paper realBounds) equalsRectangle: b) not) -> ["
                    parentMorph yes: [ :p |
                        p aChildChanged.
                    ].
                "]."
              ^ self
            );

            renderAtOffset: offset On: renderer => (
                renderer withPushedRelativeOffset: offset Do: [
                    paper renderOn: renderer.
                ].
              ^ self
            );

            tick? => kernel tick?;
            tick => (
                ((kernel behavior) animated?) -> [ kernel changed ].
              ^ self
            );
            
            writeOn: w => w << name;
        }
    };

    Kernel: kernel Placement: placement Paper: paper          => (Instance clone) initWithKernel: kernel Placement: placement Paper: paper;
    Kernel: kernel Placement: placement MaybeContext: context => (Instance clone) initWithKernel: kernel Placement: placement MaybeContext: context;
}
