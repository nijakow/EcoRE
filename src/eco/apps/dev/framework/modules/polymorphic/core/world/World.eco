
{
    isa std Classlike;

    Instance :: std Clonable
    {
        |
            node,
            morphs,
            morphsToRedraw,
            morphsToTick,
        |

        {
            protected polymorphic <- $package;

            init => (
                node           <- (((polymorphic core morph) tree nodes) WorldNode) World: self.
                morphs         <- std util newVector.
                morphsToRedraw <- std util newVector.
                morphsToTick   <- std util newVector.
              ^ self
            );

            addMorph: morph => (
                morphs add: morph. "TODO, FIXME, XXX: Add only if not present!"
                (morph tick?) if: [
                    morphsToTick add: morph.
                ].
              ^ self
            );

            removeMorph: morph => (
                morphs remove: morph.
                morphsToRedraw remove: morph.
                morphsToTick remove: morph.
              ^ self
            );

            iAmDirty: morph => (
                morph redrawInPlace.
              ^ self
            );

            iHaveChanged: morph => (
                morphsToRedraw add: morph.
              ^ self
            );

            tickAll => (
                |
                    tickingMorphs <- std util newVector
                |

                morphsToTick into: tickingMorphs.

                tickingMorphs do: [ :morph | morph tick ].

                [ (morphsToRedraw empty?) not ] while: [
                    | morph <- morphsToRedraw removeFirst |
                    morph redrawFreely.
                ].

              ^ self
            );

            writeOn: w => w << 'a polymorphic world';
        }
    };

    New => Instance new;
}
