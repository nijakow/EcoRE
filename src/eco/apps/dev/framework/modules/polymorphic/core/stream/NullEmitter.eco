
{
    isa std Classlike;

    protected polymorphic <- $package;

    Instance :: Clonable
    {
        |
            minX,
            minY,
            maxX,
            maxY,
        |

        {
            protected polymorphic <- $package;

            init => (
                minX <- 0.
                minY <- 0.
                maxX <- 0.
                maxY <- 0.
              ^ self
            );

            maybeContext => Yes: (polymorphic DefaultRenderingContext);
            maybeBounds  => No;
            maybeExtent  => No;

            context => maybeContext yes;
            extent  => maybeExtent  yes;
            bounds  => maybeBounds  yes;


            emitDrawable: drawable In: bounds => (
                | presentation <- ((polymorphic core paper) presenting DrawablePresentation) Object: drawable Bounds: bounds |

                addAndClaim: presentation.

              ^ self
            );

            emitDrawable: drawable At: offset => (
                | presentation <- ((polymorphic core paper) presenting DrawablePresentation) Object: drawable Offset: offset |

                addAndClaim: presentation.

              ^ self
            );

            emitMorph: kernel In: bounds => (
                |
                    placement <- ((polymorphic core morph) Placement)
                                        Bounds: (((polymorphic math geometry) Rectangle)
                                                    X: 0
                                                    Y: 0
                                                    W: (bounds w)
                                                    H: (bounds h))
                                        Offset: (bounds origin)
                |
              ^ emitMorph: kernel Placement: placement
            );

            emitMorph: kernel Placement: placement => (
                |
                    morph        <- kernel instantiateWithPlacement: placement MaybeContext: maybeContext,
                    presentation <- ((polymorphic core paper) presenting MorphPresentation) Morph: morph
                |

                addAndClaim: presentation.

              ^ self
            );

            claimBounds: bounds => (
                |
                    topLeft     <- bounds origin,
                    bottomRight <- bounds corner
                |

                minX <- minX min: topLeft x.
                minY <- minY min: topLeft y.

                maxX <- maxX max: bottomRight x.
                maxY <- maxY max: bottomRight y.

              ^ self
            );

            protected addAndClaim: presentation => (
                claimBounds: (presentation bounds).
              ^ self
            );

            realBounds => (polymorphic math geometry) Rectangle
                                X: minX
                                Y: minY
                                W: maxX - minX
                                H: maxY - minY;

            writeOn: w => w << 'a null emitter';
        }
    };

    New => (Instance new);
}
