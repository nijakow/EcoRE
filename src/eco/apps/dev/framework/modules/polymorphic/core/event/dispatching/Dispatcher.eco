
{
    isa std Classlike;

    Instance :: Clonable
    {
        |
            driver,
        |

        {
            protected polymorphic <- $package;

            initWithDriver: d => (
                driver <- d.
              ^ self
            );

            protected dispatch: event AtX: x Y: y Morph: morph Stopper: stopper => (
                "(std io out << ' - Dispatching event ' << event << ' at ' << x << ' ' << y << ' on ' << morph) newline commit."

                morph childrenReverseDo: [ :each |
                    beginDispatch: event AtX: x Y: y Morph: each Stopper: stopper.
                ].

                |
                    behavior <- (morph kernel) behavior,
                    context  <- ((polymorphic core event) dispatching Context)
                                    Morph: morph
                                        X: x
                                        Y: y
                |

                |
                    result <- (behavior dispatcher)
                                   handle: event
                                  context: context
                |

                (result shouldStop?) -> [ stopper value ].

              ^ self
            );

            protected beginDispatch: event AtX: x Y: y Morph: morph Stopper: stopper => (
                "(std io out << ' - CHECKING: Dispatching event ' << event << ' at ' << x << ' ' << y << ' on ' << morph << ' with bounds ' << (morph bounds)) newline commit."
                
                |
                    placement <- morph placement,
                    tx        <- x - ((placement offset) x),
                    ty        <- y - ((placement offset) y)
                |

                ((placement bounds) containsX: tx Y: ty) -> [
                    (((morph kernel) behavior) dispatch?) -> [
                        dispatch: event
                            AtX: tx
                              Y: ty
                          Morph: morph
                        Stopper: stopper
                    ].
                ].
              ^ self
            );

            protected beginXRayAtX: x Y: y Morph: morph Do: block => (
                |
                    placement <- morph placement,
                    tx        <- x - ((placement offset) x),
                    ty        <- y - ((placement offset) y)
                |

                ((placement bounds) containsX: tx Y: ty) -> [
                    (((morph kernel) behavior) dispatch?) -> [
                        block value(morph).
                        morph childrenDo: [ :each |
                            beginXRayAtX: tx Y: ty Morph: each Do: block.
                        ].
                    ].
                ].

              ^ self
            );

            protected xRayAtX: x Y: y Do: block => (
                (driver rootPaper) morphsDo: [ :each |
                    beginXRayAtX: x Y: y Morph: each Do: block.
                ].
              ^ self
            );

            dispatch: event AtX: x Y: y => (
                | stopper <- [ ^ self ] |
                (driver rootPaper) morphsDo: [ :each |
                    beginDispatch: event AtX: x Y: y Morph: each Stopper: stopper.
                ].
              ^ self
            );

            dropMorph: morph Hand: hand Displacement: displacement => (
                |
                    event <- (polymorphic event events) DropMorph: morph Displacement: displacement
                |

                dispatch: event AtX: ((hand position) x) Y: ((hand position) y).

              ^ self
            );

            mouseMovedToX: x Y: y => (
                |
                    morphsUnder <- std util newVector,
                |

                xRayAtX: x Y: y Do: [ :each |
                    morphsUnder add: each.
                ].

                ((driver session) hand)
                    updateMorphsUnder: morphsUnder.

              ^ self
            );

            mouseClickedAtX: x Y: y Click: click => (
                |
                    event <- (polymorphic event events) MouseClick: click Hand: ((driver session) handMorph)
                |

                dispatch: event AtX: x Y: y.

              ^ self
            );

            mouseReleasedAtX: x Y: y Click: click => (
                "TODO"
              ^ self
            );

            keyPressedAtX: x Y: y Key: key => (
                (std io out << 'Key pressed!') newline commit.
              ^ self
            );

            keyReleasedAtX: x Y: y Key: key => (
                (std io out << 'Key released!') newline commit.
              ^ self
            );

            writeOn: w => w << 'an event dispatcher';
        }
    };

    Driver: driver => (Instance clone) initWithDriver: driver;
}
