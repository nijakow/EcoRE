
{
    isa std Classlike;

    Instance :: Clonable
    {
        |
            behavior,
            state,
            xLayout,
            yLayout,
            protected morphs,
            protected cachedMinBounds,
        |
        
        {
            protected polymorphic <- $package;
            protected layouting => (polymorphic core morph) behavior layouting;

            initWithBehavior: b State: s => (
                behavior        <- b.
                state           <- s.
                morphs          <- std util newVector.
                cachedMinBounds <- No.
                xLayout         <- (layouting) layouts ShrinkWrap.
                yLayout         <- (layouting) layouts ShrinkWrap.
                (behavior blessing?) -> [ state bless: self ].
              ^ self
            );

            name    => behavior name;
            payload => state payload;

            instancesDo: aBlock => (
                morphs do: aBlock.
              ^ self
            );

            emitOnStream: stream                => stream emitMorphKernel: self;
            emitOnGraphics: graphics At: offset => graphics at: offset PutMorph: self;
            emitOnGraphics: graphics In: bounds => graphics in: bounds PutMorph: self;

            protected calcMinBounds => (behavior minBoundsFunction) value(self);

            protected maybeSaveMinBounds => (
                (behavior caching?) if: [
                    cachedMinBounds <- Yes: calcMinBounds.
                ].
              ^ self
            );

            minBounds => (
                cachedMinBounds  no: [ maybeSaveMinBounds ].
                cachedMinBounds yes: [ :cm | ^ cm ].
              ^ calcMinBounds
            );
            minWidth  => minBounds w;
            minHeight => minBounds h;
            minExtent => minBounds extent;
            minExtentForOrientation: orientation => (
                (orientation horizontal?) -> [ ^ minWidth  ].
                (orientation vertical?)   -> [ ^ minHeight ].
              ^ std sys error ThrowMessage: 'Unknown orientation!'
            );

            minPositiveWidth  => (minBounds corner) x;
            minPositiveHeight => (minBounds corner) y;
            minPositiveExtent => (minBounds corner);
            minPositiveExtentForOrientation: orientation => (
                (orientation horizontal?) -> [ ^ minPositiveWidth  ].
                (orientation vertical?)   -> [ ^ minPositiveHeight ].
              ^ std sys error ThrowMessage: 'Unknown orientation!'
            );

            layoutForOrientation: orientation => (
                (orientation horizontal?) -> [ ^ xLayout ].
                (orientation vertical?)   -> [ ^ yLayout ].
              ^ std sys error ThrowMessage: 'Unknown orientation!'
            );
            xLayout: layout => xLayout <- layout;
            yLayout: layout => yLayout <- layout;
            xLayoutFlexible! => xLayout: (layouting) layouts Flexible;
            yLayoutFlexible! => yLayout: (layouting) layouts Flexible;
            flexibleLayout!  => xLayoutFlexible! ~ yLayoutFlexible!;
            xLayoutShrinkWrap! => xLayout: (layouting) layouts ShrinkWrap;
            yLayoutShrinkWrap! => yLayout: (layouting) layouts ShrinkWrap;
            shinkWrapLayout!   => xLayoutShrinkWrap! ~ yLayoutShrinkWrap!;

            drawOnStream: stream                    => ( (behavior presenter) drawOn: stream Kernel: self. ^ self );
            drawOnStream: stream Instance: instance => drawOnStream: stream;

            drawOnPaper: paper => drawOnStream: (paper stream);

            drawOnEmptyPaper => (
                | paper <- (polymorphic core paper Paper) New |

                drawOnPaper: paper.

              ^ paper
            );

            instantiateWithPlacement: placement Paper: paper               => ((polymorphic core morph) Morph) Kernel: self Placement: placement Paper: paper;
            instantiateWithPlacement: placement MaybeContext: maybeContext => ((polymorphic core morph) Morph) Kernel: self Placement: placement MaybeContext: maybeContext;

            offsetBy: offset => ((polymorphic core morph) Placement) Bounds: minBounds Offset: offset;

            addMorph: morph => (
                morphs add: morph.
              ^ self
            );

            removeMorph: morph => (
                morphs remove: morph.
              ^ self
            );

            clearCaches => (
                cachedMinBounds <- No.
              ^ self
            );

            changedContent => (
                clearCaches.
                morphs do: [ :each | each kernelChangedContentCallback ].
              ^ self
            );

            changedPlacement => (
                morphs do: [ :each | each kernelChangedPlacementCallback ].
              ^ self
            );

            changed => (
                clearCaches.
                morphs do: [ :each | each kernelChangeCallback ].
              ^ self
            );

            dispose => (
                morphs do: [ :each | each kernelDisposeCallback ].
              ^ self
            );

            disposeChild: child => (
                (behavior disposeFunction) yes: [ :df |
                    df value(self, child).
                ].
              ^ self
            );

            add: kernel => (
                | event <- (polymorphic event events) AddMorph: kernel | 
                (behavior dispatcher) handle: event context: self.
              ^ self
            );

            writeOn: w => w << 'a morph kernel';
        }
    };

    Behavior: behavior State: state => (Instance clone) initWithBehavior: behavior State: state;
}
