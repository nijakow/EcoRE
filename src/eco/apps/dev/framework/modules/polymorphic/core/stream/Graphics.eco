
{
    isa std Classlike;

    Instance :: Clonable
    {
        |
            emitter,
            origin,
            maybeBounds,
            maybeExtent,
        |

        {
            protected polymorphic <- $package;

            emitter: e Origin: o MaybeBounds: mb => (
                emitter     <- e.
                origin      <- o.
                maybeBounds <- mb.
                maybeExtent <- No.
                mb yes: [ :bounds |
                    maybeExtent <- Yes: bounds corner.
                    emitter claimBounds: (bounds translateBy: origin).
                ] no: [
                    maybeExtent <- No.
                ].
              ^ self
            );

            maybeContext => emitter maybeContext;
            context      => emitter context;

            bounds => maybeBounds yes;

            protected boundsForOffset: offset Drawable: drawable => (
              ^ (polymorphic math geometry Rectangle)
                    X: origin x + offset x
                    Y: origin y + offset y
                    W: drawable bounds w
                    H: drawable bounds h
            );

            protected boundsForOffset: offset Morph: kernel Paper: paper => (
              ^ (polymorphic math geometry Rectangle)
                    X: origin x + offset x
                    Y: origin y + offset y
                    W: paper realWidth
                    H: paper realHeight
            );

            at: offset PutDrawable: drawable => (
                emitter emitDrawable: drawable In: (boundsForOffset: offset Drawable: drawable).
              ^ self
            );

            at: offset PutMorph: morph => (
                emitter emitMorph: morph Placement: (morph offsetBy: (origin + offset)).
              ^ self
            );

            in: bounds PutDrawable: drawable => (
                emitter emitDrawable: drawable In: bounds.
              ^ self
            );

            in: bounds PutMorph: morph => (
                emitter emitMorph: morph In: bounds.
              ^ self
            );

            at: offset put: object => object emitOnGraphics: self At: offset;
            in: bounds put: object => object emitOnGraphics: self In: bounds;

            atOriginPut: object                    => at: ((polymorphic math geometry) Point Origin) put: object;
            atX: x Y: y Put: object                => at: ((polymorphic math geometry) Point X: x Y: y) put: object;
            inX: x Y: y W: w H: h Put: object      => in: ((polymorphic math geometry) Rectangle X: x Y: y W: w H: h) put: object;
            inX: x Y: y Extent: extent Put: object => in: ((polymorphic math geometry) Rectangle X: x Y: y Extent: extent) put: object;
            fullScreenPut: object                  => maybeBounds yes: [ :bounds | in: bounds put: object ] no: [ atOriginPut: object ];

            writeOn: w => w << 'a graphics stream';
        }
    };

    Emitter: emitter Origin: origin MaybeBounds: maybeBounds => (Instance clone) emitter: emitter Origin: origin MaybeBounds: maybeBounds;
}
