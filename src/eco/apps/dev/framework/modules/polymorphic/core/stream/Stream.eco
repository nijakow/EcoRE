{
    isa std Classlike;

    Instance :: Clonable
    {
        |
            emitter,

            xOffset <- 0,
            yOffset <- 0,

            nextLineDelta <- 0,
            protected minNextLineDelta <- 0,

            protected maybeLineInfo <- No,
        |

        {
            protected polymorphic <- $package;

            emitter: e x: x y: y => (
                emitter          <- e.
                xOffset          <- x.
                yOffset          <- y.
                nextLineDelta    <- 0,
                minNextLineDelta <- ((polymorphic gfx eve) DefaultFont) height.
                maybeLineInfo    <- No.
              ^ self
            );

            lineInfo => (
                maybeLineInfo no: [
                    |
                        li <- ((polymorphic core stream) meta LineInfo) New
                    |
                    li lineHeight: (minNextLineDelta max: nextLineDelta).
                    maybeLineInfo <- (Yes: li).
                ].
              ^ maybeLineInfo yes
            );

            cursor => (polymorphic math geometry Point) X: xOffset Y: yOffset;

            protected bounds => emitter bounds;

            maybeContext => emitter maybeContext;
            context      => emitter context;

            maybeBounds => emitter maybeBounds;
            maybeExtent => emitter maybeExtent;

            protected graphicsWithOrigin: origin MaybeBounds: maybeBounds => ((polymorphic core stream) Graphics) Emitter: emitter Origin: origin MaybeBounds: maybeBounds;
            protected graphicsWithOrigin: origin Bounds: bounds           => graphicsWithOrigin: origin MaybeBounds: (Yes: bounds);
            protected graphicsInMaybeBounds: maybeBounds                  => graphicsWithOrigin: ((polymorphic math geometry) Point Origin) MaybeBounds: maybeBounds;
            protected graphicsInBounds: bounds                            => graphicsInMaybeBounds: (Yes: bounds);
            
            protected graphicsExtent: extent => (
                | currentCursor <- cursor |
                reserveExtent: extent.
              ^ graphicsWithOrigin: currentCursor Bounds: (((polymorphic math geometry) Rectangle) Extent: extent)
            );

            protected reserveExtentX: x Y: y => (
                xOffset       <- xOffset + x.
                nextLineDelta <- nextLineDelta max: y.
                maybeLineInfo yes: [ :li |
                    li lineHeight: nextLineDelta.
                ].
              ^ self
            );

            protected reserveExtent: extent => reserveExtentX: (extent x) Y: (extent y);

            withGraphicsDo: block => block value(graphicsInMaybeBounds: (emitter maybeBounds));
            withGraphicsInBounds: bounds Do: block => block value(graphicsWithOrigin: (bounds origin) Bounds: ((polymorphic math geometry) Rectangle W: (bounds w) H: (bounds h)));
            withGraphicsAtX: x Y: y W: w H: h Do: block => block value(graphicsWithOrigin: ((polymorphic math geometry) Point X: x Y: y) Bounds: (((polymorphic math geometry) Rectangle) X: 0 Y: 0 W: w H: h));
            withRoom: extent ForGraphicsDo: block => block value(graphicsExtent: extent);

            emitDrawable: object => (
                |
                    objectBounds  <- object bounds,
                    currentX      <- xOffset,
                    currentY      <- yOffset
                |
                reserveExtentX: (objectBounds w) Y: (objectBounds h).
                emitter emitDrawable: object At: ((polymorphic math geometry Point) X: (currentX - objectBounds x) Y: (currentY - objectBounds y)).
              ^ self
            );

            emitMorphKernel: kernel => (
                |
                    objectMinBounds <- kernel minBounds,
                    currentX        <- xOffset,
                    currentY        <- yOffset,
                    displacement    <- ((polymorphic math geometry) Point)
                                            X: currentX - (objectMinBounds origin) x
                                            Y: currentY - (objectMinBounds origin) y
                |
                reserveExtentX: (objectMinBounds w) Y: (objectMinBounds h).
                emitter emitMorph: kernel Placement: (kernel offsetBy: displacement).
              ^ self
            );

            emit: object => object emitOnStream: self;

            << object => (
                | sw <- (std io StringWriter) new |

                sw << object.

                self emit: ((polymorphic core objects Text) Caption: (sw build) Color: ((context theme) textColor)).

              ^ self
            );

            protected flushLine => (
                nextLineDelta <- 0.
                maybeLineInfo <- No.
              ^ self
            );

            newline => (
                | delta <- nextLineDelta max: minNextLineDelta |
                xOffset <- 0. "TODO: Different start of line?"
                yOffset <- yOffset + delta.
                maybeLineInfo yes: [ :li |
                    li lineHeight: delta.
                ].
                flushLine.
              ^ self
            );

            commit => self;
        }
    };

    Emitter: emitter X: x Y: y => (Instance clone) emitter: emitter x: x y: y;
    Emitter: emitter At: point => Emitter: emitter X: (point x) Y: (point y);
    Emitter: emitter           => Emitter: emitter X: 0 Y: 0;
}
