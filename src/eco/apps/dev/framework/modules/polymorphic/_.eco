
std Module
{
    with app = $;

    core   :: (here / 'core'   / '_.eco') importIn: self;
    color  :: (here / 'color'  / '_.eco') importIn: self;
    event  :: (here / 'event'  / '_.eco') importIn: self;
    morphs :: (here / 'morphs' / '_.eco') importIn: self;


    DriverWrapperMorph :: (here / 'DriverWrapperMorph.eco') importIn: self;

    DefaultRenderingContext <- ((self) core RenderingContext) New;

    Test => (
        |
            driver <- ((core world) Driver) New
        |

        driver run.

        ((driver world) node) dumpOn: (std io out).

        (framework actions open) ui BuildAndOpen: [ :ui |
            ui Window(450, 450,
                ui Clipped(
                    (DriverWrapperMorph new) driver: driver
                )
            )
        ]
    );
}
