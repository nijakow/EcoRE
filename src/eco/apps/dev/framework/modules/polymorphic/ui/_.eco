
std Module
{
    protected polymorphic <- $package;

    Button :: Module {
        protected polymorphic <- $package;
        protected ui          <- $;

        Action: action Child:  child  => ((polymorphic morphs repo) core ButtonMorph) Action: action Child: child;
        Child:  child  Action: action => Action: action Child: child;

        Action: action Label: label => Action: action Child: (ui Framed(ui Margin: 5 Child: (ui Label: label)));

        Label: label Action: action => Action: action Label: label;
    };

    protected BuildFlex: flex Elements: elements => (
        elements do: [ :each | flex add: each ].
      ^ flex
    );

    Label: text => ((polymorphic morphs repo) core LabelMorph) Text: text;
    Label(text) => Label: text;

    Label: text Color: color => ((polymorphic morphs repo) core ColorLabelMorph) Text: text Color: color;

    HFlex(...) => BuildFlex: (((polymorphic morphs repo) core FlexMorph) Horizontal) Elements: (std util newArray(...));
    VFlex(...) => BuildFlex: (((polymorphic morphs repo) core FlexMorph) Vertical) Elements: (std util newArray(...));

    Margin: margin Child: child => ((polymorphic morphs repo) core MarginMorph) Margin: margin Child: child;

    Framed: child => ((polymorphic morphs repo) core FrameMorph) Child: child;
    Framed(child) => Framed: child;

    protected BuildStack: stack Elements: elements => (
        elements do: [ :each | stack add: each ].
      ^ stack
    );

    Stacked(...) => BuildStack: (((polymorphic morphs repo) core StackMorph) New) Elements: (std util newArray(...));

    DocumentEditor: document => (((polymorphic morphs repo) core) editing DocumentMorph) Document: document;
    DocumentEditor           => DocumentEditor: ((polymorphic app document) Document new);

    MiniWindowWithTitle: title Content: content => (((polymorphic morphs) repo system) Window) Title: title Child: content;
}
