
std Module
{
    EmitMorph <- ($package core) NewBehavior
                    ~ name: 'an emit morph'
                    ~ presenterFunction: $[ :stream :kernel | stream emit: ((kernel state) payload) ]
                    ~ build;
    
    FunctionEmitMorph <- ($package core) NewBehavior
                            ~ name: 'a function emit morph'
                            ~ presenterFunction: $[ :stream :kernel | ((kernel state) payload) value(stream, kernel) ]
                            ~ build;

    LabelMorph :: Module
    {
        protected polymorphic <- $package;

        Behavior <- ($package core) NewBehavior
                      ~ name: 'a label morph'
                      ~ presenterFunction: $[ :(polymorphic) :stream :kernel |
                            |
                                caption <- ((kernel state) payload),
                                color   <- ((stream context) theme) textColor,
                                text    <- ((polymorphic core objects) Text)
                                                Caption: caption
                                                  Color: color
                            |
                            stream emit: text.
                        ] bind($package)
                      ~ build;

        Text: text => Behavior link: text;
    };

    ColorLabelMorph :: Module
    {
        protected polymorphic <- $package;

        Behavior <- ($package core) NewBehavior
                      ~ name: 'a color label morph'
                      ~ presenterFunction: $[ :(polymorphic) :stream :kernel |
                            |
                                caption <- ((kernel state) payload) at: 0,
                                color   <- ((kernel state) payload) at: 1,
                                text    <- ((polymorphic core objects) Text)
                                                Caption: caption
                                                  Color: color
                            |
                            stream emit: text.
                        ] bind($package)
                      ~ build;

        Text: text Color: color => Behavior link: ((text & color) asArray);
    };

    FlexMorph :: Module
    {
        protected polymorphic <- $package;

        Behavior <- ($package core) NewBehavior
                      ~ name: 'a flex morph'
                      ~ on: (($package event) predicates AddMorph) do: $[ :kernel :event |
                            ((kernel state) payload) add: (event body).
                            kernel changed.
                        ]
                      ~ on: (($package event) predicates DropMorph) do: $[ :context :event |
                            | kernel <- context kernel, body <- event body, x <- context x, y <- context y |
                            
                            [ :break |
                                (context morph) childrenReverseDo: [ :each |
                                    ((each bounds) containsX: x Y: y) if: [
                                        ((kernel state) payload)
                                            insert: (body kernel)
                                            before: (each kernel).
                                        break value.
                                    ].
                                ].

                                ((kernel state) payload) add: (body kernel).
                            ] withBreak.

                            kernel changed.
                        ]
                      ~ disposeFunction: $[ :kernel :other |
                            ((kernel state) payload) remove: other.
                            kernel changed.
                        ]
                      ~ presenter:
                          {
                            isa std Singleton;
    
                            with inherited PresenterTrait <- (($package core morph) behavior presenting) PresenterTrait;
    
                            protected calculatePreferredExtentForMorph(morph, orientation, flexSize) => (
                                | layout <- morph layoutForOrientation: orientation |

                                (layout flexible?)   -> [ ^ flexSize ].
                                (layout shrinkWrap?) -> [ ^ morph minPositiveExtentForOrientation: orientation ].
    
                              ^ std sys error ThrowMessage: 'Unknown layout type'
                            );

                            protected calculatePreferredExtentForMorphMainAxis(morph, orientation, flexSize) => (
                                | layout <- morph layoutForOrientation: orientation |

                                (layout flexible?)   -> [ ^ (morph minPositiveExtentForOrientation: orientation) + flexSize ].
                                (layout shrinkWrap?) -> [ ^ (morph minPositiveExtentForOrientation: orientation)            ].
    
                              ^ std sys error ThrowMessage: 'Unknown layout type'
                            );

                            constrainedDrawOnGraphics: graphics Kernel: kernel Bounds: bounds => (
                                |
                                    orientation          <- ((kernel state) payload) orientation,
                                    morphs               <- ((kernel state) payload) morphs,
                                    mainAxisOrientation  <- orientation,
                                    crossAxisOrientation <- orientation opposite,
                                    mainAxisSize         <- 0,
                                    mainAxisExtraSize    <- 0,
                                    crossAxisSize        <- (bounds) dimensionForOrientation: crossAxisOrientation,
                                    flexCount            <- 0,
                                |

                                morphs do: [ :morph |
                                    |
                                        morphLayout <- morph layoutForOrientation: mainAxisOrientation,
                                    |

                                    (morphLayout flexible?) if: [
                                        mainAxisExtraSize <- mainAxisExtraSize + (morph minPositiveExtentForOrientation: mainAxisOrientation).
                                        flexCount         <- flexCount + 1.
                                    ].
                                    (morphLayout shrinkWrap?) if: [
                                        mainAxisSize <- mainAxisSize + (morph minPositiveExtentForOrientation: mainAxisOrientation).
                                    ].
                                ].

                                |
                                    offset    <- 0,
                                    flexSpace <- ((bounds corner) dimensionForOrientation: mainAxisOrientation) - (mainAxisSize + mainAxisExtraSize),
                                    flexSize  <- (flexCount == 0) if: [ 0 ] else: [ ((flexSpace asFloat) / (flexCount asFloat)) asInt ],
                                |

                                morphs do: [ :morph |
                                    |
                                        morphMainAxisExtent  <- calculatePreferredExtentForMorphMainAxis(morph, mainAxisOrientation, flexSize),
                                        morphCrossAxisExtent <- calculatePreferredExtentForMorph(morph, crossAxisOrientation, crossAxisSize),
                                        morphMinBounds       <- morph minBounds,
                                        morphMainSize        <- morphMainAxisExtent,
                                        morphCrossSize       <- morphCrossAxisExtent,
                                        morphBounds          <- ((polymorphic math geometry) Rectangle
                                                                    X: (mainAxisOrientation  selectX: offset Y: 0)
                                                                    Y: (crossAxisOrientation selectX: offset Y: 0)
                                                                    W: (mainAxisOrientation  selectX: morphMainSize Y: morphCrossSize)
                                                                    H: (crossAxisOrientation selectX: morphMainSize Y: morphCrossSize)),
                                    |

                                    graphics in: morphBounds put: morph.

                                    offset <- offset + morphMainAxisExtent.
                                ].

                              ^ self
                            );

                            freeDrawOnGraphics: graphics Kernel: kernel => (
                                |
                                    orientation          <- ((kernel state) payload) orientation,
                                    morphs               <- ((kernel state) payload) morphs,
                                    mainAxisOrientation  <- orientation,
                                    crossAxisOrientation <- orientation opposite,
                                    crossAxisSize        <- 0,
                                |

                                morphs do: [ :morph |
                                    crossAxisSize <- crossAxisSize max: (morph minPositiveExtentForOrientation: crossAxisOrientation).
                                ].

                                |
                                    offset <- 0,
                                |

                                morphs do: [ :morph |
                                    |
                                        morphMainAxisExtent  <- (morph minPositiveExtentForOrientation: mainAxisOrientation),
                                        morphCrossAxisExtent <- calculatePreferredExtentForMorph(morph, crossAxisOrientation, crossAxisSize),
                                        morphMinBounds       <- morph minBounds,
                                        morphMainSize        <- morphMainAxisExtent,
                                        morphCrossSize       <- morphCrossAxisExtent,
                                        morphBounds          <- ((polymorphic math geometry) Rectangle
                                                                    X: (mainAxisOrientation  selectX: offset Y: 0)
                                                                    Y: (crossAxisOrientation selectX: offset Y: 0)
                                                                    W: (mainAxisOrientation  selectX: morphMainSize Y: morphCrossSize)
                                                                    H: (crossAxisOrientation selectX: morphMainSize Y: morphCrossSize)),
                                    |

                                    graphics in: morphBounds put: morph.

                                    offset <- offset + morphMainAxisExtent.
                                ].

                              ^ self
                            );
    
                            drawOn: stream Kernel: kernel => (
                                "Use two different layout strategies: Constrained vs non-constrained."

                                stream withGraphicsDo: [ :graphics |
                                    (graphics maybeBounds)
                                        yes: [ :bounds | constrainedDrawOnGraphics: graphics Kernel: kernel Bounds: bounds ]
                                         no: [           freeDrawOnGraphics:        graphics Kernel: kernel                ].
                                ].

                              ^ self
                            );
    
                            writeOn: w => w << 'the flex presenter';
                          }
                      ~ build;
        
        Payload :: Classlike
        {
            Instance :: Clonable
            {
                |
                    orientation,
                    morphs,
                |

                {
                    protected polymorphic <- $package;

                    initWithOrientation: o => (
                        orientation <- o.
                        morphs      <- std util newVector.
                      ^ self
                    );

                    add:    morph => morphs add:    morph;
                    remove: morph => morphs remove: morph;

                    insert: morph before: other => morphs insert: morph before: other;
                    insert: morph after:  other => morphs insert: morph after:  other;
                }
            };

            Orientation: orientation => (Instance clone) initWithOrientation: orientation;
        };

        ForOrientation: orientation => (Behavior link: (Payload Orientation: orientation));

        Horizontal => ForOrientation: (polymorphic math geometry orientation) Horizontal;
        Vertical   => ForOrientation: (polymorphic math geometry orientation) Vertical;
    };

    MarginMorph :: Module
    {
        protected polymorphic <- $package;

        Behavior <- ($package core) NewBehavior
                      ~ name: 'a margin morph'
                      ~ presenter:
                          {
                            isa std Singleton;
    
                            with inherited PresenterTrait <- ($package core morph behavior presenting) PresenterTrait;
    
                            protected calculatePreferredExtentForMorph(morph, orientation, extentLimits, margin) => (
                                extentLimits no: [ ^ (morph minExtentForOrientation: orientation) ].
                                
                                | layout <- morph layoutForOrientation: orientation |
    
                                (layout flexible?)   -> [ ^ ((extentLimits yes) dimensionForOrientation: orientation) ].
                                (layout shrinkWrap?) -> [ ^ (morph minExtentForOrientation: orientation) ].
    
                              ^ std sys error ThrowMessage: 'Unknown layout type'
                            );

                            constrainedDrawOnStream: stream Kernel: kernel Morph: morph Bounds: bounds => (
                                |
                                    margin      <- ((kernel state) payload) margin,
                                    morphBounds <- bounds insetBy: margin,
                                |

                                stream withGraphicsDo: [ :graphics |
                                    graphics in: morphBounds put: morph.
                                ].

                              ^ self
                            );

                            freeDrawOnStream: stream Kernel: kernel Morph: morph => (
                                |
                                    margin         <- ((kernel state) payload) margin,
                                    morphMinBounds <- morph minBounds,
                                    morphBounds    <- (polymorphic math geometry) Rectangle
                                                        X: margin
                                                        Y: margin
                                                        W: morphMinBounds w
                                                        H: morphMinBounds h,
                                    ourExtent      <- (polymorphic math geometry) Point
                                                        X: morphBounds w + (margin * 2)
                                                        Y: morphBounds h + (margin * 2),
                                |

                                stream withRoom: ourExtent ForGraphicsDo: [ :graphics |
                                    graphics in: morphBounds put: morph.
                                ].

                              ^ self
                            );
    
                            drawOn: stream Kernel: kernel => (
                                (((kernel state) payload) child) yes: [ :morph |

                                    "Use two different layout strategies: Constrained vs non-constrained."

                                    (stream maybeBounds)
                                        yes: [ :bounds | constrainedDrawOnStream: stream Kernel: kernel Morph: morph Bounds: bounds ]
                                         no: [           freeDrawOnStream:        stream Kernel: kernel Morph: morph                ].

                                  ^ self
                                ].
                            );
    
                            writeOn: w => w << 'the margin presenter';
                          }
                      ~ build;
        
        Payload :: Classlike
        {
            Instance :: Clonable
            {
                |
                    margin <- 0,
                    child  <- No
                |

                {
                    protected polymorphic <- $package;

                    initWithMargin: m => (
                        margin <- m.
                        child  <- No.
                      ^ self
                    );

                    child: c => child <- Yes: c;
                }
            };

            Margin: margin => (Instance clone) initWithMargin: margin;
        };

        Margin: margin => (Behavior link: (Payload Margin: margin));
        Margin: margin Child: child => (Behavior link: (Payload Margin: margin ~ child: child));
    };


    FrameMorph :: Module
    {
        protected polymorphic <- $package;

        Behavior <- ($package core) NewBehavior
                      ~ name: 'a frame morph'
                      ~ presenterFunction: $[ :(polymorphic) :stream :kernel |
                            ((kernel state payload) child) yes: [ :child |
                                |
                                    bounds <- (stream maybeBounds) yes: [ :b | b ] no: [ child minBounds ],
                                |
                                stream withGraphicsDo: [ :graphics |
                                    |
                                        rect <- (polymorphic core objects) Rectangle
                                                    Bounds: bounds
                                                     Color: ((graphics context) theme) lineColor
                                    |
                                    graphics in: bounds put: child.
                                    graphics atOriginPut: rect.
                                ].
                            ].
                        ] bind($package)
                      ~ build;
        
        Payload :: Classlike
        {
            Instance :: Clonable
            {
                |
                    child <- No
                |

                {
                    protected polymorphic <- $package;

                    child: c => child <- Yes: c;
                }
            };

            New => Instance new;
        };

        New      => (Behavior link: (Payload New));
        Child: c => (
            | p <- Payload New |
            p child: c.
          ^ (Behavior link: p)
        );
    };

    StackMorph :: Module
    {
        protected polymorphic <- $package;

        Behavior <- ($package core) NewBehavior
                      ~ name: 'a stack morph'
                      ~ on: (($package event) predicates AddMorph) do: $[ :kernel :event |
                            ((kernel state) payload) add: (event body).
                            kernel changed.
                        ]
                      ~ presenter:
                          {
                            isa std Singleton;
    
                            with inherited PresenterTrait <- (($package core morph) behavior presenting) PresenterTrait;
    
                            protected calculatePreferredExtentForMorph(morph, orientation, extentLimits) => (
                                | layout <- morph layoutForOrientation: orientation |
    
                                (layout flexible?)   -> [ ^ ((extentLimits yes) dimensionForOrientation: orientation) ].
                                (layout shrinkWrap?) -> [ ^ (morph minExtentForOrientation: orientation) ].
    
                              ^ std sys error ThrowMessage: 'Unknown layout type'
                            );

                            protected calculatePreferredBoundsForMorph(morph, ourBounds) => (
                                | morphBounds <- morph minBounds |

                              ^ (polymorphic math geometry) Rectangle
                                    W: (((morph xLayout) flexible?) if: [ ourBounds ] else: [ morphBounds ] ~ corner x)
                                    H: (((morph yLayout) flexible?) if: [ ourBounds ] else: [ morphBounds ] ~ corner y)
                            );

                            freeDrawOnStream: stream Kernel: kernel => (
                                |
                                    morphs <- ((kernel state) payload) morphs,
                                    minX   <- 0,
                                    minY   <- 0,
                                    maxX   <- 0,
                                    maxY   <- 0,
                                |

                                morphs do: [ :morph |
                                    |
                                        morphMinBounds <- morph minBounds,
                                    |

                                    minX <- minX min: (morphMinBounds origin) x.
                                    minY <- minY min: (morphMinBounds origin) y.
                                    maxX <- maxX max: (morphMinBounds corner) x.
                                    maxY <- maxY max: (morphMinBounds corner) y.
                                ].

                                |
                                    ourBounds <- (polymorphic math geometry) Rectangle
                                                    X: minX
                                                    Y: minY
                                                    W: maxX - minX
                                                    H: maxY - minY
                                |

                                stream withGraphicsInBounds: ourBounds Do: [ :graphics |
                                    morphs do: [ :morph |
                                        | morphBounds <- calculatePreferredBoundsForMorph(morph, ourBounds) |
                                        graphics in: morphBounds put: morph.
                                    ].
                                ].

                              ^ self
                            );
    
                            drawOn: stream Kernel: kernel => (
                              ^ freeDrawOnStream: stream Kernel: kernel
                            );
    
                            writeOn: w => w << 'the stack presenter';
                          }
                      ~ build;
        
        Payload :: Classlike
        {
            Instance :: Clonable
            {
                |
                    morphs,
                |

                {
                    protected polymorphic <- $package;

                    init => (
                        morphs <- std util newVector.
                      ^ self
                    );

                    add:    morph => morphs add:    morph;
                    remove: morph => morphs remove: morph;
                }
            };

            New => Instance new;
        };

        New => (Behavior link: (Payload New));
    };


    ButtonMorph :: Module
    {
        protected polymorphic <- $package;

        Behavior <- ($package core) NewBehavior
                      ~ name: 'a button morph'
                      ~ presenterFunction: $[ :(polymorphic) :stream :kernel |
                            ((kernel state payload) child) yes: [ :child |
                                stream emit: child.
                            ].
                        ] bind($package)
                      ~ on: (($package event) predicates MouseClick) do: $[ :a :b |
                                (std io out << 'Clicked the button! ') newline commit.
                        ]
                      ~ build;
        
        Payload :: Classlike
        {
            Instance :: Clonable
            {
                |
                    child <- No
                |

                {
                    protected polymorphic <- $package;

                    child: c => child <- Yes: c;
                }
            };

            New => Instance new;
        };

        New      => (Behavior link: (Payload New));
        Child: c => (
            | p <- Payload New |
            p child: c.
          ^ (Behavior link: p)
        );
    };
}
