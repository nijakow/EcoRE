
std Module
{
    Behavior <- ($package core) NewBehavior
                    ~ name: 'a menu morph'
                    ~ presenterFunction: $[ :(polymorphic) :stream :kernel |
                        stream withGraphicsDo: [ :graphics |
                            graphics fullScreenPut: ((kernel payload) child).
                        ].
                    ] bind($package)
                    ~ on: (($package event) predicates MouseClick) do: $[ :(polymorphic) :context :event |
                        | hand <- ((event body) hand) payload |
                        hand tryGrab: (context kernel) Translation: ((polymorphic math geometry) Point X: ((context x) negate) Y: ((context y) negate)).
                        (context kernel) dispose. "TODO: Only dispose if the grab was successful."
                    ] bind($package)
                    ~ on: (($package event) predicates Key) do: $[ :(polymorphic) :context :event |
                              |
                                  payload <- ((context kernel) payload),
                                  key     <- (event body) key,
                              |

                              [ :break |
                                  key ifEscape: [ payload close. break value. ].
                                  "TODO: Ignore key and/or dispatch to the next morph."
                              ] withBreak.
                    ] bind($package)
                    ~ enableBlessing
                    ~ build;

    State :: Classlike {
        Instance :: Clonable
        {
            |
                maybeMorphKernel        <- No,
                child                   <- No,
            |

            {
                protected polymorphic <- $package;

                initWithChild: _child => (
                    maybeMorphKernel        <- No.
                    child                   <- Yes: _child.
                  ^ self
                );

                bless: kernel => maybeMorphKernel <- Yes: kernel;

                protected changed => (
                    maybeMorphKernel yes: [ :kernel | kernel changed ].
                  ^ self
                );

                close => (
                    maybeMorphKernel yes: [ :kernel | kernel dispose ].
                  ^ self
                );

                writeOn: w => w << 'a menu payload';
            }
        };

        Child: child => (Instance clone) initWithChild: child;
    };

    Child: child => Behavior link: (State Child: child);
}
