
std Module
{
    DocumentMorph :: Module
    {
        Behavior <- ($package core) NewBehavior
                        ~ name: 'a document morph'
                        ~ presenterFunction: $[ :(polymorphic) :stream :kernel |
                              |
                                  document      <- (kernel payload) document,
                                  caret         <- (kernel payload) caret,
                                  objectMorphs  <- (kernel payload) objectMorphs,
                                  offset        <- 0,
                                  caretPos      <- No,
                                  caretLineInfo <- No,
                              |

                              (document iterator) do: [ :item |
                                  [ :break |
                                      item ifNewline: [
                                          stream newline.
                                          break value.
                                      ].
                                      item ifCharacter: [
                                          stream << (item content).
                                          break value.
                                      ].
                                      item ifReference: [
                                          | m <- (objectMorphs at: (item content))
                                                    yes: [ :morph | morph ]
                                                     no: [ |
                                                                morph <- (polymorphic ui) Framed(
                                                                              (polymorphic ui) Button
                                                                                  Child: (
                                                                                      (polymorphic ui) Margin: 2 Child: (
                                                                                          ((polymorphic morphs repo) core WriteMorph)
                                                                                              link: (item content)
                                                                                      )
                                                                                  )
                                                                                  Action: $[]
                                                                          )
                                                            |

                                                            objectMorphs at: (item content) put: morph.

                                                            morph
                                                        ],
                                          |
                                          
                                          stream emit: m.
                                          break value.
                                      ].
                                  ] withBreak.

                                  (offset == caret offset) if: [
                                      caretPos      <- Yes: stream cursor.
                                      caretLineInfo <- Yes: stream lineInfo.
                                  ].

                                  offset <- offset + 1.
                              ].

                              caretPos yes: [ :pos |
                                  stream withGraphicsDo: [ :graphics |
                                      |
                                          lineHeight <- caretLineInfo yes: [ :li | li lineHeight ] no: [ 10 ],
                                          line       <- (polymorphic core objects) Line
                                                              End: ((polymorphic math geometry) Point X: 0 Y: lineHeight)
                                                            Color: (polymorphic color) colors Red
                                      |

                                      graphics at: pos put: line.
                                  ].
                              ].
                          ] bind($package)
                        ~ build;
        
        Payload :: std Classlike {
            Instance :: Clonable {
                |
                    document,
                    caret,
                    objectMorphs,
                |

                {
                    initWithDocument: _document => (
                        document     <- _document.
                        caret        <- _document newCaret.
                        objectMorphs <- std util newMap.
                      ^ self
                    );
                }
            };

            Document: document => (Instance clone) initWithDocument: document;
        };

        Document: document => (Behavior link: (Payload Document: document));
    };
}
