
std Module
{
    DocumentMorph :: Module
    {
        Behavior <- ($package core) NewBehavior
                        ~ name: 'a document morph'
                        ~ presenterFunction: $[ :(polymorphic) :stream :kernel |
                              |
                                  document      <- (kernel payload) document,
                                  caret         <- (kernel payload) caret,
                                  objectMorphs  <- (kernel payload) objectMorphs,
                                  offset        <- 0,
                                  caretPos      <- No,
                                  caretLineInfo <- No,
                              |

                              (document iterator) do: [ :item |
                                  (offset == caret offset) if: [
                                      caretPos      <- Yes: stream cursor.
                                      caretLineInfo <- Yes: stream lineInfo.
                                  ].

                                  [ :break |
                                      item ifNewline: [
                                          stream newline.
                                          break value.
                                      ].
                                      item ifCharacter: [
                                          stream << (item content).
                                          break value.
                                      ].
                                      item ifReference: [
                                          | m <- (objectMorphs at: (item content))
                                                    yes: [ :morph | morph ]
                                                     no: [ |
                                                                morph <- (polymorphic ui) Framed(
                                                                              (polymorphic ui) Button
                                                                                  Child: (
                                                                                      (polymorphic ui) Margin: 2 Child: (
                                                                                          ((polymorphic morphs repo) core WriteMorph)
                                                                                              link: (item content)
                                                                                      )
                                                                                  )
                                                                                  Action: $[]
                                                                          )
                                                            |

                                                            objectMorphs at: (item content) put: morph.

                                                            morph
                                                        ],
                                          |
                                          
                                          stream emit: m.
                                          break value.
                                      ].
                                  ] withBreak.

                                  offset <- offset + 1.
                              ].

                              "If the caret has not been placed yet, we assume it to be at the end of the document."
                              caretPos no: [
                                  caretPos      <- Yes: stream cursor.
                                  caretLineInfo <- Yes: stream lineInfo.
                              ].

                              caretPos yes: [ :pos |
                                  stream withGraphicsDo: [ :graphics |
                                      |
                                          lineHeight <- caretLineInfo yes: [ :li | li lineHeight ] no: [ 10 ],
                                          line       <- (polymorphic core objects) Line
                                                              End: ((polymorphic math geometry) Point X: 0 Y: lineHeight)
                                                            Color: (polymorphic color) colors Red
                                      |

                                      graphics at: pos put: line.
                                  ].
                              ].
                          ] bind($package)
                        ~ on: (($package event) predicates Key) do: $[ :(polymorphic) :context :event |
                              |
                                  payload <- ((context kernel) payload),
                                  caret   <- (payload caret),
                                  key     <- (event body) key,
                              |

                              [ :break |
                                  key ifLeft:  [ payload moveCaretToX: ((caret x) - 1) Y: (caret y). break value. ].
                                  key ifRight: [ payload moveCaretToX: ((caret x) + 1) Y: (caret y). break value. ].
                                  key ifUp:    [ payload moveCaretToX: (caret x) Y: ((caret y) - 1). break value. ].
                                  key ifDown:  [ payload moveCaretToX: (caret x) Y: ((caret y) + 1). break value. ].

                                  key ifEnter:     [ payload newline.   break value. ].
                                  key ifBackspace: [ payload backspace. break value. ].

                                  key ifHome:      [ payload moveCaretToX: 0      Y: (caret y). break value. ].
                                  key ifEnd:       [ payload moveCaretToX: 100000 Y: (caret y). break value. ].  "Ugh, this is nasty. But well, it works (for now)."

                                  key ifTab:       [ payload insertText: ' ' * (4 - ((caret x) mod: 4)). break value. ].

                                  (key keyText) yes: [ :text |
                                      payload insertText: text.
                                      break value.
                                  ].
                              ] withBreak.
                          ]
                        ~ on: (($package event) predicates DropMorph) do: $[ :context :event |
                              |
                                  kernel  <- context kernel,
                                  payload <- kernel payload,
                                  data    <- (event body) kernel,
                              |

                              payload insertObject: data.
                          ]
                        ~ enableBlessing
                        ~ build;
        
        Payload :: std Classlike {
            Instance :: Clonable {
                |
                    maybeMorph <- No,
                    document,
                    caret,
                    objectMorphs,
                    maybeLineCache <- No,
                |

                {
                    "Currently, the line cache and the LineInfo structure are not used."
                    LineInfo :: std Classlike {
                        Instance :: Clonable {
                            |
                                lineStart,
                                lineEnd,
                            |

                            {
                                initWithStart: start end: end => (
                                    lineStart <- start.
                                    lineEnd   <- end.
                                  ^ self
                                );

                                lineLength => (lineEnd - lineStart);
                            }
                        };

                        Start: start End: end => (Instance clone) initWithStart: start end: end;
                    };

                    initWithDocument: _document => (
                        maybeMorph     <- No.
                        document       <- _document.
                        caret          <- _document newCaret.
                        objectMorphs   <- std util newMap.
                        maybeLineCache <- No.
                      ^ self
                    );

                    bless: morph => maybeMorph <- Yes: morph;

                    protected lineCache => (
                        maybeLineCache no: [
                            |
                                lc     <- std util newArray,
                                offset <- 0,
                                last   <- 0,
                            |

                            (document iterator) do: [ :item |
                                item ifNewline: [
                                    lc add: (LineInfo Start: last End: offset).
                                    last <- offset + 1.
                                ].
                                offset <- offset + 1.
                            ].

                            (offset > last) if: [
                                lc add: (LineInfo Start: last End: offset).
                            ].

                            maybeLineCache <- Yes: lc.
                          ^ maybeLineCache
                        ].
                      ^ maybeLineCache
                    );

                    protected changed => (
                        maybeMorph yes: [ :morph | morph changed ].
                      ^ self
                    );

                    moveCaretToX: x Y: y => (
                        caret moveToX: x Y: y.
                        changed.
                      ^ self
                    );

                    newline => insertText: '\n';

                    backspace => (
                        caret backspace.
                        changed.
                      ^ self
                    );

                    insertText: text => (
                        caret insertText: text.
                        changed.
                      ^ self
                    );

                    insertObject: morph => (
                        caret insertReference: morph.
                        changed.
                      ^ self
                    );
                }
            };

            Document: document => (Instance clone) initWithDocument: document;
        };

        Document: document => (Behavior link: (Payload Document: document));
    };
}
