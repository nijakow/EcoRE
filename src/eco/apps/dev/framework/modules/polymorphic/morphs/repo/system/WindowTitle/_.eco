
std Module
{
    Behavior <- ($package core) NewBehavior
                    ~ name: 'a window title morph'
                    ~ presenterFunction: $[ :(polymorphic) :stream :kernel |
                        | 
                            e      <- (kernel payload) child,
                            bounds <- e minBounds,
                        |

                        stream withGraphicsDo: [ :graphics |
                            graphics atOriginPut: (((polymorphic core objects) FilledRectangle)
                                                       Bounds: bounds
                                                        Color: (((stream context) theme) windowBackgroundColor)).
                            graphics atOriginPut: (((polymorphic core objects) Line) Start: (bounds topLeft)  End: (bounds topRight)    Color: ((graphics context) theme lineColor)).
                            graphics atOriginPut: (((polymorphic core objects) Line) Start: (bounds topLeft)  End: (bounds bottomLeft)  Color: ((graphics context) theme lineColor)).
                            graphics atOriginPut: (((polymorphic core objects) Line) Start: (bounds topRight) End: (bounds bottomRight) Color: ((graphics context) theme lineColor)).
                        ].

                        stream emit: e.
                    ] bind($package)
                    ~ focusGainedFunction: $[ :kernel | ((kernel state) payload) gainFocus ]
                    ~ focusLostFunction:   $[ :kernel | ((kernel state) payload) loseFocus ]
                    ~ enableBlessing
                    ~ build;
    
    Payload :: Classlike
    {
        Instance :: Clonable
        {
            |
                maybeMorphKernel <- No,
                caption          <- '',
                expanded         <- false,
                child,
            |

            {
                protected polymorphic <- $package;

                initWithCaption: cap => (
                    caption  <- cap.
                    expanded <- false.
                    rebuild.
                  ^ self
                );

                bless: kernel => maybeMorphKernel <- Yes: kernel;

                protected contentChanged => (
                    maybeMorphKernel yes: [ :kernel |
                        kernel contentChanged.
                    ].
                    ^ self
                );

                protected rebuild => (
                    child <- (polymorphic ui) Margin: 5 Child: (
                                    (polymorphic ui) HFlex(
                                        (polymorphic ui) Margin: 5 Child: (
                                            (polymorphic ui) Label: caption
                                        )
                                    ) inject: [ :flex |
                                        (expanded) if: [
                                            flex add: (
                                                ((polymorphic ui) Button)
                                                    Action: $[ (std io out << 'Clicked the menu button!') newline commit ]
                                                    Child: (
                                                        (polymorphic ui) Margin: 5 Child: (
                                                            (polymorphic ui) Label: '(expanded button)'
                                                        )
                                                )
                                            )
                                        ]
                                    ]
                    ).
                    contentChanged.
                  ^ self
                );

                protected expanded: bool => (
                    expanded <- bool.
                    rebuild.
                  ^ self
                );

                gainFocus => expanded: true;
                loseFocus => expanded: false;

                writeOn: w => w << 'a window title payload';
            }
        };

        Caption: caption => (Instance clone) initWithCaption: caption;
    };

    Caption: caption => Behavior link: (Payload Caption: caption);
}
