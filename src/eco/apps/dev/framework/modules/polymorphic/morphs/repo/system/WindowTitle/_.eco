
std Module
{
    Behavior <- ($package core) NewBehavior
                    ~ name: 'a window title morph'
                    ~ presenterFunction: $[ :(polymorphic) :stream :kernel |
                        | e <- (polymorphic ui) Margin: 2 Child: (
                                    (polymorphic ui) Label: ((kernel payload) caption)
                                                     Color: (((stream context) theme) backgroundColor)
                          ),
                          bounds <- e minBounds,
                        |

                        stream withGraphicsDo: [ :graphics |
                            graphics atOriginPut: (((polymorphic core objects) FilledRectangle)
                                                       Bounds: bounds
                                                        Color: (((stream context) theme) windowColor))
                        ].

                        stream emit: e.
                    ] bind($package)
                    ~ build;
    
    Payload :: Classlike
    {
        Instance :: Clonable
        {
            |
                caption,
            |

            {
                initWithCaption: cap => (
                    caption <- cap.
                  ^ self
                );

                writeOn: w => w << 'a window title payload';
            }
        };

        Caption: caption => (Instance clone) initWithCaption: caption;
    };

    Caption: caption => Behavior link: (Payload Caption: caption);
}
