
std Module
{
    Behavior <- ($package core) NewBehavior
                    ~ name: 'a desktop morph'
                    ~ presenterFunction: $[ :(polymorphic) :stream :kernel |
                        stream withGraphicsDo: [ :graphics |
                            | extent <- (kernel payload) extent |
                            graphics atOriginPut:(((polymorphic core objects) FilledRectangle)
                                                            X: 0
                                                            Y: 0
                                                            W: (extent x)
                                                            H: (extent y)
                                                        Color: ((graphics context) theme) desktopColor).
                            ((kernel payload) windows) forEach: [ :window :offset |
                                graphics at: offset put: window.
                            ].
                        ].
                    ] bind($package)
                    ~ on: (($package event) predicates AddMorph) do: $[ :kernel :event |
                        ((kernel state) payload) openMorph: (event body).
                        kernel changed.
                    ]
                    ~ on: (($package event) predicates DropMorph) do: $[ :context :event |
                        | body <- event body |
                        ((context kernel) payload)
                            openMorph: (body morph)
                                  AtX: (context x) + ((body displacement) x)
                                    Y: (context y) + ((body displacement) y).
                        (context kernel) changed.
                    ]
                    ~ disposeFunction: $[ :kernel :other |
                        (((kernel state) payload) windows) erase: other.
                        kernel changed.
                    ]
                    ~ build;

    State :: Classlike {
        Instance :: Clonable
        {
            |
                maybeMorphKernel <- No,
                extent,
                windows,
            |

            {
                protected polymorphic <- $package;

                init => (
                    maybeMorphKernel <- No.
                    extent           <- (polymorphic math geometry) Point X: 0 Y: 0.
                    windows          <- std util newMap.
                  ^ self
                );

                bless: kernel => maybeMorphKernel <- Yes: kernel;

                protected changed => (
                    maybeMorphKernel yes: [ :kernel | kernel changed ].
                  ^ self
                );

                extent: e => (
                    extent <- e.
                    changed.
                  ^ self
                );

                openMorph: kernel => (
                    |
                        minBounds <- kernel minBounds,
                        newOffset <- (polymorphic math geometry) Point
                                        X: (extent x / 2) - (minBounds w / 2)
                                        Y: (extent y / 2) - (minBounds h / 2)
                    |
                    windows at: kernel put: newOffset.
                    changed.
                  ^ self
                );

                openMorph: kernel AtX: x Y: y => (
                    |
                        minBounds <- kernel minBounds,
                        newOffset <- (polymorphic math geometry) Point
                                        X: x
                                        Y: y
                    |
                    windows at: kernel put: newOffset.
                    changed.
                  ^ self
                );

                writeOn: w => w << 'a desktop';
            }
        };

        New => Instance new;
    };

    New => Behavior link: (State New);
}
