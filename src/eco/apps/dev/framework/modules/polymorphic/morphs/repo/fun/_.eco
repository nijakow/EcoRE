
std Module
{
    TestMorph <- ($package core) NewBehavior
                    ~ presenterFunction: $[ :(polymorphic) :stream :kernel |
                            stream emit: (((polymorphic core objects) Rectangle) X: 0 Y: 0 W: 64 H: 64)
                    ] bind($package)
                    ~ build;

    TestMorph2 <- ($package core) NewBehavior
                    ~ presenterFunction: $[ :(polymorphic) :stream :kernel |
                          stream
                              ~ << 'Look at me'
                              ~ newline
                              ~ << '  as I can fly!!!'.
                      ] bind($package)
                    ~ build;
    
    TestMorph3_Point <- ($package core) NewBehavior
                          ~ name: 'a point morph'
                          ~ presenterFunction: $[ :(polymorphic) :stream :kernel |
                                stream << 'Point!' ~ newline.
                                stream withGraphicsDo: [ :graphics |
                                    graphics at: ((polymorphic math geometry) Point Origin)
                                            put: (((polymorphic core objects) FilledCircle)
                                                        Radius: 3
                                                         Color: (((polymorphic color colors) Red))).
                                ].
                          ] bind($package)
                          ~ build;
    
    TestMorph3 <- ($package core) NewBehavior
                    ~ name: 'a sine wave morph'
                    ~ presenterFunction: $[ :(polymorphic) :stream :kernel |
                          |
                              state <- kernel payload,
                              count <- state pointCount,
                              delta <- #'ecosphere.ecore.time.since_start'() / 5.0
                          |
                          stream withGraphicsDo: [ :graphics |
                                0 to: (count - 1) do: [ :i |
                                    |
                                        v1  <- (((i / (10 asFloat)) + delta) * 3.14159 * 2) sin,
                                        v2  <- ((((i + 1) / (10 asFloat)) + delta) * 3.14159 * 2) sin,
                                        vp1 <- ((v1 negate * 50) + 50) asInt,
                                        vp2 <- ((v2 negate * 50) + 50) asInt,
                                        p   <- ((polymorphic math geometry) Point X: i * 25 Y: vp1)
                                    |
                                    graphics at: p put: (((polymorphic core objects) Line) End: ((polymorphic math geometry) Point X: 25 Y: (vp2 - vp1))).
                                    graphics at: p put: (state pointAt: i).
                                ]
                          ].
                      ] bind($package)
                    ~ minBoundsFunction: $[ :(polymorphic) :kernel | ((polymorphic math geometry) Rectangle W: 250 H: 100) ] bind($package)
                    ~ enableAnimation
                    ~ build;
    
    TestMorph3State :: Classlike {
        Instance :: Clonable {
            |
                pointList,
            |

            {
                protected polymorphic <- $package;

                initWithCount: count => (
                    pointList <- std util newVector.
                    1 to: count do: [ :each | pointList add: (((polymorphic morphs) repo fun) TestMorph3_Point) link ].

                    std io out << 'B: ' << ((((polymorphic morphs) repo fun) TestMorph3_Point) link minBounds) ~ newline commit.

                  ^ self
                );

                pointCount => pointList size;

                pointAt: index => pointList at: index;

                writeOn: w => w << 'a test morph state with ' << pointCount << ' points';
            }
        };

        Count: count => (Instance clone) initWithCount: count;
    };

    NewTestMorph3 => TestMorph3 link: (TestMorph3State Count: 10);
    
    TestMorph3_1 <- ($package core) NewBehavior
                      ~ name: 'an animated circle morph'
                      ~ presenterFunction: $[ :(polymorphic) :stream :kernel |
                            |
                                Point <- (polymorphic math geometry) Point,
                                PointMorph <- ((polymorphic morphs) repo fun) TestMorph3_Point
                            |

                            | n <- 4, r <- 50, delta <- #'ecosphere.ecore.time.since_start'() |

                            stream withRoom: ((polymorphic math geometry) Point X: r * 2 Y: r * 2) ForGraphicsDo: [ :graphics |
                                1 to: n do: [ :i |
                                    |
                                        d <- (((i / (n asFloat)) + delta) * 3.14159 * 2),
                                        x <- (d sin * r) asInt,
                                        y <- (d cos * r) asInt,
                                    |

                                    graphics at: (Point X: x Y: y)
                                            put: (PointMorph link).
                                ].
                            ].
                      ] bind($package)
                      ~ enableAnimation
                      ~ build;
    
    TestMorph3_2 <- ($package core) NewBehavior
                      ~ name: 'a multi-emitter morph'
                      ~ presenterFunction: $[ :(polymorphic) :stream :kernel |
                            ((kernel state) payload) do: [ :each | stream emit: each ].
                      ] bind($package)
                      ~ build;
    
    TestMorph4 <- ($package core) NewBehavior
                    ~ presenterFunction: $[ :(polymorphic) :stream :kernel |
                |
                    r      <- 5,
                    circle <- ((polymorphic core objects) FilledCircle Radius: r)
                |

                1 to: 5 do: [ :i | (stream << i) newline ].

                stream emit: ((polymorphic core objects Text) Caption: 'Hello World!').

                stream emit: circle.
                stream emit: circle.

                stream withRoom: ((polymorphic math geometry) Point X: 100 Y: 100) ForGraphicsDo: [ :graphics |
                    graphics at: ((polymorphic math geometry) Point X:   0 Y:   0) put: ((polymorphic core objects) Rectangle Bounds: (graphics bounds)).
                    graphics at: ((polymorphic math geometry) Point X:  50 Y:  50) put: ((polymorphic core objects) FilledCircle Radius: 25).
                ].

                stream emit: circle.
                stream emit: ((((polymorphic morphs) repo core) FrameMorph) Child: ((((polymorphic morphs) repo fun) TestMorph2) link)).
                stream newline.

                1 to: 25 do: [ :i |
                    stream emit: circle.
                    ((i mod: 5) == 0) if: [
                        stream newline.
                    ].
                ].

                stream newline.

                | behavior <- ((polymorphic core morph) Behavior) New |

                stream emit: (behavior link).
                stream emit: circle.
                stream emit: (behavior link).
                stream emit: circle.
                stream newline.
                stream emit: circle.
                stream emit: (behavior link).
                stream emit: circle.
                stream emit: (behavior link).
                stream newline.

                (
                    stream emit: ((((polymorphic morphs) repo core) FrameMorph) Child: (
                        (((polymorphic morphs) repo core) FlexMorph) Horizontal
                          ~ add: ((((polymorphic morphs) repo fun) TestMorph) link)
                          ~ add: ((((polymorphic morphs) repo fun) TestMorph) link)
                          ~ add: (
                                  (((polymorphic morphs) repo core) FlexMorph) Vertical
                                    ~ add: ((((polymorphic morphs) repo fun) TestMorph) link)
                                    ~ add: ((((polymorphic morphs) repo fun) TestMorph) link)
                                    ~ add: ((((polymorphic morphs) repo fun) TestMorph) link)
                                    ~ add: (
                                        | flex3 <- (((polymorphic morphs) repo core) FlexMorph) Horizontal |
    
                                        1 to: 4 do: [ :i |
                                            flex3 add: ((((polymorphic morphs) repo core) EmitMorph)
                                                            link: ((polymorphic core objects) FilledCircle Radius: ((11 - i) * 3))).
                                        ].
    
                                        flex3
                                    )
                                    ~ add: ((((polymorphic morphs) repo fun) TestMorph) link)
                                    ~ add: (
                                        (((polymorphic morphs) repo core) FlexMorph) Horizontal
                                        ~ add: ((((polymorphic morphs) repo fun) TestMorph2) link)
                                        ~ add: ((((polymorphic morphs) repo core) FrameMorph) Child: ((((polymorphic morphs) repo fun) TestMorph2) link))
                                        ~ add: ((((polymorphic morphs) repo fun) TestMorph2) link)
                                    )
                          )
                          ~ add: ((((polymorphic morphs) repo fun) TestMorph) link)
                    )).
                    stream emit: (((polymorphic core objects) Text) Caption: 'Some text :D').
                    stream newline.
                ).

                (
                    |
                        margin1  <- (((polymorphic morphs) repo core) MarginMorph) Margin: 10,
                    |

                    (margin1 state) payload
                    ~ child: ((((polymorphic morphs) repo core) EmitMorph) link: ((polymorphic core objects) FilledCircle Radius: 25)).
                    
                    stream emit: margin1.
                ).

                stream emit: ((((polymorphic morphs) repo core) EmitMorph) link: ((polymorphic core objects) FilledCircle Radius: 25)).
                stream newline.
                stream emit: ((polymorphic core objects) FilledCircle Radius: 25).
                stream emit: ((polymorphic core objects) FilledCircle Radius: 25).
                stream newline.

                stream withGraphicsDo: [ :graphics |
                    (graphics maybeBounds) yes: [ :bnds |
                        graphics at: ((polymorphic math geometry) Point X:  0 Y:  0)
                                put: ((polymorphic core objects) Rectangle Bounds: (bnds) Color: ((polymorphic color) colors Red)).

                        graphics at: ((polymorphic math geometry) Point X: (bnds w / 2) Y: (bnds h / 2))
                                put: ((polymorphic core objects) FilledCircle Radius: 25 Color: ((polymorphic color) colors Red)).
                    ].
                ].

                (
                    |
                        flex <- (((polymorphic morphs) repo core) FlexMorph) Horizontal
                                ~ add: ((((polymorphic morphs) repo core) EmitMorph) link: (((polymorphic core objects) FilledCircle) Radius: 5 Color: ((polymorphic color) colors Red)))
                                ~ add: ((((polymorphic morphs) repo core) EmitMorph) link: (((polymorphic core objects) FilledCircle) Radius: 5 Color: ((polymorphic color) colors Red)))
                                ~ add: ((((polymorphic morphs) repo core) EmitMorph) link: (((polymorphic core objects) FilledCircle) Radius: 5 Color: ((polymorphic color) colors Red)))
                    |

                    stream emit: flex.
                ).
"
                stream emit: ((((polymorphic morphs) repo fun) TestMorph3) link).
                stream newline.
                stream emit: ((((polymorphic morphs) repo fun) TestMorph3_1) link).
                stream emit: ((((polymorphic morphs) repo fun) TestMorph3_1) link).
                stream newline.
                stream emit: ((((polymorphic morphs) repo fun) TestMorph3_1) link).
"
                    ] bind($package)
                    ~ build;
}
