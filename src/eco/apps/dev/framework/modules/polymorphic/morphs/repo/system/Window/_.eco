
std Module
{
    Behavior <- ($package core) NewBehavior
                    ~ name: 'a window morph'
                    ~ presenterFunction: $[ :(polymorphic) :stream :kernel |
                        stream withGraphicsDo: [ :graphics |
                            |
                                minExtent  <- ((kernel payload) child)
                                                yes: [ :c | c minExtent ]
                                                 no: [ ((polymorphic math geometry) Point X: 50 Y: 50) ],
                                bounds     <- (graphics maybeBounds)
                                                 yes: [ :b | b ]
                                                  no: [ ((polymorphic math geometry) Rectangle) Extent: minExtent ],
                                pureBounds <- ((kernel payload) child)
                                                yes: [ :c | c minBounds ]
                                                 no: [ bounds ],
                                rolledUp   <- (kernel payload) rolledUp,
                            |

                            (rolledUp not) if: [
                                graphics atOriginPut: (((polymorphic core objects) FilledRectangle)
                                                                X: 0
                                                                Y: 0
                                                                W: (minExtent x)
                                                                H: (minExtent y)
                                                            Color: ((graphics context) theme) windowBackgroundColor).
                                graphics atOriginPut: (((polymorphic core objects) Line) Start: (pureBounds topLeft)    End: (pureBounds bottomLeft)  Color: ((graphics context) theme lineColor)).
                                graphics atOriginPut: (((polymorphic core objects) Line) Start: (pureBounds bottomLeft) End: (pureBounds bottomRight) Color: ((graphics context) theme lineColor)).
                                graphics atOriginPut: (((polymorphic core objects) Line) Start: (pureBounds topRight)   End: (pureBounds bottomRight) Color: ((graphics context) theme lineColor)).
                            ].

                            ((kernel payload) maybeTitleMorphKernel) yes: [ :title |
                                |
                                    titleOffset <- (polymorphic math geometry) Point
                                                        X: 0
                                                        Y: (title minHeight negate),
                                    lineStart   <- (polymorphic math geometry) Point
                                                        X: (title minWidth)
                                                        Y: 0,
                                    lineEnd     <- rolledUp
                                                        if: ((polymorphic math geometry) Point Origin)
                                                      else: (pureBounds topRight),
                                |
                                graphics at: titleOffset put: title.
                                graphics atOriginPut: (((polymorphic core objects) Line) Start: (lineStart) End: (lineEnd) Color: ((graphics context) theme lineColor)).
                            ] no: [
                                graphics atOriginPut: (((polymorphic core objects) Line) Start: (pureBounds topLeft) End: (pureBounds topRight) Color: ((graphics context) theme lineColor)).
                            ].

                            (rolledUp not) if: [                            
                                ((kernel payload) child) yes: [ :c |
                                    graphics atOriginPut: (((polymorphic core objects) FilledRectangle)
                                                           Bounds: ((c minBounds) insetBy: 15)
                                                            Color: ((graphics context) theme) backgroundColor).
                                    stream emit: c.
                                ].
                            ].
                        ].
                    ] bind($package)
                    ~ on: (($package event) predicates AddMorph) do: $[ :kernel :event |
                        ((kernel state) payload) child: (event body).
                        kernel changed.
                    ]
                    ~ on: (($package event) predicates MouseClick) do: $[ :(polymorphic) :context :event |
                        | hand <- ((event body) hand) payload |
                        hand tryGrab: (context kernel) Translation: ((polymorphic math geometry) Point X: ((context x) negate) Y: ((context y) negate)).
                        (context kernel) dispose. "TODO: Only dispose if the grab was successful."
                    ] bind($package)
                    ~ on: (($package event) predicates Key) do: $[ :(polymorphic) :context :event |
                              |
                                  payload <- ((context kernel) payload),
                                  key     <- (event body) key,
                              |

                              [ :break |
                                  key ifEscape: [ payload close. break value. ].
                                  "TODO: Ignore key and/or dispatch to the next morph."
                              ] withBreak.
                    ] bind($package)
                    ~ enableBlessing
                    ~ build;

    State :: Classlike {
        Instance :: Clonable
        {
            |
                maybeMorphKernel        <- No,
                title                   <- '',
                child                   <- No,
                maybeTitleMorphKernel   <- No,
                maybeButtonsMorphKernel <- No,
                rolledUp                <- true,
            |

            {
                protected polymorphic <- $package;

                initWithTitle: _title => (
                    title                   <- _title.
                    maybeMorphKernel        <- No.
                    child                   <- No.
                    maybeTitleMorphKernel   <- No.
                    maybeButtonsMorphKernel <- No.
                    rolledUp                <- true.
                  ^ self
                );

                bless: kernel => maybeMorphKernel <- Yes: kernel;

                protected changed => (
                    maybeMorphKernel yes: [ :kernel | kernel changed ].
                  ^ self
                );

                child: c => (
                    child <- Yes: ((polymorphic ui) Margin: 15 Child: c).
                    maybeTitleMorphKernel <- Yes: (
                        ((polymorphic morphs repo) system WindowTitle)
                            Caption: title
                             Window: self
                    ).
                  ^ self
                );

                rolledUp: bool => (
                    rolledUp <- bool.
                    changed.
                  ^ self
                );

                rollUp         => rolledUp: true;
                rollDown       => rolledUp: false;
                toggleRoll     => rolledUp: (rolledUp not);

                close => (
                    maybeMorphKernel yes: [ :kernel | kernel dispose ].
                  ^ self
                );

                writeOn: w => w << 'a desktop';
            }
        };

        Title: title              => (Instance clone) initWithTitle: title;
        Title: title Child: child => Title: title ~ child: child;
    };

    Title: title              => Behavior link: (State Title: title);
    Title: title Child: child => Behavior link: (State Title: title Child: child);
}
