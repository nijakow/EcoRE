
std Module
{
    Behavior <- ($package core) NewBehavior
                    ~ name: 'a window morph'
                    ~ presenterFunction: $[ :(polymorphic) :stream :kernel |
                        stream withGraphicsDo: [ :graphics |
                            |
                                bounds <- (graphics maybeBounds)
                                              yes: [ :b | b ]
                                               no: [ (((polymorphic math geometry) Rectangle)
                                                        Extent: (((kernel payload) child)
                                                                   yes: [ :c | c minExtent ]
                                                                    no: [ ((polymorphic math geometry) Point X: 50 Y: 50) ])) ]
                            |

                            graphics atOriginPut: (((polymorphic core objects) FilledRectangle)
                                                            X: 0
                                                            Y: 0
                                                            W: ((bounds corner) x)
                                                            H: ((bounds corner) y)
                                                        Color: ((graphics context) theme) mainAccentColor).
                            graphics atOriginPut: (((polymorphic core objects) Rectangle)
                                                            X: 0
                                                            Y: 0
                                                            W: ((bounds corner) x)
                                                            H: ((bounds corner) y)
                                                        Color: ((graphics context) theme) mainAccentColor).
                            
                            ((kernel payload) maybeTitleMorphKernel) yes: [ :title |
                                graphics at: ((polymorphic math geometry) Point X: 0 Y: (title minHeight negate))
                                        put: title.
                            ].
                            
                            ((kernel payload) child) yes: [ :c |
                                graphics atOriginPut: (((polymorphic core objects) FilledRectangle)
                                                       Bounds: ((c minBounds) insetBy: 5)
                                                        Color: ((graphics context) theme) backgroundColor).
                                stream emit: c.
                            ].
                        ].
                    ] bind($package)
                    ~ on: (($package event) predicates AddMorph) do: $[ :kernel :event |
                        ((kernel state) payload) child: (event body).
                        kernel changed.
                    ]
                    ~ on: (($package event) predicates MouseClick) do: $[ :(polymorphic) :context :event |
                        | hand <- ((event body) hand) payload |
                        hand tryGrab: (context kernel) Translation: ((polymorphic math geometry) Point X: ((context x) negate) Y: ((context y) negate)).
                        (context kernel) dispose. "TODO: Only dispose if the grab was successful."
                    ] bind($package)
                    ~ build;

    State :: Classlike {
        Instance :: Clonable
        {
            |
                maybeMorphKernel      <- No,
                child                 <- No,
                maybeTitleMorphKernel <- No,
            |

            {
                protected polymorphic <- $package;

                init => (
                    maybeMorphKernel      <- No.
                    child                 <- No.
                    maybeTitleMorphKernel <- No.
                  ^ self
                );

                bless: kernel => maybeMorphKernel <- Yes: kernel;

                protected changed => (
                    maybeMorphKernel yes: [ :kernel | kernel changed ].
                  ^ self
                );

                child: c => (
                    child <- Yes: ((polymorphic ui) Margin: 5 Child: c).
                    maybeTitleMorphKernel <- Yes: (
                        ((polymorphic morphs repo) system WindowTitle) Caption: (c name)
                    ).
                  ^ self
                );

                writeOn: w => w << 'a desktop';
            }
        };

        New => Instance new;
        Child: c => New ~ child: c;
    };

    New      => Behavior link: (State New);
    Child: c => Behavior link: (State Child: c);
}
