
std Module
{
    Behavior <- ($package modules polymorphic) NewBehavior
                    ~ name: 'a shell'
                    ~ presenterFunction: $[ :stream :kernel |
                            ((kernel payload) current) yes: [ :current |
                                stream withGraphicsDo: [ :graphics |
                                    graphics fullScreenPut: current.
                                ].
                            ].
                      ]
                    ~ enableBlessing
                    ~ build;
    
    State :: Classlike
    {
        Instance :: Clonable
        {
            |
                maybeMorphKernel <- No,
                current          <- No,
                target,
                editor,
            |

            {
                protected wisp        <- $package;
                protected polymorphic <- $package modules polymorphic;
                protected ui          => polymorphic ui;

                initWithTarget: _target => (
                    maybeMorphKernel <- No.
                    current          <- No.
                    target           <- _target.
                    editor           <- ui DocumentEditor.

                    rebuild.

                  ^ self
                );

                protected current: c => current <- Yes: c;

                bless: morph => maybeMorphKernel <- Yes: morph;

                protected changed => (
                    maybeMorphKernel yes: [ :morph |
                        morph contentChanged.
                    ].
                  ^ self
                );

                rebuild => (
                    current: (
                        ui VFlex(
                            ui Margin: (3 + 5) Child: editor,
                            ui Margin: 3 Child: (
                                ui HFlex(
                                    ui Margin: 3 Child: (
                                        (ui Button) Label: 'Get it' Action: $[ :(target, document) :event |
                                            (((event session) framework) actions eval)
                                                Document: document
                                                      On: target
                                               OnSuccess: [ (std io out << 'Success!') newline commit. ]
                                               OnFailure: [ (std io out << 'Failure!') newline commit. ].
                                        ] bind(target, (editor payload) document)
                                    ),
                                    ui Margin: 3 Child: ((ui Button) Label: 'Do it'  Action: $[]),
                                ) ~ yLayoutShrinkWrap!,
                            ) ~ yLayoutShrinkWrap!,
                        )
                    ).
                  ^ self
                );

                writeOn: w => w << 'a shell state';
            }
        };

        Target: target => (Instance clone) initWithTarget: target;
    };

    Target: target => Behavior link: (State Target: target);
}
