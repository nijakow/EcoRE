
std Module
{
    protected wisp        <- $package;
    protected polymorphic <- $package modules polymorphic;
    protected ui          => polymorphic ui;

    Object: object => (
        | stream <- (std io StringWriter) new |

        stream << object.

        | title <- stream build |

      ^ ui MiniWindowWithTitle: title Content: (ui Margin: 10 Child: ((wisp components Object) Object: object))
    );

    SlotMorphForSlot: slot Navigator: navigator => (
        | tagColor <- (polymorphic color) Darker: ((((polymorphic color) themes) Default) textColor) |
      ^ ui Framed(
            (ui HFlex) inject: [ :hflex |
                hflex add: (
                    ui Margin: 10 Child: (
                        ui HFlex(
                            ui Label: (slot isProtected if: 'p' else: ' ') Color: tagColor,
                            ui Label: (slot isStatic    if: 's' else: ' ') Color: tagColor,
                            ui Label: (slot isFinal     if: 'f' else: ' ') Color: tagColor,
                            ui Label: (slot isWith      if: 'w' else: ' ') Color: tagColor,
                            ui Label: (slot isInherited if: 'i' else: ' ') Color: tagColor,
                        )
                    ) ~ xLayoutShrinkWrap!
                ).
                hflex add: (
                    ui Framed(
                        ui Margin: 5 Child: (
                            (ui Button)
                                Action: $[ :(wisp, slotMirror, navigator) :event | ((event handMorph) payload) tryGrab: ((wisp components presentations) DraggableSlotMorphForSlot: slotMirror Navigator: navigator) ] bind(wisp, slot, navigator)
                                 Child: (ui Margin: 5 Child: (ui Label: ((slot name) asString)))
                        )
                    )
                ).
                hflex add: (
                    ui Margin: 5 Child: (
                        (ui Button)
                            Action: $[ :(us, wisp, slotMirror) :event | ((event handMorph) payload) tryGrab: (us Object: (slotMirror slotValue)) ] bind(self, wisp, slot)
                             Child: (ui Margin: 5 Child: (ui Label: ' / '))
                    ) ~ xLayoutShrinkWrap!
                ).
            ]
        ) ~ yLayoutShrinkWrap!
    );

    DraggableSlotMorphForSlot: slot Navigator: navigator => (
        | stream <- (std io StringWriter) new |

        stream << 'The slot ' << (slot name).

        | title <- stream build |

      ^ ui MiniWindowWithTitle: title Content: (SlotMorphForSlot: slot Navigator: navigator)
    );


    MoleculePaneForMirror: mirror Navigator: navigator => (
        | flex <- ui VFlex |

        mirror slotsDo: [ :slot |
            flex add: (SlotMorphForSlot: slot Navigator: navigator)
        ].

      ^ flex
    );
    
    PresentationPaneForMirror: mirror Navigator: navigator => (
        | sw <- (std io StringWriter) new |

        sw << (mirror reflectee).

      ^ ui Label: (sw build)
    );

    ForMirror: mirror Navigator: navigator => (
        |
            object <- mirror reflectee
        |

        begin
            ~ if: [ (std reflect primitives) IsMolecule:  object ] then: [ ^ MoleculePaneForMirror: mirror Navigator: navigator ]
        ~ default: [ ^ PresentationPaneForMirror: mirror Navigator: navigator ]
    );
}
