
{
    isa std Classlike;

    Instance :: Clonable
    {
        |
            objectMirror,
            openShells,
            maybeMorph,
            navigator,
        |

        {
            protected ui   <- ($package modules polymorphic) ui;
            protected wisp <- $package;

            initWithMirror: mirror Navigator: nav => (
                objectMirror <- mirror.
                openShells   <- std util newVector.
                maybeMorph   <- No.
                navigator    <- nav.
              ^ self
            );

            build => (
                maybeMorph <- Yes: (
                    (wisp components presentations)
                        ForMirror: objectMirror
                        Navigator: navigator
                ).
              ^ self
            );

            morph => (
                maybeMorph no: [ build ].
              ^ maybeMorph yes
            );

            openShell => (
                openShells add: (ui DocumentEditor).
              ^ self
            );

            closeShell: shell => (
                openShells remove: shell.
              ^ self
            );

            writeOn: w => w << 'a browser view';
        }
    };

    Mirror: mirror Navigator: navigator => (Instance clone) initWithMirror: mirror Navigator: navigator;
    Object: object Navigator: navigator => Mirror: (std reflect Mirror: object) Navigator: navigator;
}
