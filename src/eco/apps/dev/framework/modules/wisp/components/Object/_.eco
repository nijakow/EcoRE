

std Module
{
    Behavior <- ($package modules polymorphic) NewBehavior
                    ~ name: 'an object morph'
                    ~ presenterFunction: $[ :(polymorphic) :stream :kernel |
                            |
                                child  <- (kernel payload) child,
                            |
                            stream withGraphicsDo: [ :graphics |
                                graphics fullScreenPut: child.
                            ].
                      ] bind($package modules polymorphic)
                    ~ enableBlessing
                    ~ build;
    
    State :: Classlike
    {
        Instance :: Clonable
        {
            |
                maybeMorphKernel <- No,
                mirror,
                child <- No,
                shells,
            |

            {
                protected wisp        <- $package;
                protected polymorphic <- $package modules polymorphic;
                protected ui          => polymorphic ui;

                initWithMirror: _mirror => (
                    mirror <- _mirror.
                    child  <- No.
                    shells <- std util newVector.
                    rebuild.
                  ^ self
                );
                initWithObject: object => initWithMirror: (std reflect Mirror: object);

                bless: kernel => maybeMorphKernel <- Yes: kernel;

                protected changed => (
                    maybeMorphKernel yes: [ :kernel | kernel contentChanged ].
                  ^ self
                );

                rebuild => (
                    child <- ui VFlex(
                        ui Margin: 10 Child: (
                            ui VFlex(
                                ui Margin: 5 Child: (
                                    (wisp components presentations) ForMirror: mirror Navigator: self
                                ),
                                (ui VFlex) inject: [ :flex |
                                    shells do: [ :shell |
                                        flex add: (
                                            ui HFlex(
                                                ui Margin: 5 Child: (
                                                    ui Framed(ui Margin: 5 Child: shell)
                                                ),
                                                ui VFlex(
                                                    ui Margin: 5 Child: (
                                                        (ui Button)
                                                             Label: 'X'
                                                            Action: $[ :(browser, shell) | browser closeShell: shell ] bind(self, shell)
                                                    ),
                                                    ui Margin: 5 Child: (
                                                        (ui Button)
                                                             Label: '>'
                                                            Action: $[ :(ui, browser, shell) :event |
                                                                browser closeShell: shell.
                                                                ((event handMorph) payload) tryGrab: (
                                                                    ui MiniWindowWithTitle: 'Shell' Content: shell.
                                                                ).
                                                            ] bind(ui, self, shell)
                                                    )
                                                ) ~ xLayoutShrinkWrap!,
                                            )
                                        )
                                    ].
                                ],
                            ),
                        ),
                        ui HFlex(
                            (ui Button) Label: 'Shell' Action: $[ :(browser) | browser openShell ] bind(self),
                        ) ~ yLayoutShrinkWrap!,
                    ).
                    changed.
                  ^ self
                );

                openShell => (
                    shells add: ((wisp components) Shell) New.
                    rebuild.
                  ^ self
                );

                closeShell: shell => (
                    shells remove: shell.
                    rebuild.
                  ^ self
                );

                writeOn: w => w << 'an object morph state';
            }
        };

        Object: object => (Instance clone) initWithObject: object;
    };

    Object: object => Behavior link: (State Object: object);
}
