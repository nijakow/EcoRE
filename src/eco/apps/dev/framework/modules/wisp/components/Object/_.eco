

std Module
{
    Behavior <- ($package modules polymorphic) NewBehavior
                    ~ name: 'an object morph'
                    ~ presenterFunction: $[ :(polymorphic) :stream :kernel |
                            |
                                child  <- (kernel payload) child,
                                bounds <- child minBounds,
                            |
                            stream withGraphicsDo: [ :graphics |
                                graphics atOriginPut: (((polymorphic core objects) FilledRectangle)
                                                            Bounds: bounds
                                                            Color: ((graphics context) theme transparentWindowColor)).
                                graphics atOriginPut: child.
                            ].
                      ] bind($package modules polymorphic)
                    ~ on: ((($package modules polymorphic) event) predicates MouseClick) do: $[ :(polymorphic) :context :event |
                        | hand <- ((event body) hand) payload |
                        hand tryGrab: (context kernel) Translation: ((polymorphic math geometry) Point X: ((context x) negate) Y: ((context y) negate)).
                        (context kernel) dispose. "TODO: Only dispose if the grab was successful."
                    ] bind($package modules polymorphic)
                    ~ build;
    
    State :: Classlike
    {
        Instance :: Clonable
        {
            |
                object,
                child,
            |

            {
                protected wisp        <- $package;
                protected polymorphic <- $package modules polymorphic;
                protected ui          => polymorphic ui;

                initWithObject: _object => (
                    object <- _object.
                    rebuild.
                  ^ self
                );

                rebuild => (
                    child <- ui Framed(
                        ui Margin: 10 Child: (
                            (((polymorphic morphs) repo core) WriteMorph) link: object
                        )
                    ).
                  ^ self
                );

                writeOn: w => w << 'an object morph state';
            }
        };

        Object: object => (Instance clone) initWithObject: object;
    };

    Object: object => Behavior link: (State Object: object);
}
