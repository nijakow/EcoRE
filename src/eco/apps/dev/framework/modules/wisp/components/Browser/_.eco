
std Module
{
    Behavior <- ($package modules polymorphic) NewBehavior
                    ~ name: 'a browser'
                    ~ presenterFunction: $[ :stream :kernel |
                            ((kernel payload) current) yes: [ :current |
                                stream emit: current.
                            ].
                      ]
                    ~ enableBlessing
                    ~ build;
    
    State :: Classlike
    {
        Instance :: Clonable
        {
            |
                maybeMorphKernel <- No,
                current          <- No,
                views,
            |

            {
                protected wisp        <- $package;
                protected polymorphic <- $package modules polymorphic;
                protected ui          => polymorphic ui;

                init => (
                    |
                        navigator <- (wisp components Navigator) Browser: self,
                        view      <- (wisp components BrowserView)
                                            Object: self
                                         Navigator: navigator,
                    |

                    maybeMorphKernel <- No.
                    current          <- No.
                    views            <- std util newStack.

                    views push: view.
                    rebuild.

                  ^ self
                );

                protected current: c => current <- Yes: c;

                bless: morph => maybeMorphKernel <- Yes: morph;

                protected changed => (
                    maybeMorphKernel yes: [ :morph |
                        morph contentChanged.
                    ].
                  ^ self
                );

                navigateToObject: object Navigator: navigator => (
                    |
                        view <- (wisp components BrowserView)
                                    Object: object
                                 Navigator: navigator,
                    |

                    views push: view.
                    current: view.
                    rebuild.
                    changed.

                  ^ self
                );

                navigateBack => (
                    ((views empty?) not) if: [
                        views pop.
                        ((views empty?) not) if: [
                            current: (views top).
                        ] else: [
                            current <- No.
                        ].
                        rebuild.
                        changed.
                    ].

                  ^ self
                );

                openShell => (
                    ((views empty?) not) if: [
                        (views top) openShell.
                        rebuild.
                        changed.
                    ].
                  ^ self
                );

                closeShell: shell => (
                    ((views empty?) not) if: [
                        (views top) closeShell: shell.
                        rebuild.
                        changed.
                    ].
                  ^ self
                );

                rebuild => (
                    current: (
                        ui VFlex(
                            ui Margin: 10 Child: (
                                ui VFlex(
                                    ui Margin: 5 Child: (
                                        (views empty?)
                                              if: [ ui Label: 'Nothing to show' ]
                                            else: [ (views top) morph           ],
                                    ),
                                    (ui VFlex) inject: [ :flex |
                                        ((views empty?) not) if: [
                                            ((views top) openShells) do: [ :shell |
                                                flex add: (
                                                    ui Margin: 5 Child: (
                                                        ui Framed(
                                                            ui VFlex(
                                                                ui Margin: (3 + 5) Child: shell,
                                                                ui Margin: 3 Child: (
                                                                    ui HFlex(
                                                                        ui Margin: 3 Child: ((ui Button) Label: 'Get it' Action: $[]),
                                                                        ui Margin: 3 Child: ((ui Button) Label: 'Do it' Action: $[]),
                                                                        ui Margin: 3 Child: ((ui Button) Label: 'Close' Action: $[ :(browser, shell) | browser closeShell: shell ] bind(self, shell)),
                                                                    ) ~ yLayoutShrinkWrap!,
                                                                ) ~ yLayoutShrinkWrap!,
                                                            )
                                                        )
                                                    )
                                                )
                                            ].
                                        ].
                                    ],
                                )
                            ),
                            ui HFlex(
                                (ui Button) Label: '<--'   Action: $[ :(browser) | browser navigateBack ] bind(self),
                                (ui Button) Label: 'Grab'  Action: $[],
                                (ui Button) Label: 'Proxy' Action: $[],
                                (ui Button) Label: 'Shell' Action: $[ :(browser) | browser openShell ] bind(self),
                            ) ~ yLayoutShrinkWrap!,
                        )
                    ).
                  ^ self
                );

                writeOn: w => w << 'a browser state';
            }
        };

        New => Instance new;
    };

    New => Behavior link: (State New);
}
