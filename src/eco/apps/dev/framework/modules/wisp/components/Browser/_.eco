
std Module
{
    Behavior <- ($package modules polymorphic) NewBehavior
                    ~ name: 'a browser'
                    ~ presenterFunction: $[ :stream :kernel |
                            ((kernel payload) current) yes: [ :current |
                                stream emit: current.
                            ].
                      ]
                    ~ build;
    
    State :: Classlike
    {
        Instance :: Clonable
        {
            |
                current <- No,
                views,
            |

            {
                protected ui <- ($package modules polymorphic) ui;

                init => (
                    current <- No.
                    views   <- std util newStack.
                    rebuild.
                  ^ self
                );

                protected current: c => current <- Yes: c;

                rebuild => (
                    current: (
                        ui MiniWindow(
                            ui VFlex(
                                ui Label: 'Hey!',
                                ui Label: 'This is a test!'
                            )
                        )
                    )
                );

                writeOn: w => w << 'a browser state';
            }
        };

        New => Instance new;
    };

    New => Behavior link: (State New);
}
