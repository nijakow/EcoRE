
std Module
{
    Behavior <- ($package modules polymorphic) NewBehavior
                    ~ name: 'a browser'
                    ~ presenterFunction: $[ :stream :kernel |
                            ((kernel payload) current) yes: [ :current |
                                stream emit: current.
                            ].
                      ]
                    ~ build;
    
    State :: Classlike
    {
        Instance :: Clonable
        {
            |
                current <- No,
                views,
            |

            {
                protected wisp        <- $package;
                protected polymorphic <- $package modules polymorphic;
                protected ui          => polymorphic ui;

                init => (
                    |
                        mirror    <- (std reflect Mirror: 42),
                        navigator <- (wisp components Navigator) New,
                        view      <- (wisp components BrowserView)
                                            Mirror: mirror
                                         Navigator: navigator,
                    |

                    current <- No.
                    views   <- std util newStack.
                    views push: view.
                    rebuild.
                    
                  ^ self
                );

                protected current: c => current <- Yes: c;

                rebuild => (
                    current: (
                        ui VFlex(
                            ui Framed(
                                ui Margin: 5 Child: (
                                    (views empty?)
                                          if: [ ui Label: 'Nothing to show' ]
                                        else: [ (views top) morph           ],
                                ) ~ flexibleLayout!
                            ) ~ flexibleLayout!,
                            ((polymorphic morphs repo) fun TestMorph5) link ~ flexibleLayout!,
                            ui HFlex(
                                ui Framed(ui Margin: 5 Child: ui Label('<--') ~ xLayoutFlexible!) ~ xLayoutFlexible!,
                                ui Framed(ui Margin: 5 Child: ui Label('Grab') ~ xLayoutFlexible!) ~ xLayoutFlexible!,
                                ui Framed(ui Margin: 5 Child: ui Label('Proxy') ~ xLayoutFlexible!) ~ xLayoutFlexible!,
                                ui Framed(ui Margin: 5 Child: ui Label('Shell') ~ xLayoutFlexible!) ~ xLayoutFlexible!,
                            ) ~ xLayoutFlexible!,
                        )
                    ).
                  ^ self
                );

                writeOn: w => w << 'a browser state';
            }
        };

        New => Instance new;
    };

    New => Behavior link: (State New);
}
