
#=lang/eco/compiler: {
    static with inherited _ = #<:std/Module>;

    Bytecodes = #<:lang/eco/compiler/Bytecodes>;
    RegisterAllocator = #<:lang/eco/compiler/RegisterAllocator>;
    CodeWriter = #<:lang/eco/compiler/CodeWriter>;
    AssignmentVisitor = #<:lang/eco/compiler/AssignmentVisitor>;
    Visitor = #<:lang/eco/compiler/Visitor>;
    ValueType = #<:lang/eco/compiler/ValueType>;
    Scope = #<:lang/eco/compiler/Scope>;
    Compiler = #<:lang/eco/compiler/Compiler>;
    ScopedCompiler = #<:lang/eco/compiler/ScopedCompiler>;

    CompilationDriver = {
        static with inherited _ = #<:std/Clonable>;
        protected module = #<:lang/eco/compiler>;

        protected compiler;

        protected subject;
        protected selfOverride;
        protected environmentOverride;
        protected hostOverride;

        with inherited trait = {
            init => (
                compiler            <- (module ScopedCompiler) new.
                subject             <- No. "TODO: Initialize to ASTNothing"
                selfOverride        <- No.
                environmentOverride <- No.
                hostOverride        <- No.
              ^ self
            );

            initWithSubject: _subject => (
              | v <- init |
                v subject: _subject.
              ^ v
            );

            subject:   ast => subject <- ast;

            self:        v => selfOverride        <- Yes: v;
            host:        v => hostOverride        <- Yes: v;
            environment: v => environmentOverride <- Yes: v;

            addParameter: p Type: t => compiler addParameter: p Type: t;
            addParameter: p         => compiler addParameter: p;
            enableVarargs           => compiler enableVarargs;

            commit => (
                |
                    visitor  <- ((module Visitor) clone)
                                  ~ initWithCompiler: compiler
                |
                environmentOverride yes: [ :e | visitor environment: e ].
                hostOverride        yes: [ :h | visitor host:        h ].
                selfOverride        yes: [ :s | visitor self:        s ].
                subject acceptVisitor: visitor.
              ^ compiler finish
            );

            evaluate => commit execute(environmentOverride yes: [ :e | e ] no: [ lobby ]);
        }
    }
}
