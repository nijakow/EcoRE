
#=lang/eco/compiler/RegisterAllocator: {
    static with inherited parent = #<:std/Clonable>;
    with inherited module = #<:lang/eco/compiler>;

    freeSet, counter;

    init => (
        freeSet <- std util newSet.
        counter <- 0.
      ^ self
    );

    allocate => (
        (freeSet empty?) if: [ allocateN: 1 ]
                        else: [ freeSet take ]
    );
    allocateN: n => ( | c <- counter | counter <- counter + n. ^ c );
    deallocate: r => freeSet add: r;
    withAllocatedRegister: block => (
        "TODO: Unwind-Protect!"
        |
          v <- allocate.
          r <- (ValueType Reg: v) let: block
        |
        deallocate: v.
      ^ r
    );
}
