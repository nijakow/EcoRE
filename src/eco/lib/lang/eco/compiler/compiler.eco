
#=lang/eco/compiler/Compiler: {
    static with inherited parent = #<:std/Clonable>;
    with inherited module = #<:lang/eco/compiler>;

    writer, depth, regAlloc;

    initWithWriter: w Depth: d => (
        writer    <- w.
        depth     <- d.
        regAlloc  <- RegisterAllocator new.
      ^ self
    );
    initWithDepth: d => initWithWriter: (CodeWriter new) Depth: d;

    finishWithArgs: args Varargs: varargs => (
        returnWithDepth: 0.
      ^ writer finishWithArgs: args Varargs: varargs
    );

    selfValue => registerValue: (ValueType Arg: 0) Depth: depth;
    constantValue: c => (ValueType Constant) clone initWithValue: c;
    closureValue: c => (ValueType Closure) clone initWithValue: c;
    registerValue: details Depth: d => (ValueType Register) clone initWithDetails: details Depth: d;
    stackTopValue => (ValueType Stack) clone;

    loadSelf => loadRegister: (ValueType Arg: 0) Depth: depth;
    loadConstant: c => writer writeConst: c;
    loadClosure: c => writer writeClosure: c;
    loadRegister: r Depth: d => writer writeLoad: r bcIndex Depth: d;
    loadRegister: r => loadRegister: r Depth: 0;
    storeRegister: r Depth: d => writer writeStore: r bcIndex Depth: d;
    storeRegister: r => writer writeStore: r bcIndex;

    push => writer writePush;
    drop => loadSelf;

    builtinWithMessage: msg ArgCount: args Varargs: varargs => (
        writer writeBuiltin: msg Args: args Varargs: varargs.
    );
    builtinWithMessage: msg ArgCount: args => (
        builtinWithMessage: msg ArgCount: args Varargs: false
    );

    sendWithMessage: msg ArgCount: args Varargs: varargs => (
        writer writeSend: msg Args: args Varargs: varargs.
    );
    sendWithMessage: msg ArgCount: args => (
        sendWithMessage: msg ArgCount: args Varargs: false
    );

    resendWithMessage: msg ArgCount: args Varargs: varargs => (
        writer writeResend: msg Args: args Varargs: varargs.
    );
    resendWithMessage: msg ArgCount: args => (
        resendWithMessage: msg ArgCount: args Varargs: false
    );

    assignWithKey: key => (
        writer writeAssign: key.
    );

    returnWithDepth: depth => (
        writer writeReturn: depth.
    );
}
