
#=lang/eco/parser/Parser/Molecule: {
    static with inherited _ = #<:std/Module>;

    parseObjectSlotFlags: flags => (
        [
            begin
              if: [ (check: TokenType DEPRECATED) isYes ] then: [ flags setDeprecated ] ~
              if: [ (check: TokenType PROTECTED)  isYes ] then: [ flags setProtected  ] ~
              if: [ (check: TokenType STATIC)     isYes ] then: [ flags setStatic     ] ~
              if: [ (check: TokenType PRIVATE)    isYes ] then: [ flags setPrivate    ] ~
              if: [ (check: TokenType FINAL)      isYes ] then: [ flags setFinal      ] ~
              if: [ (check: TokenType WITH)       isYes ] then: [ flags setWith       ] ~
              if: [ (check: TokenType OWN)        isYes ] then: [ flags setOwn        ] ~
              if: [ (check: TokenType INHERITED)  isYes ] then: [ flags setInherited  ] ~
            default: [ ^ flags ]
        ] repeat
    );

    parseSlotWithBuilder: builder => (
        | flags <- builder openFlags |
        parseObjectSlotFlags: flags.

        |
            type     <- parseOptionalType,
            decl     <- parseMethodDeclaration,
            slotname <- decl first,
            arglist  <- decl second,
            varargs  <- decl third
        |

        (slotname == #'') if: [ ^ self ].

        (check: TokenType RARROW) yes: [
            | body <- parseExpression |
            builder addCodeSlotWithFlags: flags
                                    Type: type
                                    Name: slotname
                                    Args: arglist
                                    Varargs: varargs
                                    Body: body
        ] no: [
            | value |
            (check: TokenType ASSIGNMENT) yes: [
                value <- parseExpression
            ] no: [
                (check: TokenType DOUBLECOLON) yes: [
                    flags setOwn.
                    value <- parseExpression
                ] no: [
                    value <- newASTSelf
                ]
            ].
            builder addValueSlotWithFlags: flags
                                     Type: type
                                     Name: slotname
                                    Value: value
        ]
    );

    parseIsaSlotWithBuilder: builder => (
        |
            flags    <- builder openFlags,
            type     <- parseOptionalType,
            slotname <- #'_'
        |

        flags setStatic.
        flags setWith.
        flags setInherited.

        builder addValueSlotWithFlags: flags
                                 Type: type
                                 Name: slotname
                                Value: parseExpression.
    );

    parseTraitWithBuilder: builder => (
        | subbuilder <- newASTMoleculeBuilder |

        "Add the header to the builder"
        (
            |
                subflags <- builder openFlags
            |

            subflags setStatic.
            subflags setWith.
            subflags setInherited.

            subbuilder addValueSlotWithFlags: subflags
                                        Type: (newASTConstantWithValue: any) "TODO"
                                        Name: #'_'
                                       Value: (newASTConstantWithValue: #<:std/Trait>).
        ).

        "Parse the trait body"
        |
            flags <- builder openFlags,
            val   <- parseMoleculeWithBuilder: subbuilder
        |

        flags setWith.
        flags setInherited.

        "Add the trait to the builder"
        builder addValueSlotWithFlags: flags
                                 Type: (newASTConstantWithValue: any) "TODO"
                                 Name: #'trait'
                                Value: val.
    );

    parseMoleculeUntil: stop WithBuilder: builder => (
        [ :break |
            [ :continue |
                begin
                  if: [ (check: stop)             isYes ] then: [ break    value                   ] ~
                  if: [ (check: TokenType BAR)    isYes ] then: [ continue value                   ] ~
                  if: [ (check: TokenType ISA)    isYes ] then: [ parseIsaSlotWithBuilder: builder ] ~
                  if: [ (check: TokenType LCURLY) isYes ] then: [ parseTraitWithBuilder:   builder ] ~
                default: [ parseSlotWithBuilder: builder ].
                (check: TokenType BAR) yes: [ continue value ].
                (check: stop) yes: [ break value ].
                expect: TokenType SEPARATOR
            ] withRestart.
        ] repeatWithBreak.
    );

    parseMoleculeWithBuilder: builder => (
        parseMoleculeUntil: TokenType RCURLY WithBuilder: builder.
      ^ builder commit
    );

    parseMolecule => parseMoleculeWithBuilder: newASTMoleculeBuilder;
}
