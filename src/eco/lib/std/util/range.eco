
#=std/util/Range: {
    static with inherited _ = #<:std/Clonable>;

    start, end;

    with inherited trait = {
        static with inherited _ = #<:std/Trait>;
        
        with inherited _ = #<:std/util/StandardListConversions>;
        with inherited _ = #<:std/util/StandardListAccess>;
        with inherited _ = #<:std/util/StandardListSearch>;
        
        initWithStart: _start End: _end => (
            start <- _start min: _end.
            end   <- _start max: _end.
          ^ self
        );

        range => ((end - start) + 1) max: 0;

        size => range;
        at: i => start + i;

        do: block => start to: end do: block;
        forEach: block => 0 for: range do: [ :i | block value(i, at: i) ];

        iterator => (std util iterators IndexIterator) clone init: self;

        writeOn: w => w << start << ' to: ' << end;
    };
}
