
#=std/util/WeakSet: {
    with inherited _ = #<:std/Clonable>;

    private elements;

    with inherited trait = {
        with inherited _ = #<:std/util/SafeListConversions>;

        init => (
            elements <- std util newVector.
          ^ self
        );

        from: sequence => ( sequence do: [ :e | add: e ]. ^ self).

        forEach: block => (
            | i <- 0 |
            do: [ :e |
                block value(i, e).
                i <- i + 1.
            ].
          ^ self
        );
        do: block => (
            elements do: [ :box |
                ((box empty) not) if: [
                    block value(box get).
                ]
            ].
          ^ self
        );

        size => (
            | i <- 0 |
            do: [ :e | i <- i + 1 ].
          ^ i
        );

        contains: e => (
            do: [ :x | (e is: x) if: [ ^ true ] ].
          ^ false
        );

        add: e => (
            (contains: e) unless: [
                elements do: [ :box |
                    (box empty) if: [ box set: e. ^ self ].
                ].
                elements add: (std util WeakBox: e).
            ].
          ^ self
        );
        remove: e => (
            elements do: [ :box |
                (box empty not) if: [
                    (box get is: e) if: [
                        box clear.
                      ^ self
                    ]
                ]
            ].
          ^ self
        );
        
        writeOn: w => w << 'a weak set';
    };
}
