
#=std/util/text/parsing/number: {
    static with inherited parent = #<:std/Module>;

    protected own Base10Transformer = {
        base => 10;
        transformFromChar: c => (
            ((c asInt) isBetween: (#\0 asInt) And: (#\9 asInt)) -> [
              ^ Yes: ((c asInt) - (#\0 asInt))
            ].
          ^ No
        );
        with inherited parent = #<:std/Clonable>;
    };

    protected ParseSignFromStream: it => (
        (it check: #\-) -> [ ^ -1 ].
        (it check: #\+).
      ^ 1
    );

    ParseUIntFromStream: it Transformer: transformer => (
        |
            v <- 0,
            n <- 0
        |
        [ it hasNext ] while: [
            it withReset: [ :reset |
                | c <- it next |
                (transformer transformFromChar: c)
                    yes: [ :digit | v <- (v * (transformer base)) + digit ]
                     no: [ reset value. (n > 0) -> [ ^ Yes: v ]. ^ No ].
                n <- n + 1.
            ]
        ].
        (n > 0) -> [ ^ Yes: v ].
      ^ No
    );

    ParseIntFromStream: it Transformer: transformer => (
        it withReset: [ :reset |
            ([ it has ] and: [ it current == #\- ])
                -> [ it forward. ^ (ParseUIntFromStream: it Transformer: transformer) yes: [ :v | ^ Yes: (v negate) ] no: [ reset value. ^ No ] ].
            ([ it has ] and: [ it current == #\+ ]) -> [ it forward ].
          ^ (ParseUIntFromStream: it Transformer: transformer) yes: [ :v | Yes: v ] no: [ reset value. No ]
        ]
    );

    ParseUIntFromStream: it => (
        ParseUIntFromStream: it
                Transformer: Base10Transformer
    );

    ParseIntFromStream: it => (
        ParseIntFromStream: it
               Transformer: Base10Transformer
    );

    protected ParseFractionalPartFromStream: it Transformer: transformer => (
        ((it has) not) -> [ ^ 0 asFloat ].
        it withReset: [ :reset |
            (transformer transformFromChar: it next)
                yes: [ :v | ^ ((ParseFractionalPartFromStream: it Transformer: transformer) + v) / 10 ]
                 no: [ reset value. ^ 0 asFloat ]
        ]
    );

    protected ParseOptionalFractionalPartFromStream: it Transformer: transformer => (
        it withReset: [ :reset |
            (([ it hasNext ] and: [ it next == #\. ]) not) -> [ reset value. ^ No ].
            (transformer transformFromChar: it current) no: [ reset value. ^ No ].
        ].
      ^ Yes: (ParseFractionalPartFromStream: it Transformer: transformer)
    );

    ParseNumberFromStream: it => (
        it withReset: [ :reset |
            |
                sign        <- ParseSignFromStream: it,
                transformer <- Base10Transformer
            |
            (ParseUIntFromStream: it Transformer: transformer)
                 no: [ reset value. ^ No ]
                yes: [ :i |
                    i <- i * sign.
                    (ParseOptionalFractionalPartFromStream: it Transformer: transformer)
                        yes: [ :f | ^ Yes: ((sign < 0) if: [ ((i asFloat) - f) ] else: [ ((i asFloat) + f) ]) ]
                        no:  [      ^ Yes: i                                                                  ]
                ]
        ]
    );
}
