#=std/util/Map: {
    static with inherited parent = #<:std/Clonable>;
    
    protected pairs;
    protected comparator;

    with inherited trait = {
        initWithComparator: _comparator => (
            pairs      <- std util newVector.
            comparator <- _comparator.
          ^ self
        );
        init => initWithComparator: std util comparators DefaultComparator;

        forEach: block => pairs do: [ :v | block value(v first, v second) ];
        do: block => forEach: [ :k, :v | block value(k) ];

        from: collection => ( collection forEach: [ :k, :v | at: k put: v ]. ^ self );
        into: collection => collection from: self;

        at: index => ( forEach: [ :k, :v | (comparator value(k, index)) if: [ ^ Yes: v ] ]. No );

        at: index put: value => (
            pairs do: [ :p | (comparator value(p first, index)) if: [ p second: value. ^ self ] ].
            pairs append: (index ~> value).
            ^ self
        );

        keysInto: collection => ( forEach: [ :k, :v | collection add: k ]. ^ collection );
        valuesInto: collection => ( forEach: [ :k, :v | collection add: v ]. ^ collection );

        keys => keysInto: (std util newSet);
        values => valuesInto: (std util newSet);

        writeOn: w => w << pairs;
    };
}
