
#=std/sys/Types: {
    static with inherited _ = #<:std/Module>;

    own CastError = {
        static with inherited _ = #<:std/Singleton>;
        with inherited ErrorTrait = #<:std/sys/error/ErrorTrait>;

        writeOn: w => w << 'a cast error';
    };

    own TypeTrait = #=std/sys/types/TypeTrait: {
        static with inherited _ = #<:std/Trait>;
        protected types = #<:std/sys/Types>;

        protected castFailed => (types CastError) throw;

        probe: object => true;

        cast: object onSuccess: success onFailure: fail => (probe: object) if: [ success value(object) ] else: [ fail value ];
        
        cast: object => cast: object onSuccess: [ :v | ^ v ] onFailure: [ castFailed ];

        + other => (#<:std/sys/Types> SumTypeOf: self And: other);

        writeOn: w => w << 'a type';
    };

    own EmptyType = #=std/sys/types/EmptyType: {
        static with inherited _ = #<:std/Singleton>;
        with inherited TypeTrait = #<:std/sys/types/TypeTrait>;

        probe: object => false;

        writeOn: w => w << 'the empty type';
    };

    own UniversalType = {
        static with inherited _ = #<:std/Singleton>;
        with inherited TypeTrait = #<:std/sys/types/TypeTrait>;

        probe: object => true;

        writeOn: w => w << 'the universal type';
    };

    own SumType = {
        static with inherited _ = #<:std/Clonable>;
        with inherited TypeTrait = #<:std/sys/types/TypeTrait>;

        protected a <- #<:std/sys/types/EmptyType>,
        protected b <- #<:std/sys/types/EmptyType>;

        with inherited trait = {
            static with inherited _ = #<:std/Trait>;

            initWithA: _a B: _b => (
                a <- _a.
                b <- _b.
              ^ self
            );

            probe: object => [ a probe: object ] or: [ b probe: object ];
            
            cast: object onSuccess: success onFailure: fail => (
                a cast: object onSuccess: [ :v | ^ success value(v) ] onFailure: [
                    b cast: object onSuccess: [ :v | ^ success value(v) ] onFailure: [ fail value ]
                ]
            );

            writeOn: w => w << 'a sum type(' << a << ', ' << b << ')';
        };
    };

    SumTypeOf: a And: b => (SumType clone) initWithA: a B: b;
}
