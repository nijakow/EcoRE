"
    io.eco - The `std io` package of the Ecosphere
"

#=std/io: {
    static with inherited _ = #<:std/Module>;

    in, out;

    FileDescriptor = #<:std/io/FileDescriptor>;

    FDSegmentReader = #<:std/io/FDSegmentReader>;
    FDByteReader = #<:std/io/FDByteReader>;
    FDByteWriter = #<:std/io/FDByteWriter>;

    PortInput = #<:std/io/PortInput>;
    PortOutput = #<:std/io/PortOutput>;
    PortIO = #<:std/io/PortIO>;

    Writer = #<:std/io/Writer>;
    StringWriter = #<:std/io/StringWriter>;

    OpenFileForReading: path  => (std util text utf8 UTF8Iterator) clone init: (((std io FDSegmentReader) clone initWithFileDescriptor: ((std io FileDescriptor) clone init: #'ecosphere.ecore.io.fd.open_file'(path, 1))) iterator);
    OpenFileForWriting: path  => PortOutput clone init: ((FDByteWriter clone) initWithFileDescriptor: (((FileDescriptor clone) init: #'ecosphere.ecore.io.fd.open_file'(path, 6))));
    OpenFile:           path  => OpenFileDescriptor: ((FileDescriptor clone) init: #'ecosphere.ecore.io.fd.open_file'(path, 7));
    OpenFile: path Mode: mode => OpenFile: path;  "TODO: Mode objects"

    WithOpenFileForReading: path Do: block => (
        |
            port <- OpenFileForReading: path,
            val  <- block value(port)
        |
        port close.  "TODO: Unwind-Protect!"
      ^ val
    );

    SlurpFile: file => WithOpenFileForReading: file Do: [ :in |
        | sw <- StringWriter new |
        in do: [ :c | sw << c ].
      ^ sw build
    ];

    ParseFile: file => (SlurpFile: file) parse;
    EvaluateFile: file InEnv: env => (ParseFile: file) evaluateInEnv: env;
    EvaluateFile: file InEnv: env Host: host => (ParseFile: file) evaluateInEnv: env Host: host;

    protected loadHooks <- #<:std/maybe/No>;

    InstallLoadHook: hook => (
        loadHooks no: [ loadHooks <- Yes: std util newVector ].
        (loadHooks yes) add: hook.
    );

    Import: file Path: path In: host => (
      (out << 'Importing: ' << file << ' ...') newline commit.

      "
          The load hooks get cleared after each file import, so they need to reinstall themselves after they were run.
          This is not the most elegant solution, but it is good enough for now.
      "
      loadHooks yes: [ :hooks | loadHooks <- No. hooks do: [ :hook | hook value(file) ] ].

      |
        env <- {
          static with inherited _ = #<:std/Clonable>;
          with lobby = #<:lobby>;

          here, $package;
          init: _here pack: _pack => (
            here <- _here.
            $package <- _pack.
          );
        }
      |
      EvaluateFile: file InEnv: (env clone init: path pack: host) Host: host
    );
    Import: file => Import: file Path: (std os files here) In: lobby;
}
