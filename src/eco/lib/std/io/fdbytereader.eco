
#=std/io/FDByteReader: {
    static with inherited parent = #<:std/Clonable>;
    with inherited trait = #<:std/util/iterators/IteratorTrait>;

    protected fd;
    protected buffer;
    protected readHead;
    protected writeHead;
    protected closed;

    initWithFileDescriptor: _fd => (
        fd        <- _fd.
        buffer    <- std util newBlob: 1024.
        readHead  <- 0.
        writeHead <- 0.
        closed    <- false.
      ^ self
    );

    protected bufferEmpty => readHead >= writeHead;

    protected refresh => (
        readHead  <- 0.
        writeHead <- (fd readIntoBlob: buffer).
    );
    protected optionalRefresh => bufferEmpty if: [ refresh ];

    hasNextByte => (
        closed if: [ ^ false ].
        optionalRefresh.
        bufferEmpty if: [ closed <- true. ^ false ].
      ^ true
    );
    readByte => (
        optionalRefresh.
        bufferEmpty if: [
          ^ 0
        ] else: [
            | b <- buffer at: readHead |
            readHead <- readHead + 1.
          ^ b
        ]
    );
    peekByte => (
        optionalRefresh.
        bufferEmpty if: [
          ^ 0
        ] else: [
          ^ buffer at: readHead
        ]
    );
    close => fd close;

    forward => ( readByte. self );

    has => hasNext;
    hasNext => hasNextByte;

    current => peekByte;
    next => [ forward ] returns: current;

    writeOn: w => w << 'an fd byte reader';
}
