
#=std/io/Writer: {
    static with inherited _ = #<:std/Clonable>;

    port;

    protected stack;

    with inherited trait = {
        static with inherited _ = #<:std/Trait>;

        init: _port => (
            port  <- _port.
            stack <- std util newVector.
          ^ self
        );

        byte<< b => port byte<< b;
        char<< c => port char<< c;
        commit   => port commit;
        close    => port close;

        << object => (
            (stack contains: object) if: [
                  << '#<ref:?cyclic>'.
                ^ self
            ].

            stack add: object.
            [
                object writeOn: self."
                ((std reflect PublicInterfaceFor: object) implementsMessage: #'writeOn:')
                      if: [ object writeOn: self ]
                    else: [ << 'an object'       ]."
            ] ensure: [
                stack erase: (stack size - 1).
            ].

          ^ self
        );
        present<< object => self << object;

        newline => ( self << (char newline). ^ self );

        writeOn: w => w << 'a writer';
    };
}
