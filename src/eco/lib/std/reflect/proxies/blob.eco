
#=std/reflect/proxies/Blob: {
    static with inherited parent = #<:std/Clonable>;
    
    size => #'ecosphere.ecore.object.blob.size'(self);
    empty => size isZero;
    isEmpty => empty?;

    at: index => #'ecosphere.ecore.object.blob.at_int8'(self, index);
    at: index put: value => #'ecosphere.ecore.object.blob.at_put_int8'(self, index, value);

    from: collection => ( collection forEach: [ :i, :v | at: i put: v ]. ^ self );

    with inherited iterations = #<:std/util/StandardListIterations>;
    with inherited conversions = #<:std/util/StandardListConversions>;
    with inherited access = #<:std/util/StandardListAccess>;
    with inherited search = #<:std/util/StandardListSearch>;

    iterator => ((std util iterators IndexIterator) clone) init: self;

    writeOn: writer => (
        (size < 128) if: [
            writer << '#['.
            forEach: [ :i, :e | (i > 0) if: [ writer << ', ' ]. writer << e ].
            writer << ']'.
        ] else: [
            writer << '<blob: ' << size << '>'
        ]
    );
}
