
#=std/reflect/proxies/Float: {
    static with inherited parent = #<:std/Singleton>;

    with inherited basic_math = {
        +    other => #'ecosphere.ecore.math.add'(self, other);
        -    other => #'ecosphere.ecore.math.sub'(self, other);
        *    other => #'ecosphere.ecore.math.mul'(self, other);
        /    other => #'ecosphere.ecore.math.div'(self, other);
        mod: other => #'ecosphere.ecore.math.mod'(self, other);
    };

    with inherited comparisons = {
        < other    => #'ecosphere.ecore.math.less'(self, other);
        == other   => #'ecosphere.ecore.is'(self, other);
        != other   => (self == other) not;
        <= other   => [ self < other ] or: [ self == other ];
        > other    => (self <= other) not;
        >= other   => (self < other) not;
    };

    with inherited min_max = {
        min: other => (self < other) if: [ self  ] else: [ other ];
        max: other => (self < other) if: [ other ] else: [ self  ];
    };

    with inherited checks = {
        isZero        => (self == 0 asFloat);
        isNotZero     => isZero not;
        isNegative    => self < 0 asFloat;
        isNotNegative => isNegative not;
        isPositive    => self >= 0 asFloat;
        isStrictlyPositive => self >= 0 asFloat;
        isBetween: a And: b => [ self >= a ] and: [ self <= b ];
    };

    with inherited misc = {
        negate => (0 asFloat - self);
        abs    => (self < 0) if: [ negate ] else: [ self ].
        sqrt   => #'ecosphere.ecore.math.sqrt'(self);
        sin    => #'ecosphere.ecore.math.sin'(self);
        cos    => #'ecosphere.ecore.math.cos'(self);
        tan    => #'ecosphere.ecore.math.tan'(self);
    };

    with inherited conversions = {
        isFloat => true;
        asFloat => self;
        asInt => #'ecosphere.ecore.float.as_int'(self);
        integerPart => asInt;
        fractionalPart => self - integerPart;
    };

    writeOn: writer => (std util text writing NumberWriter) WriteFloat: self To: writer;
}
