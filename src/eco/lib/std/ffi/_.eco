
#=std/ffi: {
    static with inherited _ = #<:std/Module>;
    
    types = {
        protected GetTypeByIndex: index => #'ecosphere.ecore.ffi.type.by_index'(index);

        void => GetTypeByIndex: 0;

        bool => int8;

        uint8 => GetTypeByIndex: 1;
        sint8 => GetTypeByIndex: 2;
        int8  => sint8;
        byte  => uint8;

        uint16 => GetTypeByIndex: 3;
        sint16 => GetTypeByIndex: 4;
        int16  => sint16;

        uint32 => GetTypeByIndex: 5;
        sint32 => GetTypeByIndex: 6;
        int32  => sint32;

        uint64 => GetTypeByIndex: 7;
        sint64 => GetTypeByIndex: 8;
        int64  => sint64;

        float => GetTypeByIndex: 9;
        double => GetTypeByIndex: 10;

        uchar => GetTypeByIndex: 11;
        schar => GetTypeByIndex: 12;
        char  => schar;

        ushort => GetTypeByIndex: 13;
        sshort => GetTypeByIndex: 14;
        short  => sshort;

        uint => GetTypeByIndex: 15;
        sint => GetTypeByIndex: 16;
        int  => sint;

        ulong => GetTypeByIndex: 17;
        slong => GetTypeByIndex: 18;
        long  => slong;

        longdouble => GetTypeByIndex: 19;
        
        pointer => void pointer;
        string => GetTypeByIndex: 21;
        enum => int;
    };

    struct(...) => #'ecosphere.ecore.ffi.type.new_struct'(std util newArray(...));
    union(...) => #'ecosphere.ecore.ffi.type.new_union'(std util newArray(...));

    null => ((types pointer) alloc) assignNull;

    ForeignFunction = {
        static with inherited parent = #<:std/Clonable>;

        protected name,
        protected ptr,
        type;

        with inherited trait = {
            initWithName: _name Ptr: _ptr Type: _type => (
                name <- _name.
                ptr  <- _ptr.
                type <- _type.
              ^ self
            );

            value(...) => type invoke(ptr, ...);

            writeOn: w => w << 'the foreign function ' << name;
        };
    };

    SharedLibrary = {
        static with inherited parent = #<:std/Clonable>;

        protected name,
        protected library;

        with inherited trait = {
            initWithName: _name Library: _library => (
                name    <- _name.
                library <- _library.
              ^ self
            );

            symbol: name => (
                | sym <- #'ecosphere.ecore.ffi.object.dlsym'(library, name) |
                (sym == false) -> [ ^ No ].
              ^ Yes: sym
            );

            function: name type: t => (
                (symbol: name)
                    yes: [ :sym | Yes: (((std ffi ForeignFunction) clone) initWithName: name Ptr: sym Type: t) ]
                     no: [ No ]
            );

            writeOn: w => w << 'the shared library ' << name;
        };
    };

    StaticLibrary = {
        static with inherited parent = #<:std/Singleton>;
        
        symbol: name => (
            | sym <- #'ecosphere.ecore.ffi.object.dlsym'(name) |
            (sym == false) -> [ ^ No ].
          ^ Yes: sym
        );

        function: name type: t => (
            (symbol: name)
                yes: [ :sym | Yes: (((std ffi ForeignFunction) clone) initWithName: name Ptr: sym Type: t) ]
                 no: [ No ]
        );

        writeOn: w => w << 'the static library';
    };

    DLOpen: path => (
        | lib <- #'ecosphere.ecore.ffi.object.dlopen'(path) |
        (lib == false) -> [ ^ No ].
      ^ Yes: ((SharedLibrary clone) initWithName: path Library: lib)
    );

    Open: path => #'ecosphere.ecore.ffi.lib.open'(path);
}
