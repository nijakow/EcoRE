"
    master.eco - The Master Object
"

#=lobby: {
    with std = #<:std>;

    writeOn: writer => writer << 'lobby';
},

#=bootstrapper: {
    with lobby = #<:lobby>;

    InitTypes => (
        #'ecosphere.ecore.init.set_lobby'(#<:lobby>).
        #'ecosphere.ecore.init.set_true'(#<:std/bool/true>).
        #'ecosphere.ecore.init.set_false'(#<:std/bool/false>).
        #'ecosphere.ecore.init.set_basic_error'(#<:std/sys/error/InternalBasicError>).
        any <- #'ecosphere.ecore.constant.any'().
        #'ecosphere.ecore.init.set_proxy'(#'ecosphere.ecore.constant.type_type'(), #<:std/reflect/proxies/Type>).
        #'ecosphere.ecore.init.set_proxy'(#'ecosphere.ecore.constant.array_type'(), #<:std/reflect/proxies/Array>).
        #'ecosphere.ecore.init.set_proxy'(#'ecosphere.ecore.constant.blob_type'(), #<:std/reflect/proxies/Blob>).
        #'ecosphere.ecore.init.set_proxy'(#'ecosphere.ecore.constant.block_type'(), #<:std/reflect/proxies/Block>).
        #'ecosphere.ecore.init.set_proxy'(#'ecosphere.ecore.constant.code_type'(), #<:std/reflect/proxies/Code>).
        #'ecosphere.ecore.init.set_proxy'(#'ecosphere.ecore.constant.integer_type'(), #<:std/reflect/proxies/Int>).
        #'ecosphere.ecore.init.set_proxy'(#'ecosphere.ecore.constant.float_type'(), #<:std/reflect/proxies/Float>).
        #'ecosphere.ecore.init.set_proxy'(#'ecosphere.ecore.constant.character_type'(), #<:std/reflect/proxies/Char>).
        #'ecosphere.ecore.init.set_proxy'(#'ecosphere.ecore.constant.key_type'(), #<:std/reflect/proxies/Key>).
        #'ecosphere.ecore.init.set_proxy'(#'ecosphere.ecore.constant.string_type'(), #<:std/reflect/proxies/String>).
        #'ecosphere.ecore.init.set_proxy'(#'ecosphere.ecore.constant.interface_type'(), #<:std/reflect/proxies/Interface>).
        #'ecosphere.ecore.init.set_proxy'(#'ecosphere.ecore.constant.weakbox_type'(), #<:std/reflect/proxies/WeakBox>).
        #'ecosphere.ecore.init.set_proxy'(#'ecosphere.ecore.constant.ffifunc_type'(), #<:std/reflect/proxies/ffi/FFIFunc>).
        #'ecosphere.ecore.init.set_proxy'(#'ecosphere.ecore.constant.ffiobject_type'(), #<:std/reflect/proxies/ffi/FFIObject>).
        #'ecosphere.ecore.init.set_proxy'(#'ecosphere.ecore.constant.ffitype_type'(), #<:std/reflect/proxies/ffi/FFIType>).
        #'ecosphere.ecore.init.set_proxy'(#'ecosphere.ecore.constant.ffilib_type'(), #<:std/reflect/proxies/ffi/FFILib>).
    );

    InitIO => (
        std io in  <- (std util text utf8 UTF8Iterator) clone init: (((std io FDSegmentReader) clone initWithFileDescriptor: ((std io FileDescriptor) clone init: 0)) iterator).
        std io out <- #<std/io/Writer> new: (((std io PortOutput) clone) init: ((std io FDByteWriter) clone initWithFileDescriptor: (((std io FileDescriptor) clone) init: 1))).
    );

    InitProcesses => (
        std sys finalization StartFinalizationProcess.
    );

    Quote => (
        io out newline.
        (io out << '      Grant me wings that I might fly') newline.
        (io out << '              - VNV Nation, "Beloved"') newline.
        io out newline.
    );

    Init => (
        InitTypes.
        InitIO.
        InitProcesses.

        Quote.

        (std io out << 'EcoRE v' << (#'ecosphere.ecore.init.version_string'()) << ' online and ready.') newline.
        
        | modules <- (std os files here / '..' / '..' / 'eco' / 'modules' / '_.eco') import |
        modules app bootstrap Main.
      ^ self.
        
        (std io out) newline commit.
        (std io out << 'Interactive REPL started.') newline commit.

        |
            parser <- (lang eco controller) CreateParserForCharIterator: (io in)
        |

        parser exprDo: [ :expr |
            |
                env  <- {
                    addVar: name => #'ecosphere.ecore.reflect.add_value_slot'(self, -1, 0, any, name, false);
                    ui => (
                        | modules <- (std os files here / '..' / '..' / 'eco' / 'modules' / '_.eco') import |
                        modules app bootstrap Main.
                    );
                    writeOn: writer => writer << '<session>';
                    with inherited parent = #<:std/Clonable>;
                },
                result
            |

            [
                | result <- expr evaluateInEnv: env |
                io out << '        ' << result.
                io out newline
            ] catch: [ :e |
                (io out << '--== Error Caught ==--') newline commit.
                (io out << '>>> ' << e) newline commit.
            ].
            io out commit.
        ]
    );
},

#<:bootstrapper> Init.
