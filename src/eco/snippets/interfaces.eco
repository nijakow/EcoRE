
{
    static with inherited _ = std Module;

    IComparable = %[
        [self] == [self] other,
        [self] < [self] other,
    ],

    INumber = %[
        with IComparable;

        [self] + [self] other,
        [self] - [self] other,
        [self] * [self] other,
        [self] / [self] other,
    ],

    IInt = %[
        with INumber;
    ],

    IIndexable = %[
        at: index,
        [IInt] size
    ],

    IMutableIndexable = %[
        with IIndexable;

        at: index put: value,
    ],

    ISequence = %[
        forEach: block,
        do: block
    ],

    ISequenceAcceptor = %[
        from: [ISequence] sequence
    ],

    IConvertibleSequence = %[
        into: [ISequenceAcceptor] other
    ],

    IIterator = %[
        has,
        hasNext,

        current,
        forward,
        next,

        withReset: block,
        check: element,
        peek: [ISequence] sequence
    ]
}
