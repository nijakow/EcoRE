{
        static with inherited _ = std Module;

        own ModulePresentationMorph = {
            static with inherited _ = std Clonable;
            with inherited own Morph = (($package gfx morphic) morphs) Morph;

            with inherited trait = {
                static with inherited _ = std Trait;

                init => (
                    $(Morph) initWithManyChildren.
                  ^ self
                );

                renderOn: renderer => (
                    renderer setColor: (renderer theme backgroundColor).
                    renderer fillRectX: 0 Y: 0 W: width H: height.

                    renderer setColor: (renderer theme lineColor).
                    renderer drawRectX: 0 Y: 0 W: width H: height.
                    renderer drawPointRectX: 0 Y: 0 W: (width) H: (height) Step: 10.

                    renderer withClipW: width H: height Do: [
                        $(Morph) renderOn: renderer.
                    ].
                );

                handleRemoveMorph: morph => (
                    (morph meta: #'ecosphere.eve.morphs.ValueMorph.value') yes: [ :v |
                        (std io out << 'Removed value: ' << v) newline commit.
                      ^ true
                    ].
                    (morph meta: #'ecosphere.eve.morph.property.type') yes: [ :type |
                        (#'ecosphere.eve.morphs.ModuleMorph' == type) if: [
                            (std io out << 'Removed module morph') newline commit.
                          ^ true
                        ].
                    ].
                  ^ true
                );

                handleDropMorph: morph At: point Meta: meta => (
                    (morph meta: #'ecosphere.eve.morphs.ValueMorph.value') yes: [ :v |
                        | gb <- globalOffset, mgb <- morph globalOffset |
                        (tryAdd: morph) -> [
                            (std io out << 'Added value: ' << v) newline commit.
                            morph moveTo: (mgb - gb).
                          ^ true
                        ].
                    ].
                    (morph meta: #'ecosphere.eve.morph.property.type') yes: [ :type |
                        (#'ecosphere.eve.morphs.ModuleMorph' == type) if: [
                            | gb <- globalOffset, mgb <- morph globalOffset |
                            (tryAdd: morph) -> [
                                (std io out << 'Added module morph') newline commit.
                                morph moveTo: (mgb - gb).
                              ^ true
                            ].
                        ].
                    ].
                  ^ false
                );

                handleScrollX: sx Y: sy At: point HandMorph: hand => (
                    (xLayout isRigid) if: [
                        rigidWidth: (width + (25 * sx)).
                    ].
                    (yLayout isRigid) if: [
                        rigidHeight: (height + (25 * sy)).
                    ].
                    layoutChanged.
                  ^ true
                );
            };
        };

        own ValueMorph = {
            static with inherited _ = std Clonable;
            with inherited own ClampFrameMorph = (($package gfx morphic) morphs) ClampFrameMorph;

            with inherited trait = {
                static with inherited _ = std Trait;
                app <- $package;

                init => (
                    $(ClampFrameMorph) init.
                  ^ self
                );

                handleClick: click At: point HandMorph: hand => (
                    (click isMiddle) if: [
                        (meta: #'ecosphere.eve.morphs.ValueMorph.value') yes: [ :v |
                            (app framework actions open) OutlinerForObject: v.
                            remove.
                        ].
                      ^ true
                    ].
                    hand grab: self.
                  ^ true
                );

                handleDropMorph: morph At: point Meta: meta => (
                    "Just for experimental purposes: This is how you can check if the dropped morph is a ValueMorph."
                    (morph meta: #'ecosphere.eve.morphs.ValueMorph.value') yes: [ :v |
                        (std io out << 'Dropped value: ' << v) newline commit.
                      ^ false
                    ].
                  ^ $(ClampFrameMorph) handleDropMorph: morph At: point Meta: meta
                );

                writeOn: w => w << 'a value morph';
            };
        };
    }
