
{
    static with inherited _ = std Classlike;
    protected presentation = $package;

    own Instance = {
        static with inherited _ = std Clonable;

        emitter;

        with inherited trait = {
            static with inherited _ = std Trait;
            protected presentation = $package;

            initWithEmitter: _emitter => (
                emitter <- _emitter.
              ^ self
            );

            byte<< b => self << b;
            char<< c => (
                emitter emit: c presentation: (presentation presentations) CharacterPresentation.
              ^ self
            );

            newline  => emitter newline;
            commit   => self;

            << object => (
                ((std reflect PublicInterfaceFor: object) implementsMessage: #'presentOn:')
                      if: [ object presentOn: self ]
                    else: [ << 'an object'         ].  
            );

            present<< object => (
                |
                    subpresenter <- (presentation Presenter) new,
                    substream    <- (presentation PresentationStream) NewWithPresenter: subpresenter,
                |

                ((std reflect PublicInterfaceFor: object) implementsMessage: #'presentOn:')
                      if: [ object presentOn: substream ]
                    else: [ substream << 'an object'    ].
                
                emitter emit: subpresenter presentation: (presentation presentations) PresenterPresentation.

              ^ self
            );

            newline => ( self << (char newline). ^ self );

            writeOn: w => w << 'a presentation stream';
        };
    };

    NewWithEmitter: emitter => (Instance clone) initWithEmitter: emitter;
    NewWithPresenter: presenter => NewWithEmitter: ((presentation PresentationEmitter) NewWithPresenter: presenter);
}
