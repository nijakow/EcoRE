
{
    static with inherited _ = std Module;

    own PresenterPresentation = {
        static with inherited _ = std Singleton;
        with inherited own Presentation = $package Presentation;

        with inherited trait = {
            static with inherited _ = std Trait;

            renderObject: object On: renderer Bounds: bounds => (
                renderer withPushedRelativeOffset: bounds origin Do: [
                    (object object) renderOn: renderer.
                ].
            );

            measureMinWidthOf: object => (object object) minWidth;
            measureMinHeightOf: object => (object object) minHeight;

            isPresenterPresentation => true;

            writeOn: w => w << 'the generic presenter presentation';
        };
    };

    own BasicPresentation = {
        static with inherited _ = std Singleton;
        with inherited own Presentation = $package Presentation;

        with inherited trait = {
            protected own BasicPresentableObject = {
                static with inherited _ = std Clonable;
                with inherited own PresentableObject = $package PresentableObject;

                cachedTextualRepresentation <- No;

                with inherited trait = {
                    static with inherited _ = std Trait;

                    initWithObject: _object Presentation: _presentation => (
                        $(PresentableObject) initWithObject: _object Presentation: _presentation.
                      ^ self
                    );

                    cachedTextualRepresentation: repr => cachedTextualRepresentation <- Yes: repr;
                };
            };

            protected font => presentation app gfx eve DefaultFont;

            protected presentableObjectType => BasicPresentableObject;

            protected forceTextualRepresentationOf: object => (
                (object cachedTextualRepresentation) no: [
                    | sw <- (std io StringWriter) new |

                    sw << (object object).

                    object cachedTextualRepresentation: sw build.
                ].

              ^ (object cachedTextualRepresentation) yes
            );

            renderObject: object On: renderer Bounds: bounds => (
                renderer setColor: (renderer theme textColor).
                renderer drawString: (forceTextualRepresentationOf: object) X: bounds x Y: bounds y Font: font.
            );

            measureMinWidthOf: object => font widthOfText: (forceTextualRepresentationOf: object);
            measureMinHeightOf: object => font heightOfText: (forceTextualRepresentationOf: object);

            writeOn: w => w << 'the basic presentation';
        };
    };

    own MorphPresentation = {
        static with inherited _ = std Singleton;
        with inherited own Presentation = $package Presentation;

        with inherited trait = {
            static with inherited _ = std Trait;

            renderObject: object On: renderer Bounds: bounds => (
                renderer withPushedOffset: (renderer offset + bounds origin) Do: [
                    (object object) presentOnRenderer: renderer.
                ].
            );

            measureMinWidthOf: object => (object object) minWidth;
            measureMinHeightOf: object => (object object) minHeight;

            writeOn: w => w << 'the generic morph presentation';
        };
    };

    own StringPresentation = {
        static with inherited _ = std Singleton;
        with inherited own Presentation = $package Presentation;

        with inherited trait = {
            static with inherited _ = std Trait;

            font => presentation app gfx eve DefaultFont;

            renderObject: object On: renderer Bounds: bounds => (
                renderer setColor: (renderer theme textColor).
                renderer drawString: (object object) X: bounds x Y: bounds y Font: font.
            );

            measureMinWidthOf: object => font widthOfText: (object object);
            measureMinHeightOf: object => font heightOfText: (object object);

            writeOn: w => w << 'the generic string presentation';
        };
    };

    own CharacterPresentation = {
        static with inherited _ = std Singleton;
        with inherited own Presentation = $package Presentation;

        with inherited trait = {
            static with inherited _ = std Trait;

            font => presentation app gfx eve DefaultFont;

            renderObject: object On: renderer Bounds: bounds => (
                renderer setColor: (renderer theme textColor).
                renderer drawChar: (object object) X: bounds x Y: bounds y Font: font.
            );

            measureMinWidthOf: object => font widthOfChar: (object object);
            measureMinHeightOf: object => font heightOfChar: (object object);

            isSelectable => false;

            writeOn: w => w << 'the generic character presentation';
        };
    };

    own ColorSquarePresentation = {
        static with inherited _ = std Singleton;
        with inherited own Presentation = $package Presentation;

        with inherited trait = {
            static with inherited _ = std Trait;

            font => presentation app gfx eve DefaultFont;

            renderObject: object On: renderer Bounds: bounds => (
                renderer setColor: (object object).
                renderer fillRectX: (bounds x + 2) Y: (bounds y + 2) W: ((measureMinWidthOf: object) - 4) H: ((measureMinHeightOf: object) - 4).
            );

            measureMinWidthOf: object => font height;
            measureMinHeightOf: object => font height;

            isSelectable => true;

            writeOn: w => w << 'the generic character presentation';
        };
    };
}
