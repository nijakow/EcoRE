
{
    static with inherited _ = std Clonable;

    protected boundedPresentables,
    protected cachedWidth <- 0,
    protected cachedHeight <- 0;

    with inherited trait = {
        static with inherited _ = std Trait;
        protected presentation = $package;
        protected geometry => (presentation app) math geometry;

        init => (
            boundedPresentables <- std util newVector.
          ^ self
        );

        minWidth => cachedWidth;
        minHeight => cachedHeight;

        presentObject: object Bounds: bounds Presentation: presentation => (
          ^ presentPresentableObject: (presentation associateWith: object) Bounds: bounds
        );

        presentPresentableObject: object Bounds: bounds => (
            boundedPresentables add: (presentation PresentedObject clone initWithPresentableObject: object Bounds: bounds).
            cachedWidth  <- cachedWidth max: (bounds x + bounds w).
            cachedHeight <- cachedHeight max: (bounds y + bounds h). 
          ^ self
        );

        presentPresentableObject: object At: offset => (
            presentPresentableObject: object Bounds: (geometry Rectangle Origin: offset W: object minWidth H: object minHeight).
          ^ self
        );

        presentPresentableObject: object => (
            presentPresentableObject: object At: (geometry Point X: 0 Y: 0).
          ^ self
        );

        boundedPresentableObjectsDo: block => (
            boundedPresentables do: [ :each | block value(each) ].
          ^ self
        );

        boundedPresentableObjectsAt: point Do: block => (
            boundedPresentables do: [ :each |
                (each bounds containsPoint: point) if: [ block value(each) ].
            ].
          ^ self
        );

        allPresentableObjectsAt: point WithBoundsDo: block Offset: offset => (
            boundedPresentableObjectsAt: point Do: [ :each |
                block value(each presentableObject, (each bounds) translateBy: offset).
                ((each presentableObject presentation) isPresenterPresentation) if: [
                    (each presentableObject object) allPresentableObjectsAt: (point - (each bounds) origin) WithBoundsDo: block Offset: (offset + (each bounds) origin).
                ].
            ].
        );

        allPresentableObjectsAt: point WithBoundsDo: block => allPresentableObjectsAt: point WithBoundsDo: block Offset: (geometry Point X: 0 Y: 0);

        renderOn: renderer => (
            boundedPresentables do: [ :each |
                (each presentableObject) renderOn: renderer Bounds: (each bounds)
            ].
        );

        renderOn: renderer MousePos: mousePos => (
            renderOn: renderer.

            renderer setColor: (renderer theme lineColor).

            |
                lastBounds <- No
            |

            allPresentableObjectsAt: mousePos WithBoundsDo: [ :each :bounds |
                ((each presentation) isSelectable) if: [
                    lastBounds <- Yes: bounds.
                ].
            ].

            lastBounds yes: [ :bounds |
                renderer drawRect: bounds.
            ].
        );

        writeOn: w => w << 'a presenter';
    };
}
