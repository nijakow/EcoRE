
{
    static with inherited _ = std Module;
    with app <- $package;

    own morphs = (here / 'morphs' / '_.eco') importIn: $package;

    protected MakePresentationMorphFor: v Ui: ui => (
        | sw <- (std io StringWriter) new |

        sw << v.
        
      ^ ui Label: sw build
    );

    protected MakeValueMorphFor: v Ui: ui => (
        | m <- (morphs ValueMorph) new |

        m add: (ui Padding(5, MakePresentationMorphFor: v Ui: ui)).

      ^ m
    );

    protected MakeModuleMorphUi: ui => (
        | m <- (morphs ValueMorph) new, mp <- morphs ModulePresentationMorph new |

        m add: (ui Padding(5, mp)).

        mp rigidWidth: 300.
        mp rigidHeight: 200.

        m xLayout: ((app gfx morphic) layouts ShrinkWrap).
        m yLayout: ((app gfx morphic) layouts ShrinkWrap).

      ^ m
    );

    ValueMorphFor: v Ui: ui => (
        | m <- MakeValueMorphFor: v Ui: ui |

        m meta: #'ecosphere.eve.morph.property.type' is: #'ecosphere.eve.morphs.ValueMorph'.
        m meta: #'ecosphere.eve.morphs.ValueMorph.value' is: v.

      ^ m
    );

    OpenValueMorphFor: v => (framework actions open) ui BuildAndOpen: [ :ui | ValueMorphFor: v Ui: ui ];
    OpenModuleMorph => (framework actions open) ui BuildAndOpen: [ :ui | MakeModuleMorphUi: ui ];

    Main => (
        OpenValueMorphFor: 42.
        OpenValueMorphFor: 'Hello World'.
        OpenValueMorphFor: (std os files here).
        OpenModuleMorph.
      ^ self
    );
}
