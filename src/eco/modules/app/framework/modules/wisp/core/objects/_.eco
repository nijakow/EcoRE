
{
    static with inherited _ = std Module;
    with app <- $package;

    own morphs = (here / 'morphs' / '_.eco') importIn: $package;

    protected MakePresentationMorphFor: v Presentation: thePresentation Ui: ui => (
        | presentation <- (framework modules wisp) core presentation |

        |
            po        <- thePresentation link: v,
            presenter <- (presentation) Presenter new,
            presenterMorph <- (presentation) PresenterMorph clone initWithPresenter: presenter
        |

        presenter presentPresentableObject: po At: (app math geometry point Origin).
        
      ^ presenterMorph
    );

    protected MakePresentationMorphFor: v Ui: ui => (
        | presentation <- (framework modules wisp) core presentation |

        |
            presenter      <- (presentation) Presenter new,
            stream         <- (presentation) PresentationStream NewWithPresenter: presenter,
            presenterMorph <- (presentation) PresenterMorph clone initWithPresenter: presenter
        |

        stream present<< v.
        
      ^ presenterMorph
    );

    protected MakeValueMorphFor: v Presentation: presentation Ui: ui => (
        | m <- (morphs ValueMorph) new |

        m add: (ui Padding(5, ui Stacked(ui Padding(5, MakePresentationMorphFor: v Presentation: presentation Ui: ui), ui BackgroundColorMorph))).

      ^ m
    );

    protected MakeValueMorphFor: v Ui: ui => (
        | m <- (morphs ValueMorph) new |

        m add: (ui Padding(5, ui Stacked(ui Padding(5, MakePresentationMorphFor: v Ui: ui), ui BackgroundColorMorph))).

      ^ m
    );

    protected MakeModuleMorphUi: ui => (
        | m <- (morphs ValueMorph) new, mp <- morphs ModulePresentationMorph new |

        m add: (ui Padding(5, mp)).

        mp rigidWidth: 300.
        mp rigidHeight: 200.

        m xLayout: ((app gfx morphic) layouts ShrinkWrap).
        m yLayout: ((app gfx morphic) layouts ShrinkWrap).

        m meta: #'ecosphere.eve.morph.property.type' is: #'ecosphere.eve.morphs.ModuleMorph'.

      ^ m
    );

    ValueMorphFor: v Presentation: presentation Ui: ui => (
        | m <- MakeValueMorphFor: v Presentation: presentation Ui: ui |

        m meta: #'ecosphere.eve.morph.property.type' is: #'ecosphere.eve.morphs.ValueMorph'.
        m meta: #'ecosphere.eve.morphs.ValueMorph.value' is: v.

      ^ m
    );

    ValueMorphFor: v Ui: ui => (
        | m <- MakeValueMorphFor: v Ui: ui |

        m meta: #'ecosphere.eve.morph.property.type' is: #'ecosphere.eve.morphs.ValueMorph'.
        m meta: #'ecosphere.eve.morphs.ValueMorph.value' is: v.

      ^ m
    );

    OpenValueMorphFor: v => (framework actions open) ui BuildAndOpen: [ :ui | ValueMorphFor: v Ui: ui ];
    OpenModuleMorph => (framework actions open) ui BuildAndOpen: [ :ui | MakeModuleMorphUi: ui ];

    Main => (
        OpenValueMorphFor: 42.
        OpenValueMorphFor: 'Hello World'.
        OpenValueMorphFor: (std os files here).
        OpenModuleMorph.
      ^ self
    );
}
