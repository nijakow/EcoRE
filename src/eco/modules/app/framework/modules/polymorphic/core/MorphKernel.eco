
{
    static with inherited _ = std Classlike;

    own Instance = {
        static with inherited _ = std Clonable;

        behavior,
        seed,
        protected children;

        with inherited trait = {
            static with inherited _ = std Trait;
            protected polymorphic = $package;

            initWithBehavior: _behavior Seed: _seed => (
                behavior <- _behavior.
                seed     <- _seed.
                children <- No.
              ^ self
            );

            initWithBehavior: _behavior => initWithBehavior: _behavior Seed: self;

            add: child => (
                children no: [ children <- Yes: (std util newVector) ].
                (children yes) add: child.
              ^ self
            );

            instantiate => (
                |
                    instance <- ((polymorphic core) MorphInstance) Kernel: self
                |
                
                children yes: [ :children |
                    children do: [ :child |
                        (instance structure) add: (child instantiate).
                    ].
                ].

              ^ instance
            );

            writeOn: w => w << 'a morph kernel';
        };
    };

    Behavior: behavior Seed: seed => (Instance clone) initWithBehavior: behavior Seed: seed;
    Behavior: behavior            => (Instance clone) initWithBehavior: behavior;
}
