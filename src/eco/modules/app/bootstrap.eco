
{
    static with inherited _ = std Module;
    with $battery = $;

    protected morphic => gfx morphic;
    protected ui      => gfx ui;

    protected cachedHere <- here;

    openInWorld: world => (
        framework context world: world.

        |
            menuMorph <- build
        |

        world open: menuMorph.

        menuMorph moveToX: ((world width  / 2) - (menuMorph width  / 2))
                        Y: ((world height / 2) - (menuMorph height / 2)).

      ^ menuMorph
    );

    framework: fr => (
        (fr context) world: (framework context DefaultWorld).
        framework <- fr.
    );

    ReloadFramework => framework: ((cachedHere / 'framework' / '_.eco') importIn: ($battery));

    reset => (
      ^ self
    );

    build => (
        |
            app <- $battery
        |

        ui Window(280, 300,
            ui VBox(
                ui Center(ui TextField: 'Spread your wings and fly!'),
                ui VBox(
                    ui Button(ui Center(ui Label: 'Outliner'),
                            $[ :(app) :sender | (app framework actions open) OutlinerForObject: app ]
                                    bind(app))
                        ~ xLayout: ui layouts Flexible
                        ~ yLayout: ui layouts Flexible,
                    ui Button(ui Center(ui Label: 'Files'),
                            $[ :(app) :sender | (app framework actions open) Path: (std os files here / '..' / '..' / '..') ]
                                    bind(app))
                        ~ xLayout: ui layouts Flexible
                        ~ yLayout: ui layouts Flexible,
                    ui Button(ui Center(ui Label: 'Apps'),
                            $[ :(app) :sender | (app framework actions open) Path: (std os files here / '..' / '..' / 'eco' / 'apps') ]
                                    bind(app))
                        ~ xLayout: ui layouts Flexible
                        ~ yLayout: ui layouts Flexible,
                    ui Button(
                        ui Center(ui Label: 'New'),
                        $[ :(app) :sender |
                                (app framework actions open) ui BuildAndOpenContextMenu: [ :cmb |
                                    cmb item: 'Shell' does: $[ :(app) |
                                        (app framework actions open) tools Shell.
                                    ] bind(app).
                                    cmb item: 'Module' does: $[ :(app) |
                                        (app framework actions open) tools ShellWithText: '"\n    A module.\n"\n\n{\n    isa std Module;\n    with app <- app;\n\n    \n}\n'.
                                    ] bind(app).
                                    cmb item: 'Clonable' does: $[ :(app) |
                                        (app framework actions open) tools ShellWithText: '"\n    An object.\n"\n\n{\n    isa std Clonable;\n\n    {\n        \n    }\n}\n'.
                                    ] bind(app).
                                ].
                        ] bind(app)
                    ) ~ xLayout: ui layouts Flexible
                      ~ yLayout: ui layouts Flexible,
                )
            )
        )
    );

    Main => (
        morphic RunWithWidth: 1400 Height: 800 App: self;
    );
}
