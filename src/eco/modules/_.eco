(
    |
        eve <- (here / 'gfx' / 'eve' / '_.eco') import,

        LoadAnimator = {
            static with inherited _ = std Module;

            protected eve,
            protected mod,
            protected running <- true,
            protected terminated <- false,
            protected consoleLines <- std util newVector;

            StopRunning => running <- false;

            StartRunning: _eve Mod: _mod => (
                eve <- _eve.
                mod <- _mod.
                AddLine: 'Booting the UI ...'.
                #'ecosphere.ecore.fiber.start'((std reflect Mirror: self) slot: #'Tick' ~ slotValue, self).
            );

            WaitUntilTerminated => (
                [ :break |
                    (terminated) if: [ break value ].
                    #'ecosphere.ecore.fiber.yield'().
                ] repeatWithBreak.
            );

            AddLine: path => (
                consoleLines add: (#'ecosphere.ecore.time.since_start'() ~> path).
                (consoleLines size > 5) if: [
                    consoleLines erase: 0.
                ].
            );

            InstallLoadHook => (
                std io InstallLoadHook: $[ :(us) :path |
                    us AddLine: 'Loading ' + path + ' ...'.
                    us InstallLoadHook.
                ] bind(self).
            );

            AnimateOpeningWindow => (
                |
                    animationStartTime <- #'ecosphere.ecore.time.since_start'(),
                    windowColor        <- ((mod gfx morphic) misc color ColorTheme) desktopColor
                |

                [
                    | time <- #'ecosphere.ecore.time.since_start'() |
                    eve SetColorRGB(0, 0, 0).
                    eve Clear.
                    eve SetColorRGB(255, 255, 255).

                    |
                        animationFactorComplete <- (time - animationStartTime) / 1.0,
                    |

                    (animationFactorComplete > 1.0) if: [ ^ self ].

                    |
                        dx <- ((eve CurrentWidth / 2) * animationFactorComplete) asInt,
                        dy <- ((eve CurrentHeight / 2) * animationFactorComplete) asInt,
                    |

                    eve DrawRect(eve CurrentWidth / 2 - dx, eve CurrentHeight / 2 - dy, dx * 2, dy * 2).
                    eve SetColorRGB(windowColor r, windowColor g, windowColor b).
                    eve FillRect(eve CurrentWidth / 2 - dx, eve CurrentHeight / 2 - dy, dx * 2, dy * 2).
                    
                    eve Render.
                    [ :break |
                        (eve PollEvent == 0) if: [ break value ].
                    ] repeatWithBreak.
                    (time - animationStartTime) < 1.0
                ] repeat.
            );

            Tick => (
                InstallLoadHook.

                |
                    centerText       <- 'The Ecosphere',
                    centerTextFont   <- eve DefaultFont,
                    centerTextWidth  <- eve GetTextWidth(centerText),
                    centerTextHeight <- eve GetTextHeight(centerText),
                |

                |
                    lineHeight  <- centerTextHeight,
                    consoleFont <- eve DefaultFont,
                |

                [
                    (running not) if: [
                        AnimateOpeningWindow.
                        terminated <- true.
                      ^ self
                    ].

                    | time <- #'ecosphere.ecore.time.since_start'() |

                    eve SetColorRGB(0, 0, 0).
                    eve Clear.

                    eve SetColorRGB(255, 255, 255).

                    |
                        a1 <- (time * 100) asInt,
                        a2 <- a1 + 90,
                        r  <- 100
                    | 
                    eve DrawArc(eve CurrentWidth / 2, eve CurrentHeight / 2, r, a1, a2).
                    eve DrawArc(eve CurrentWidth / 2, eve CurrentHeight / 2, r, a1 + 180, a2 + 180).
                    
                    eve DrawText(centerText, (eve CurrentWidth / 2) - (centerTextWidth / 2), (eve CurrentHeight / 2) - (centerTextHeight / 2), centerTextFont).

                    |
                        lineCounter <- consoleLines size,
                    |
                    consoleLines forEach: [ :i :entry |
                        |
                            lineAge    <- time - entry first,
                            fadeFactor <- 1.0 / (lineCounter - i),
                            color      <- (255 * fadeFactor) asInt,
                        |
                        (fadeFactor > 0) if: [
                            eve SetColorRGB(color, color, color).
                            eve DrawText(entry second, lineHeight / 2, eve CurrentHeight - ((lineCounter - i) * lineHeight), consoleFont).
                        ]
                    ].

                    eve Render.

                    [ :break |
                        (eve PollEvent == 0) if: [ break value ].
                    ] repeatWithBreak.

                    #'ecosphere.ecore.fiber.yield'().
                ] repeat.
            );
        },

        modules <- {
            static with inherited _ = std Module;

            own eve,
            own document,
            own math,
            own gfx,
            own app
        }
    |

    (
        eve Init.
        eve InitEve.

        LoadAnimator StartRunning: eve Mod: modules.
    ).

    modules eve <- eve.
    modules document <- (here / 'document' / '_.eco') importIn: modules.
    modules math <- (here / 'math' / '_.eco') importIn: modules.
    modules gfx <- (here / 'gfx' / '_.eco') importIn: modules.
    modules app <- (here / 'app' / '_.eco') importIn: modules.

    LoadAnimator StopRunning.
    LoadAnimator WaitUntilTerminated.

  ^ modules
)
