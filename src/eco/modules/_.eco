(
    |
        eve <- (here / 'gfx' / 'eve' / '_.eco') import,

        LoadAnimator = {
            static with inherited _ = std Module;

            protected eve,
            protected running <- true;

            StopRunning => running <- false;

            StartRunning: _eve => (
                eve <- _eve.
                #'ecosphere.ecore.fiber.start'((std reflect Mirror: self) slot: #'Tick' ~ slotValue, self).
            );

            InstallLoadHook => (
                std io InstallLoadHook: $[ :(us) :path |
                    us InstallLoadHook.
                    (std io out << 'Hook: ' << path) newline commit.
                ] bind(self).
            );

            Tick => (
                InstallLoadHook.
                
                |
                    centerText       <- 'The Ecosphere',
                    centerTextFont   <- eve DefaultFont,
                    centerTextWidth  <- eve GetTextWidth(centerText),
                    centerTextHeight <- eve GetTextHeight(centerText),
                |

                |
                    loadingText       <- 'Loading...',
                    loadingTextFont   <- eve DefaultFont,
                    loadingTextWidth  <- eve GetTextWidth(loadingText),
                    loadingTextHeight <- eve GetTextHeight(loadingText),
                |

                [
                    (running not) if: [ ^ self ].

                    | time <- #'ecosphere.ecore.time.since_start'() |

                    eve SetColorRGB(0, 0, 0).
                    eve Clear.

                    eve SetColorRGB(255, 255, 255).

                    |
                        a1 <- (time * 100) asInt,
                        a2 <- a1 + 90,
                        r  <- 100
                    | 
                    eve DrawArc(eve CurrentWidth / 2, eve CurrentHeight / 2, r, a1, a2).
                    eve DrawArc(eve CurrentWidth / 2, eve CurrentHeight / 2, r, a1 + 180, a2 + 180).
                    
                    eve DrawText(centerText, (eve CurrentWidth / 2) - (centerTextWidth / 2), (eve CurrentHeight / 2) - (centerTextHeight / 2), centerTextFont).

                    eve DrawText(loadingText, 0, eve CurrentHeight - loadingTextHeight, loadingTextFont).

                    eve Render.

                    [ :break |
                        (eve PollEvent == 0) if: [ break value ].
                    ] repeatWithBreak.

                    #'ecosphere.ecore.fiber.yield'().
                ] repeat.
            );
        }
    |

    eve Init.
    eve InitEve.

    LoadAnimator StartRunning: eve.


    |
        modules <- {
            static with inherited _ = std Module;

            own eve,
            own document,
            own math,
            own gfx,
            own app
        }
    |

    modules eve <- eve.
    modules document <- (here / 'document' / '_.eco') importIn: modules.
    modules math <- (here / 'math' / '_.eco') importIn: modules.
    modules gfx <- (here / 'gfx' / '_.eco') importIn: modules.
    modules app <- (here / 'app' / '_.eco') importIn: modules.

    LoadAnimator StopRunning.

  ^ modules
)
