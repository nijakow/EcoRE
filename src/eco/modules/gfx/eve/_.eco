{
    static with inherited _ = std Module;

    input = (here / 'input' / '_.eco') importIn: self.

    protected lib,
    protected DefaultFontPath <- (here / 'resources' / 'VictorMono-Regular.ttf') path;

    protected Eve_Init,
    protected Eve_Terminate,
    protected Eve_CurrentWidth,
    protected Eve_CurrentHeight,
    protected Eve_PushFrame,
    protected Eve_PopFrame,
    protected Eve_TranslateI2,
    protected Eve_SetColorRGBA,
    protected Eve_SetColorRGB,
    protected Eve_Clip,
    protected Eve_DrawPoint,
    protected Eve_DrawLine,
    protected Eve_DrawArrow,
    protected Eve_DrawRect,
    protected Eve_FillRect,
    protected Eve_BlurRect,
    protected Eve_DrawPointRect,
    protected Eve_DrawRoundedRect,
    protected Eve_FillRoundedRect,
    protected Eve_DrawArc,
    protected Eve_DrawText,
    protected Eve_DrawChar,
    protected Eve_DrawTexture,
    protected Eve_Clear,
    protected Eve_Render,
    protected Eve_PollEvent,
    protected Eve_IsEventQuit,
    protected Eve_IsEventKeyDown,
    protected Eve_IsEventKeyUp,
    protected Eve_IsEventMouseMotion,
    protected Eve_IsEventMouseButtonDown,
    protected Eve_IsEventMouseButtonUp,
    protected Eve_IsEventMouseWheel,
    protected Eve_GetEventMouseX,
    protected Eve_GetEventMouseY,
    protected Eve_GetEventMouseButtonID,
    protected Eve_GetEventMouseScrollX,
    protected Eve_GetEventMouseScrollY,
    protected Eve_GetEventKeySym,
    protected Eve_GetEventKeyScancode,
    protected Eve_GetEventKeyMod,
    protected Eve_GetTextWidth,
    protected Eve_GetTextHeight,
    protected Eve_GetCharWidth,
    protected Eve_GetCharHeight,
    protected Eve_Delay,
    protected Eve_Font_New,
    protected Eve_Font_Delete,
    protected Eve_Font_GetTextWidth,
    protected Eve_Font_GetTextHeight,
    protected Eve_Font_GetCharWidth,
    protected Eve_Font_GetCharHeight,
    protected Eve_GetDefaultFont;

    protected Eve_Texture_NewFromImage,
    protected Eve_Texture_Delete,
    protected Eve_Texture_GetWidth,
    protected Eve_Texture_GetHeight;

    protected Eve_Font => ffi types void;
    protected Eve_Texture => ffi types void;

    DefaultFont;

    YScrollFactor <- 1;

    InitLinux => Setup: (std os files here / '..' / 'eve' / 'libeve.so') path;
    InitMac   => (
        Setup: (std os files here / '..' / 'eve' / 'libeve.dylib') path.
        YScrollFactor <- -1.
      ^ self
    );
    
    Init => (
        std os type
            ~ ifLinux: [ ^ InitLinux ]
            ~ ifMacOS: [ ^ InitMac   ].
        std sys error ThrowMessage: 'EVE is not supported on this platform'.
    );

    Setup: libpath => (
        lib <- (ffi DLOpen: libpath) yes.
        Eve_Init <- (lib function: #'Eve_Init' type: ((ffi types void) function(ffi types string, ffi types uint))) yes.
        Eve_Terminate <- (lib function: #'Eve_Terminate' type: ((ffi types void) function())) yes.
        Eve_CurrentWidth <- (lib function: #'Eve_CurrentWidth' type: ((ffi types uint) function())) yes.
        Eve_CurrentHeight <- (lib function: #'Eve_CurrentHeight' type: ((ffi types uint) function())) yes.
        Eve_PushFrame <- (lib function: #'Eve_PushFrame' type: ((ffi types void) function())) yes.
        Eve_PopFrame <- (lib function: #'Eve_PopFrame' type: ((ffi types void) function())) yes.
        Eve_TranslateI2 <- (lib function: #'Eve_TranslateI2' type: ((ffi types void) function(ffi types int, ffi types int))) yes.
        Eve_SetColorRGBA <- (lib function: #'Eve_SetColorRGBA' type: ((ffi types void) function(ffi types uint8, ffi types uint8, ffi types uint8, ffi types uint8))) yes.
        Eve_SetColorRGB <- (lib function: #'Eve_SetColorRGB' type: ((ffi types void) function(ffi types uint8, ffi types uint8, ffi types uint8))) yes.
        Eve_Clip <- (lib function: #'Eve_Clip' type: ((ffi types void) function(ffi types int, ffi types int, ffi types int, ffi types int))) yes.
        Eve_DrawPoint <- (lib function: #'Eve_DrawPoint' type: ((ffi types void) function(ffi types int, ffi types int))) yes.
        Eve_DrawLine <- (lib function: #'Eve_DrawLine' type: ((ffi types void) function(ffi types int, ffi types int, ffi types int, ffi types int))) yes.
        Eve_DrawArrow <- (lib function: #'Eve_DrawArrow' type: ((ffi types void) function(ffi types int, ffi types int, ffi types int, ffi types int))) yes.
        Eve_DrawRect <- (lib function: #'Eve_DrawRect' type: ((ffi types void) function(ffi types int, ffi types int, ffi types int, ffi types int))) yes.
        Eve_FillRect <- (lib function: #'Eve_FillRect' type: ((ffi types void) function(ffi types int, ffi types int, ffi types int, ffi types int))) yes.
        Eve_BlurRect <- (lib function: #'Eve_BlurRect' type: ((ffi types void) function(ffi types int, ffi types int, ffi types int, ffi types int))) yes.
        Eve_DrawPointRect <- (lib function: #'Eve_DrawPointRect' type: ((ffi types void) function(ffi types int, ffi types int, ffi types int, ffi types int, ffi types int))) yes.
        Eve_DrawRoundedRect <- (lib function: #'Eve_DrawRoundedRect' type: ((ffi types void) function(ffi types int, ffi types int, ffi types int, ffi types int, ffi types int))) yes.
        Eve_FillRoundedRect <- (lib function: #'Eve_FillRoundedRect' type: ((ffi types void) function(ffi types int, ffi types int, ffi types int, ffi types int, ffi types int))) yes.
        Eve_DrawArc <- (lib function: #'Eve_DrawArc' type: ((ffi types void) function(ffi types int, ffi types int, ffi types uint, ffi types int, ffi types int))) yes.
        Eve_DrawText <- (lib function: #'Eve_DrawText' type: ((ffi types void) function(ffi types string, ffi types int, ffi types int, Eve_Font pointer))) yes.
        Eve_DrawChar <- (lib function: #'Eve_DrawChar' type: ((ffi types void) function(ffi types uint, ffi types int, ffi types int, Eve_Font pointer))) yes.
        Eve_DrawTexture <- (lib function: #'Eve_DrawTexture' type: ((ffi types void) function(Eve_Texture pointer, ffi types int, ffi types int))) yes.
        Eve_Clear <- (lib function: #'Eve_Clear' type: ((ffi types void) function())) yes.
        Eve_Render <- (lib function: #'Eve_Render' type: ((ffi types void) function())) yes.
        Eve_PollEvent <- (lib function: #'Eve_PollEvent' type: ((ffi types bool) function())) yes.
        Eve_IsEventQuit <- (lib function: #'Eve_IsEventQuit' type: ((ffi types bool) function())) yes.
        Eve_IsEventKeyDown <- (lib function: #'Eve_IsEventKeyDown' type: ((ffi types bool) function())) yes.
        Eve_IsEventKeyUp <- (lib function: #'Eve_IsEventKeyUp' type: ((ffi types bool) function())) yes.
        Eve_IsEventMouseMotion <- (lib function: #'Eve_IsEventMouseMotion' type: ((ffi types bool) function())) yes.
        Eve_IsEventMouseButtonDown <- (lib function: #'Eve_IsEventMouseButtonDown' type: ((ffi types bool) function())) yes.
        Eve_IsEventMouseButtonUp <- (lib function: #'Eve_IsEventMouseButtonUp' type: ((ffi types bool) function())) yes.
        Eve_IsEventMouseWheel <- (lib function: #'Eve_IsEventMouseWheel' type: ((ffi types bool) function())) yes.
        Eve_GetEventMouseX <- (lib function: #'Eve_GetEventMouseX' type: ((ffi types uint) function())) yes.
        Eve_GetEventMouseY <- (lib function: #'Eve_GetEventMouseY' type: ((ffi types uint) function())) yes.
        Eve_GetEventMouseButtonID <- (lib function: #'Eve_GetEventMouseButtonID' type: ((ffi types uint) function())) yes.
        Eve_GetEventMouseScrollX <- (lib function: #'Eve_GetEventMouseScrollX' type: ((ffi types int) function())) yes.
        Eve_GetEventMouseScrollY <- (lib function: #'Eve_GetEventMouseScrollY' type: ((ffi types int) function())) yes.
        Eve_GetEventKeySym <- (lib function: #'Eve_GetEventKeySym' type: ((ffi types uint) function())) yes.
        Eve_GetEventKeyScancode <- (lib function: #'Eve_GetEventKeyScancode' type: ((ffi types uint) function())) yes.
        Eve_GetEventKeyMod <- (lib function: #'Eve_GetEventKeyMod' type: ((ffi types uint) function())) yes.
        Eve_GetTextWidth <- (lib function: #'Eve_GetTextWidth' type: ((ffi types uint) function(ffi types string))) yes.
        Eve_GetTextHeight <- (lib function: #'Eve_GetTextHeight' type: ((ffi types uint) function(ffi types string))) yes.
        Eve_GetCharWidth <- (lib function: #'Eve_GetCharWidth' type: ((ffi types uint) function(ffi types uint))) yes.
        Eve_GetCharHeight <- (lib function: #'Eve_GetCharHeight' type: ((ffi types uint) function(ffi types uint))) yes.
        Eve_Delay <- (lib function: #'Eve_Delay' type: ((ffi types void) function(ffi types uint))) yes.
        Eve_Font_New <- (lib function: #'Eve_Font_New' type: ((Eve_Font pointer) function(ffi types string, ffi types uint))) yes.
        Eve_Font_Delete <- (lib function: #'Eve_Font_Delete' type: ((ffi types void) function(Eve_Font pointer))) yes.
        Eve_Font_GetTextWidth <- (lib function: #'Eve_Font_GetTextWidth' type: ((ffi types uint) function(Eve_Font pointer, ffi types string))) yes.
        Eve_Font_GetTextHeight <- (lib function: #'Eve_Font_GetTextHeight' type: ((ffi types uint) function(Eve_Font pointer, ffi types string))) yes.
        Eve_Font_GetCharWidth <- (lib function: #'Eve_Font_GetCharWidth' type: ((ffi types uint) function(Eve_Font pointer, ffi types uint))) yes.
        Eve_Font_GetCharHeight <- (lib function: #'Eve_Font_GetCharHeight' type: ((ffi types uint) function(Eve_Font pointer, ffi types uint))) yes.
        Eve_GetDefaultFont <- (lib function: #'Eve_GetDefaultFont' type: ((Eve_Font pointer) function())) yes.
        Eve_Texture_NewFromImage <- (lib function: #'Eve_Texture_NewFromImage' type: ((Eve_Texture pointer) function(ffi types string))) yes.
        Eve_Texture_Delete <- (lib function: #'Eve_Texture_Delete' type: ((ffi types void) function(Eve_Texture pointer))) yes.
        Eve_Texture_GetWidth <- (lib function: #'Eve_Texture_GetWidth' type: ((ffi types uint) function(Eve_Texture pointer))) yes.
        Eve_Texture_GetHeight <- (lib function: #'Eve_Texture_GetHeight' type: ((ffi types uint) function(Eve_Texture pointer))) yes.
      ^ self
    );

    InitEve => (
        | r <- Eve_Init value(DefaultFontPath, 14) |
        DefaultFont <- ((Font clone) initWithFont: GetDefaultFont ShouldClose: false).
      ^ r
    );
    TerminateEve => Eve_Terminate value();

    CurrentWidth => Eve_CurrentWidth value();
    CurrentHeight => Eve_CurrentHeight value();

    PushFrame => Eve_PushFrame value();
    PopFrame => Eve_PopFrame value();

    TranslateI2(x, y) => Eve_TranslateI2 value(x, y);

    SetColorRGBA(r, g, b, a) => Eve_SetColorRGBA value(r, g, b, a);
    SetColorRGB(r, g, b) => Eve_SetColorRGB value(r, g, b);

    Clip(x, y, w, h) => Eve_Clip value(x, y, w, h);

    DrawPoint(x, y) => Eve_DrawPoint value(x, y);

    DrawLine(x1, y1, x2, y2) => Eve_DrawLine value(x1, y1, x2, y2);
    DrawArrow(x1, y1, x2, y2) => Eve_DrawArrow value(x1, y1, x2, y2);

    DrawRect(x, y, w, h) => Eve_DrawRect value(x, y, w, h);
    FillRect(x, y, w, h) => Eve_FillRect value(x, y, w, h);
    BlurRect(x, y, w, h) => Eve_BlurRect value(x, y, w, h);
    DrawPointRect(x, y, w, h, step) => Eve_DrawPointRect value(x, y, w, h, step);
    DrawRoundedRect(x, y, w, h, r) => Eve_DrawRoundedRect value(x, y, w, h, r);
    FillRoundedRect(x, y, w, h, r) => Eve_FillRoundedRect value(x, y, w, h, r);

    DrawArc(x, y, r, a1, a2) => Eve_DrawArc value(x, y, r, a1, a2);

    DrawText(text, x, y, font) => Eve_DrawText value(text, x, y, font ptr);
    DrawChar(char, x, y, font) => Eve_DrawChar value(char asInt, x, y, font ptr);

    DrawTexture(texture, x, y) => Eve_DrawTexture value(texture, x, y);

    Clear => Eve_Clear value();
    Render => Eve_Render value();

    PollEvent => Eve_PollEvent value();

    IsEventQuit => Eve_IsEventQuit value() != 0;
    IsEventKeyDown => Eve_IsEventKeyDown value() != 0;
    IsEventKeyUp => Eve_IsEventKeyUp value() != 0;
    IsEventMouseMotion => Eve_IsEventMouseMotion value() != 0;
    IsEventMouseButtonDown => Eve_IsEventMouseButtonDown value() != 0;
    IsEventMouseButtonUp => Eve_IsEventMouseButtonUp value() != 0;
    IsEventMouseWheel => Eve_IsEventMouseWheel value() != 0;

    GetEventMouseX => Eve_GetEventMouseX value();
    GetEventMouseY => Eve_GetEventMouseY value();

    GetEventMouseButtonID => Eve_GetEventMouseButtonID value();

    GetEventMouseScrollX => Eve_GetEventMouseScrollX value();
    GetEventMouseScrollY => (Eve_GetEventMouseScrollY value()) * YScrollFactor;

    GetEventKeyScancode => Eve_GetEventKeyScancode value();
    GetEventKeyMod      => Eve_GetEventKeyMod value();
    GetEventKey         => (input keys) Translate: GetEventKeyScancode Modifiers: GetEventKeyMod;

    GetTextWidth(text) => Eve_GetTextWidth value(text);
    GetTextHeight(text) => Eve_GetTextHeight value(text);

    GetCharWidth(char) => Eve_GetCharWidth value(char asInt);
    GetCharHeight(char) => Eve_GetCharHeight value(char asInt);

    Delay(ms) => Eve_Delay value(ms);

    Font_New(path, size) => Eve_Font_New value(path, size);
    Font_Delete(font) => Eve_Font_Delete value(font);
    Font_GetTextWidth(font, text) => Eve_Font_GetTextWidth value(font, text);
    Font_GetTextHeight(font, text) => Eve_Font_GetTextHeight value(font, text);
    Font_GetCharWidth(font, char) => Eve_Font_GetCharWidth value(font, char asInt);
    Font_GetCharHeight(font, char) => Eve_Font_GetCharHeight value(font, char asInt);
    GetDefaultFont => Eve_GetDefaultFont value;

    own Font = (here / 'Font.eco') importIn: self;



    Texture_NewFromImage(path) => Eve_Texture_NewFromImage value(path);
    Texture_Delete(texture) => Eve_Texture_Delete value(texture);
    Texture_GetWidth(texture) => Eve_Texture_GetWidth value(texture);
    Texture_GetHeight(texture) => Eve_Texture_GetHeight value(texture);

    own Texture = {
        static with inherited _ = std Clonable;

        protected eve,
        ptr;

        with inherited trait = {
            static with inherited _ = std Trait;

            initWithEve: _eve Ptr: _ptr => (
                eve <- _eve.
                ptr <- _ptr.
                std reflect EnableFinalization: self.
              ^ self
            );

            finalize => eve Texture_Delete(ptr);

            width => eve Texture_GetWidth(ptr);
            height => eve Texture_GetHeight(ptr);

            drawAtX: x Y: y => (
                eve DrawTexture(ptr, x, y).
              ^ self
            );

            writeOn: w => w << 'a texture element from EVE';
        };
    };

    TextureFromPath: path => (Texture clone) initWithEve: self Ptr: (Texture_NewFromImage(path path));

    protected own Text = {
        static with inherited _ = std Clonable;

        protected eve,
        text, width, height;

        with inherited trait = {
            static with inherited _ = std Trait;

            initWithEve: _eve Text: _text Width: _width Height: _height => (
                eve    <- _eve.
                text   <- _text.
                width  <- _width.
                height <- _height.
              ^ self
            );

            pointAtCharacterIndex: index => (
                eve GetTextWidth(text substringTo: index)
            );

            characterIndexAtX: offset => (
                |
                    str   <- (std io StringWriter) new,
                    index <- 0
                |
                text do: [ :c |
                    str << c.
                    (eve GetTextWidth(str build) >= offset) if: [ ^ index ].
                    index <- index + 1.
                ].
              ^ index
            );

            writeOn: w => w << 'a text element from EVE';
        };
    };

    Text: text => Text clone initWithEve: self
                                    Text: text
                                   Width: (GetTextWidth(text))
                                  Height: (GetTextHeight(text));
}
