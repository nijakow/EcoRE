
{
    static with inherited _ = std Trait;

    ui = $;
    morphic => ui morphic;

    ShrinkWrap(element) => (
        element ~ xLayout: ui layouts ShrinkWrap
                ~ yLayout: ui layouts ShrinkWrap
    );

    Flexible(element) => (
        element ~ xLayout: ui layouts Flexible
                ~ yLayout: ui layouts Flexible
    );

    Spacer => (morphic morphs Morph) new;
    SpacerW: w H: h => Spacer ~ rigidWidth: w ~ rigidHeight: h;

    ColorMorph(r, g, b) => (morphic morphs ColorMorph) new ~ r: r g: g b: b;
    ColorMorph: color => (morphic morphs ColorMorph) new ~ color: color;

    Center(element) => (
      ^ ui VBox( Spacer, ui HBox(Spacer, element, Spacer) ~ yLayout: ui layouts ShrinkWrap, Spacer )
    );

    Scrollable(element) => (
        |
            bar     <- (morphic morphs ScrollBarMorph) new,
            content <- (morphic morphs ScrollContentMorph) new
        |

        content add: element.
        bar notifyTo: content.

      ^ ui HBox(ui Clipped(content), bar)
    );

    TextField: text => (
        | lines <- ui VBox |
        text splitOnChar: $'newline'
          ~ do: [ :line | lines add: (ui Label: line) ].
      ^ ShrinkWrap(lines)
    );

    Editor: text => (
        | editor <- (morphic morphs EditorMorph) new |
        text splitOnChar: $'newline'
          ~ do: [ :line | editor append: line ].
      ^ editor
    );

    Editor: text OnAccept: onaccept OnCancel: oncancel => (
        | editor <- Editor: text |
      ^ ui VBox(
          Scrollable(Flexible(editor)),
          ui HBox(
              ui Button(ui Padding(3, ui Label: 'Accept'), $[ :(editor, onaccept) :sender | onaccept value(editor) ] bind(editor, onaccept))
                ~ xLayout: ui layouts Flexible
                ~ yLayout: ui layouts ShrinkWrap,
              ui Button(ui Padding(3, ui Label: 'Cancel'), $[ :(editor, oncancel) :sender | oncancel value(editor) ] bind(editor, oncancel))
                ~ xLayout: ui layouts Flexible
                ~ yLayout: ui layouts ShrinkWrap
          ) ~ xLayout: ui layouts Flexible
            ~ yLayout: ui layouts ShrinkWrap
      )
    );

    DocumentEditor: doc OnAccept: onaccept OnCancel: oncancel => (
        | editor <- DocumentEditor: doc |
      ^ ui VBox(
          Scrollable(Flexible(ui Padding(5, editor))),
          ui HBox(
              ui Button(ui Padding(3, ui HBox(Spacer, ui Label: 'Accept', Spacer)), $[ :(editor, onaccept) :sender | onaccept value(editor) ] bind(editor, onaccept))
                ~ xLayout: ui layouts Flexible
                ~ yLayout: ui layouts ShrinkWrap,
              ui Button(ui Padding(3, ui HBox(Spacer, ui Label: 'Cancel', Spacer)), $[ :(editor, oncancel) :sender | oncancel value(editor) ] bind(editor, oncancel))
                ~ xLayout: ui layouts Flexible
                ~ yLayout: ui layouts ShrinkWrap
          ) ~ xLayout: ui layouts Flexible
            ~ yLayout: ui layouts ShrinkWrap
      )
    );

    DocumentEditor: doc OnGetIt: onget OnDoIt: ondoit OnCancel: oncancel => (
        | editor <- DocumentEditor: doc |
      ^ ui VBox(
          Scrollable(Flexible(ui Padding(5, editor))),
          ui HBox(
              ui Button(ui Padding(3, ui HBox(Spacer, ui Label: 'Get it', Spacer)), $[ :(editor, onget) :sender | onget value(editor) ] bind(editor, onget))
                ~ xLayout: ui layouts Flexible
                ~ yLayout: ui layouts ShrinkWrap,
              ui Button(ui Padding(3, ui HBox(Spacer, ui Label: 'Do it', Spacer)), $[ :(editor, ondoit) :sender | ondoit value(editor) ] bind(editor, ondoit))
                ~ xLayout: ui layouts Flexible
                ~ yLayout: ui layouts ShrinkWrap,
              ui Button(ui Padding(3, ui HBox(Spacer, ui Label: 'Cancel', Spacer)), $[ :(editor, oncancel) :sender | oncancel value(editor) ] bind(editor, oncancel))
                ~ xLayout: ui layouts Flexible
                ~ yLayout: ui layouts ShrinkWrap
          ) ~ xLayout: ui layouts Flexible
            ~ yLayout: ui layouts ShrinkWrap
      )
    );

    DocumentEditor: document => (
      ^ (morphic morphs DocumentEditorMorph) clone initWithDocument: document
    );

    Button(caption, action) => (
      ^ ShrinkWrap(ui Stacked(
            (morphic morphs ButtonMorph) new ~ action: action,
            (morphic morphs FrameMorph) new,
            caption
        ))
    );

    ButtonWithColor(caption, color, action) => (
      ^ ShrinkWrap(ui Stacked(
            (morphic morphs ButtonMorph) new ~ highlightColor: color ~ action: action,
            (morphic morphs FrameMorph) new,
            caption
        ))
    );

    Minimized(window) => (
        Window(200, 100,
            ui Button(Center(ui Label: 'Unminimize'),
                    $[ :(minimized) :sender | (sender world yes) open: minimized ] bind(window)
            ) ~ xLayout: ui layouts Flexible
              ~ yLayout: ui layouts Flexible
        )
    );

    WithRebuilderDo: aBlock => (
        |
            container <- ui VBox(),
            rebuilder <- $[ :(builder, container, aBlock) | container replaceWith: (builder WithRebuilderDo: aBlock) ] bind(self, container, aBlock)
        |
        container add: (aBlock value(rebuilder)).
      ^ container
    );

    WithReplacerDo: aBlock => (
        |
            container <- ui VBox(),
            replacer <- $[ :(builder, container) :newMorph | container replaceWith: (newMorph) ] bind(self, container)
        |
        container add: (aBlock value(replacer)).
      ^ container
    );

    Connection => (
        (morphic morphs ConnectionMorph) new
          ~ rigidWidth: 25
          ~ rigidHeight: 25
    );

    Draggable(content) => (
        | morph <- (morphic morphs DraggableMorph) new |
        morph add: content.
      ^ morph
    );

    BrightBackgroundColorMorph => (
        (morphic morphs Morph) new
          ~ representation: (morphic representations Custom: $[ :morph :renderer |
              renderer setColor: (renderer theme accentColor).
              renderer fillRectX: 0 Y: 0 W: (morph width) H: (morph height).
              morph renderImplOn: renderer.
          ])
    );
    BackgroundColorMorph => (
        (morphic morphs Morph) new
          ~ representation: (morphic representations Custom: $[ :morph :renderer |
              renderer setColor: (renderer theme backgroundColor).
              renderer fillRectX: 0 Y: 0 W: (morph width) H: (morph height).
              morph renderImplOn: renderer.
          ])
    );
    PaneColorMorph => (
        (morphic morphs Morph) new
          ~ representation: (morphic representations Custom: $[ :morph :renderer |
              renderer setColor: (renderer theme paneColor).
              renderer fillRectX: 0 Y: 0 W: (morph width) H: (morph height).
              morph renderImplOn: renderer.
          ])
    );

    UndecoratedWindow(content) => (
        | window <- (morphic morphs ClampFrameMorph) new |
        window add: (
            ui Stacked(
                ui Padding(10,
                    ui Stacked(
                        content,
                        BackgroundColorMorph
                    ),
                ),
                BrightBackgroundColorMorph
            )
        ) ~ xLayout: ui layouts ShrinkWrap
          ~ yLayout: ui layouts ShrinkWrap
    );

    Window(w, h, content) => (
      | window <- (morphic morphs ClampFrameMorph) new |
      window
          ~ add: ui Padding(5,
                ui VBox(
                    ui HBox(Spacer,
                        ui Stacked(
                            ui HBox(
                                ui Button(ui Padding(3, ui Label: ' _ '), $[ :(builder, window) :sender | (window world yes) open: (builder Minimized(window)). window unlink. ] bind(self, window)),
                                ButtonWithColor(ui Padding(3, ui Label: ' X '), morphic R: 255 G: 0 B: 0, $[ :(window) :sender | window unlink ] bind(window))
                            ) ~ xLayout: ui layouts ShrinkWrap
                              ~ yLayout: ui layouts ShrinkWrap,
                            PaneColorMorph
                        ) ~ xLayout: ui layouts ShrinkWrap
                          ~ yLayout: ui layouts ShrinkWrap,
                    ) ~ yLayout: ui layouts ShrinkWrap,
                    ui Padding(10, ui Stacked(content, BackgroundColorMorph))
                      ~ xLayout: ui layouts Flexible
                      ~ yLayout: ui layouts Flexible,
                    ui HBox(Spacer,
                        ui Stacked(
                            ui HBox(
                                ShrinkWrap(Button(ui Label: ' ^ ', $[ :(window) :sender | window rigidHeight: (window height - 25). window layoutChanged. ] bind(window))),
                                ShrinkWrap(Button(ui Label: ' V ', $[ :(window) :sender | window rigidHeight: (window height + 25). window layoutChanged. ] bind(window))),
                                ShrinkWrap(Button(ui Label: ' < ', $[ :(window) :sender | window rigidWidth: (window width - 25). window layoutChanged. ] bind(window))),
                                ShrinkWrap(Button(ui Label: ' > ', $[ :(window) :sender | window rigidWidth: (window width + 25). window layoutChanged. ] bind(window)))
                            ) ~ xLayout: ui layouts ShrinkWrap
                              ~ yLayout: ui layouts ShrinkWrap,
                            BackgroundColorMorph
                        ) ~ xLayout: ui layouts ShrinkWrap
                          ~ yLayout: ui layouts ShrinkWrap,
                    ) ~ yLayout: ui layouts ShrinkWrap,
                ),
          )
          ~ resizable
          ~ rigidWidth: w
          ~ rigidHeight: h
    );
}
