
    {
        static with inherited _ = std Clonable;

        offset, dimensions,
        xLayout, yLayout, layouter,
        representation,
        listener,
        parent, children;

        protected cachedGlobalOffset,
        protected cachedLayoutingConstraints,
        protected isRenderDirty,
        protected isChildRenderDirty,
        protected metaHandle;

        with inherited trait = {
            static with inherited _ = std Trait;
            protected morphic = $package morphic;

            initWithChildConfig: config => (
                offset             <- (morphic X: 0 Y: 0).
                dimensions         <- (morphic W: 0 H: 0).
                xLayout            <- (morphic layouts Flexible).
                yLayout            <- (morphic layouts Flexible).
                layouter           <- (morphic layouters Default).
                representation     <- (morphic representations Default).
                listener           <- No.
                parent             <- No.
                children           <- config new.
                metaHandle         <- No.

                "Caches"
                cachedGlobalOffset         <- No.
                cachedLayoutingConstraints <- No.
                isRenderDirty              <- true.
                isChildRenderDirty         <- true.

              ^ self
            );

            initWithNoChildren   => initWithChildConfig: (morphic children None);
            initWithOneChild     => initWithChildConfig: (morphic children One);
            initWithManyChildren => initWithChildConfig: (morphic children Many);

            init => initWithNoChildren;

            "
                Children
            "
            childrenDo: block => children childrenDo: block;
            childrenReverseDo: block => children childrenReverseDo: block;
            allChildrenDo: block => childrenDo: [ :c | block value(c). c allChildrenDo: block ];
            childrenWithBoundsDo: block => childrenDo: [ :c | block value(c, c bounds) ];

            allParentsDo: block => (
                parent yes: [ :p | block value(p). p allParentsDo: block ]
                        no: [      ^ self                                ]
            );

            root => (
                parent yes: [ :p | p root ]
                        no: [      self   ]
            );

            world => (
                parent yes: [ :p | p world ]
                        no: [      No      ]
            );

            unlink => (
                parent yes: [ :p | p remove: self ].
              ^ self
            );

            onUnlink => (
              ^ self
            );

            replaceWith: morph => (
                parent yes: [ :p | p replace: self with: morph ].
              ^ self
            );

            noParent => (
                parent <- No.
                invalidateGlobalOffsetCache.
                allChildrenDo: [ :c | c onUnlink ].
              ^ self
            );
            parent: p => (
                parent <- Yes: p;
                invalidateGlobalOffsetCache.
              ^ self
            );
            
            hasParent => parent isYes;

            isIn: morph => (
                (self == morph) -> [ ^ true ].
                parent yes: [ :p | ^ p isIn: morph ]
                        no: [      ^ false         ]
            );

            tryAdd: child => (
                ((self isIn: child) not) -> [
                    (children add: child) unless: [ ^ false ].
                    child unlink.
                    child parent: self.
                    layoutChanged.
                    child invalidateGlobalOffsetCache.
                  ^ true
                ].
              ^ false
            );

            add: child => (
                (tryAdd: child)
                    unless: [ std sys error ThrowMessage: 'Morph can not be added!' ].
              ^ self
            );

            remove: child => (
                (children remove: child)
                  ~ if: [ self handleRemoveMorph: child. child noParent. layoutChanged. ].
              ^ self
            );

            remove => (
                parent yes: [ :p | p remove: self ].
              ^ self
            );

            replace: child with: replacement => (
                (children replace: child with: replacement)
                  ~ if: [ child noParent. replacement parent: self. layoutChanged. ].
              ^ self
            );


            "
                Position and Size
            "
            offsetForOrientation: orientation => (
                offset dimensionForOrientation: orientation
            );

            width  => dimensions x;
            height => dimensions y;

            extentForOrientation: orientation => (
                dimensions dimensionForOrientation: orientation
            );

            globalOffset => (
                cachedGlobalOffset
                  ~ yes: [ :v | ^ v ]
                     no: [  |
                                goffset <- parent yes: [ :p | (p globalOffset + offset) ]
                                                   no: [      offset                    ]
                            |
                            cachedGlobalOffset <- Yes: goffset.
                          ^ goffset
                     ].
            );
            invalidateGlobalOffsetCache => (
                cachedGlobalOffset <- No.
                childrenDo: [ :c | c invalidateGlobalOffsetCache ].
              ^ self
            );

            bounds => morphic X: (offset x) Y: (offset y) W: (dimensions x) H: (dimensions y);

            moveTo: point => (
                offset <- point.
                invalidateGlobalOffsetCache.
                renderDirty.
              ^ self
            );

            moveToX: x Y: y => moveTo: (morphic X: x Y: y);

            resizeTo: point => (
                dimensions <- point.
                layoutChanged.
              ^ self
            );

            reshapeX: x Y: y W: w H: h => moveTo: (morphic X: x Y: y) ~ resizeTo: (morphic W: w H: h);
            bounds: rect => reshapeX: (rect x) Y: (rect y) W: (rect w) H: (rect h);


            "
                Layouts
            "
            layouter: l => layouter <- l;
            
            xLayout: layout => xLayout <- layout;
            yLayout: layout => yLayout <- layout;

            rigidWidth:  w => xLayout: (morphic layouts Rigid: w);
            rigidHeight: h => yLayout: (morphic layouts Rigid: h);

            flexibleWidth  => xLayout: morphic layouts Flexible;
            flexibleHeight => yLayout: morphic layouts Flexible;
            flexibleSize   => ( flexibleWidth. flexibleHeight. );

            shrinkWrapWidth  => xLayout: morphic layouts ShrinkWrap;
            shrinkWrapHeight => yLayout: morphic layouts ShrinkWrap;
            shrinkWrapSize   => ( shrinkWrapWidth. shrinkWrapHeight. );

            layoutForOrientation: orientation => (
                orientation
                  ~ ifHorizontal: [ xLayout ]
                      ifVertical: [ yLayout ]
            );


            "
                Layouting
            "
            baseMinWidth => 0;
            baseMinHeight => 0;

            baseMinSizeForOrientation: orientation => (
                orientation
                  ~ ifHorizontal: [ baseMinWidth  ]
                      ifVertical: [ baseMinHeight ]
            );

            minSizeForOrientation: orientation => (
                layouter calculateMinSizeForMorph: self Orientation: orientation
            );

            minWidth => minSizeForOrientation: (morphic orientation Horizontal);
            minHeight => minSizeForOrientation: (morphic orientation Vertical);

            minSize => morphic X: minWidth Y: minHeight;

            preferredSizeForOrientation: orientation Constraint: constraint => (
                layouter calculatePreferredSizeForMorph: self Orientation: orientation Constraint: constraint
            );

            preferredSizeWithConstraints: constraints => (
                morphic X: (preferredSizeForOrientation: (morphic orientation Horizontal) Constraint: (constraints x))
                        Y: (preferredSizeForOrientation: (morphic orientation Vertical)   Constraint: (constraints y))
            );

            recursiveLayoutChanged => (
                cachedLayoutingConstraints <- No.
                parent yes: [ :p | p recursiveLayoutChanged ].
            );
            layoutChanged => (
                renderDirty.
                recursiveLayoutChanged.
            );
            isLayoutDirty => cachedLayoutingConstraints isNo;

            protected layoutDirtyForConstraints: constraints => (
                cachedLayoutingConstraints
                  ~ yes: [ :c | (c equalsPoint: constraints) if: [ ^ false ] ].
              ^ true
            );

            forceLayoutWithConstraints: constraints => (
                layouter layoutMorph: self Constraints: constraints.
                cachedLayoutingConstraints <- Yes: constraints.
            );
            forceLayoutInPlace => forceLayoutWithConstraints: dimensions;

            layoutWithConstraints: constraints => (
                layoutDirtyForConstraints: constraints
                  ~ if: [ forceLayoutWithConstraints: constraints ]
            );
            layoutInPlace => layoutWithConstraints: dimensions;

            layoutWithoutConstraints => (
                layoutWithConstraints: (morphic X: (minWidth) Y: (minHeight))
            );
            layoutWithHintedConstraints: hint => (
                layoutWithConstraints: (morphic X: ((hint x) max: (minWidth))
                                                Y: ((hint y) max: (minHeight)))
            );


            "
                Rendering
            "
            childRenderDirty => (
                (isChildRenderDirty not) if: [
                    isChildRenderDirty <- true.
                    parent yes: [ :p | p childRenderDirty ].
                ]
            );
            renderDirty => (
                isRenderDirty <- true.
                childRenderDirty.
            );

            renderChildrenOn: renderer => (
                childrenDo: [ :c |
                    renderer pushOffset: (renderer offset + c offset).
                    renderer accept: c.
                    renderer popOffset.
                ].
            );
            renderImplOn: renderer => (
                renderChildrenOn: renderer.
            );
            renderOn: renderer => (
                presentOnRenderer: renderer.
                isRenderDirty    <- false.
                isChildRenderDirty <- false.
            );
            presentOnRenderer: renderer => representation present: self on: renderer;

            representation: r => (
                representation <- r.
                renderDirty.
              ^ self
            );

            customRepresentation: r => representation: (morphic representations Custom: r);
            
            maybeRenderChildrenOn: renderer => (
                isChildRenderDirty
                  ~ if: [
                            childrenDo: [ :c |
                               renderer pushOffset: c globalOffset.
                               c maybeRenderOn: renderer.
                               renderer popOffset.
                            ].
                        ]
            );
            maybeRenderOn: renderer => (
                isRenderDirty
                  ~ if: [ renderOn: renderer ].
                maybeRenderChildrenOn: renderer.
                isChildRenderDirty <- false.
            );

            "
                Meta
            "
            meta: key => (
                metaHandle yes: [ :map | ^ map at: key ].
              ^ No
            );

            meta: key is: value => (
                metaHandle yes: [ :map | map                                       ]
                            no: [ | m <- std util newMap | metaHandle <- Yes: m. m ]
                  ~ at: key put: value.
              ^ self
            );


            "
                Events
            "
            listener: l => listener <- Yes <- l;
            forceListener => (
                listener no: [ listener: ((morphic Listener) new) ].
              ^ listener yes
            );

            containsPoint: point => (
                     [ [ point x >= offset x ] and: [ point x <= (offset x + dimensions x) ] ]
                and: [ [ point y >= offset y ] and: [ point y <= (offset y + dimensions y) ] ]
            );

            dispatchEvent: block At: point => (
                childrenReverseDo: [ :c |
                    c containsPoint: point
                      ~ if: [ (c dispatchEvent: block At: (point - c offset)) -> [ ^ true ] ]
                ].
                block value(self, point) -> [ ^ true ].
              ^ false
            );

            dispatchEvent: block ToParentsOf: morph At: point => (
                childrenReverseDo: [ :c |
                    c containsPoint: point
                      ~ if: [ (c dispatchEvent: block ToParentsOf: morph At: (point - c offset)) -> [ ^ true ] ]
                ].
                ((isIn: morph) not) if: [
                    block value(self, point) -> [ ^ true ].
                ].
              ^ false
            );

            xRayAt: point Do: block => (
                block value(self).
                childrenDo: [ :c |
                    c containsPoint: point
                      ~ if: [ c xRayAt: (point - c offset) Do: block ]
                ].
              ^ self
            );

            xRayAt: point ReverseDo: block => (
                childrenReverseDo: [ :c |
                    c containsPoint: point
                      ~ if: [ c xRayAt: (point - c offset) ReverseDo: block ]
                ].
                block value(self).
              ^ self
            );

            handleRemoveMorph: morph => false;
            handleDropMorph: morph At: point => false;
            handleDropMorph: morph At: point Meta: meta => handleDropMorph: morph At: point;
            handleClick: click At: point HandMorph: hand => false;
            handleGrabAt: point HandMorph: hand => false;
            handleScrollX: sx Y: sy At: point HandMorph: hand => false;
            handleKey: key At: point HandMorph: hand => false;

            handleHandEnter: hand => false;
            handleHandExit: hand => false;

            tryHandleRemoveMorph: morph => handleRemoveMorph: morph;
            tryHandleDropMorph: morph At: point => handleDropMorph: morph At: point;
            tryHandleDropMorph: morph At: point Meta: meta => handleDropMorph: morph At: point Meta: meta;
            tryHandleClick: click At: point HandMorph: hand => handleClick: click At: point HandMorph: hand;
            tryHandleGrabAt: point HandMorph: hand => handleGrabAt: point HandMorph: hand;
            tryHandleScrollX: sx Y: sy At: point HandMorph: hand => handleScrollX: sx Y: sy At: point HandMorph: hand;
            tryHandleKey: key At: point HandMorph: hand => handleKey: key At: point HandMorph: hand;
            tryHandleHandEnter: hand => handleHandEnter: hand;
            tryHandleHandExit: hand => handleHandExit: hand;

            dropMorph: morph At: point => dropMorph: morph At: point Meta: No;
            dropMorph: morph At: point Meta: meta => dispatchEvent: [ :e :point | e tryHandleDropMorph: morph At: point Meta: meta ] ToParentsOf: morph At: point;
            click: click At: point HandMorph: hand => dispatchEvent: [ :e :point | e tryHandleClick: click At: point HandMorph: hand ] At: point;
            grabAt: point HandMorph: hand => dispatchEvent: [ :e :point | e tryHandleGrabAt: point HandMorph: hand ] At: point;
            scrollX: sx Y: sy At: point HandMorph: hand => dispatchEvent: [ :e :point | e tryHandleScrollX: sx Y: sy At: point HandMorph: hand ] At: point;
            key: key At: point HandMorph: hand => dispatchEvent: [ :e :point | e tryHandleKey: key At: point HandMorph: hand ] At: point;

            dumpOn: w Indentation: i => (
                0 to: i do: [ :j | w << '  ' ].
                (w << self << ' ' << offset << ' ' << globalOffset << ', dimensions ' << dimensions << ' -- ' << xLayout << ' | ' << yLayout) newline commit.
                childrenDo: [ :c | c dumpOn: w Indentation: (i + 1) ].
            );
            dumpOn: w => dumpOn: w Indentation: 0;

            writeOn: w => w << 'a morph';
        };
    }
