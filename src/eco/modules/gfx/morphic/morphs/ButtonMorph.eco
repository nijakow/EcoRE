
    {
        static with inherited _ = std Clonable;
        with inherited own Morph = $ Morph;

        protected action,
        protected highlighted,
        protected highlightColor;

        with inherited trait = {
            init => (
                $(Morph) init.
                action         <- No.
                highlighted    <- false.
                highlightColor <- No.
              ^ self
            );

            highlightColor: color => (
                highlightColor <- Yes: color.
                renderDirty.
              ^ self
            );

            renderImplOn: renderer => (
                highlighted if: [
                    |
                        minX <- 1,
                        minY <- 1,
                        maxX <- width - 2,
                        maxY <- height - 2
                    |
                    renderer setColor: (highlightColor yes: [ :c | c ] no: [ renderer theme lineColor ]).
                    1 to: ((maxX + maxY) / 5) do: [ :i |
                        i <- i * 5.

                        |
                            sx <- i min: maxX,
                            sy <- (i - sx) max: 0,
                            ex <- (i - maxY) max: 0,
                            ey <- i min: maxY
                        |

                        renderer drawLineX: sx Y: sy X: ex Y: ey.
                    ].
                ].
                $(Morph) renderImplOn: renderer.
            );

            action: act => action <- Yes: act;

            handleClick: click At: point HandMorph: hand => (
                action yes: [ :a | a value(self, hand, click) ].
              ^ true
            );

            handleHandEnter: hand => (
                highlighted <- true.
                renderDirty.
              ^ true
            );

            handleHandExit: hand => (
                highlighted <- false.
                renderDirty.
              ^ true
            );

            writeOn: w => w << 'a button morph';
        };
    }
