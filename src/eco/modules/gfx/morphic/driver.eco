{
    static with inherited _ = std Module;
    with morphic = $;

    own MorphicHandler = {
        static with inherited _ = std Module;
        private morphic = $ morphic;

        protected mouseMoved;

        protected program,
        protected renderer,
        protected morph,
        protected tickCount,
        protected app,
        protected eve;

        with inherited trait = {
            initWithApp: _app Eve: _eve => (
                app        <- _app.
                eve        <- _eve.
                mouseMoved <- true.
                morph      <- morphic morphs WorldMorph new.
                tickCount  <- 0.
              ^ self
            );

            tick => (
                "TODO: Implement an fps counter"
                morph maybeUpdate.
                morph fullRender.
            );

            findMorphAtX: x Y: y => (
                | v <- No |
                morph xRayAtX: x Y: y Do: [ :m |
                    v <- Yes: m
                ].
              ^ v
            );

            handleKey: key => (
                morph handMorph handleKey: key.
            );

            handleEvent => (
                eve IsEventMouseMotion -> [
                    morph handMorph moveToX: (eve GetEventMouseX) Y: (eve GetEventMouseY).
                    mouseMoved <- true.
                    morph renderDirty. "Force a full render"
                ].
                eve IsEventMouseButtonDown -> [
                    | button <- eve GetEventMouseButtonID |

                    Switch: button
                      ~ case: 1 do: [ morph handMorph leftClick   ]
                      ~ case: 2 do: [ morph handMorph middleClick ]
                      ~ case: 3 do: [ morph handMorph rightClick  ]
                    ~ default: [
                        (std io out << 'Unknown mouse key!') newline commit.
                      ].
                ].
                eve IsEventMouseButtonUp -> [
                    | button <- eve GetEventMouseButtonID |

                    Switch: button
                      ~ case: 1 do: [ morph handMorph leftClickRelease   ]
                      ~ case: 2 do: [ morph handMorph middleClickRelease ]
                      ~ case: 3 do: [ morph handMorph rightClickRelease  ]
                    ~ default: [
                        (std io out << 'Unknown mouse key!') newline commit.
                      ].
                ].
                eve IsEventMouseWheel -> [
                    |
                        scrollX <- eve GetEventMouseScrollX,
                        scrollY <- eve GetEventMouseScrollY
                    |
                    morph handMorph scrollX: scrollX Y: scrollY.
                ].
            );

            launch => (
                renderer <- (morphic Renderer) clone initWithEve: eve.

                morph <- morphic morphs WorldMorph new.

                morph reshapeX: renderer xOff
                             Y: renderer yOff
                             W: renderer width
                             H: renderer height.
                morph renderer: renderer.

                morph layoutInPlace.

                app openInWorld: morph.

                | running <- true |
                [
                    (running not) -> [ ^ self ].
                    
                    tick.

                    [
                        [ :break |
                            (eve PollEvent == 0) -> [ break value ].

                            begin
                            ~ if: [ eve IsEventKeyDown ] then: [ | k <- eve GetEventKey | k ifEscape: [ ^ self ]. handleKey: k ]
                            ~ default: [ handleEvent ].
                        ] repeatWithBreak.
                    ] catch: [ :e |
                        (std io out << 'Error caught in main loop: ' << e) newline commit.
                    ].

                    mouseMoved if: [
                        morph handMorph moved.
                        mouseMoved <- false.
                    ].

                    eve Delay(8).
                ] repeat.
            );
        };
    };

    Text: text => eve Text: text;

    RunWithWidth: w Height: h App: app => (
        eve Init.
        eve InitEve.
        (MorphicHandler clone initWithApp: app Eve: eve) launch.
    );
}
