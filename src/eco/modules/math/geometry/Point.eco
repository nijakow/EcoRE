
{
    static with inherited _ = std Classlike;

    own Point2d = {
        static with inherited _ = std Clonable;

        x <- 0,
        y <- 0;

        with inherited trait = {
            static with inherited _ = std Trait;
            protected geometry = $package;

            x: v => x <- v;
            y: v => y <- v;

            x: xv y: yv => x: xv ~ y: yv;

            duplicate => (geometry Point) X: x Y: y;

            + other => (geometry Point) X: x + other x Y: y + other y;
            - other => (geometry Point) X: x - other x Y: y - other y;

            * scale => (geometry Point) X: x * scale Y: y * scale;
            / scale => (geometry Point) X: x / scale Y: y / scale;

            equalsPoint: other => [ x == other x ] and: [ y == other y ];

            < other => [ x < other x ] or: [ [ x == other x ] and: [ y < other y ] ];
            <= other => [ equalsPoint: other ] or: [ self < other ];
            > other => (self <= other) not;
            >= other => (self < other) not;

            min: other => (self < other) if: [ ^ self ] else: [ ^ other ];
            max: other => (self > other) if: [ ^ self ] else: [ ^ other ];

            midpoint: other => (geometry Point) X: (x + other x) / 2 Y: (y + other y) / 2;

            distanceTo: other => (((x - other x) * (x - other x)) + ((y - other y) * (y - other y))) sqrt;
            distanceToOrigin  => ((x * x) + (y * y)) sqrt;

            transpose => (geometry Point) X: y Y: x;
            negate    => (geometry Point) X: (x negate) Y: (y negate);

            corner: other => (geometry Rectangle) Origin: self Corner: other;
            extent: other => (geometry Rectangle) Origin: self Extent: other;
            w: w h: h => (geometry Rectangle) Origin: self W: w H: h;
            asRectangle => (geometry Rectangle) Origin: (geometry Point Origin) Extent: self;

            dimensionForOrientation: orientation => orientation selectX: x Y: y;

            writeOn: w => w << 'a point(' present<< x << ', ' present<< y << ')';
        };
    };

    X: x Y: y => (Point2d clone) x: x y: y;

    Origin => X: 0 Y: 0;
}
