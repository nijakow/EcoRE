
{
    static with inherited _ = std Module;

    own common     = (here / 'common' / '_.eco') importIn: self;
    own asm        = (here / 'asm' / '_.eco') importIn: self;
    own ast        = (here / 'ast' / '_.eco') importIn: self;
    own compiler   = (here / 'compiler' / '_.eco') importIn: self;
    own decompiler = (here / 'decompiler' / '_.eco') importIn: self;
    own rewriter   = (here / 'rewriter' / '_.eco') importIn: self;


    DisassembleCodeObject: code => asm Disassemble: code;
    Disassemble: code => DisassembleCodeObject: code;

    Disassemble: name In: object => (
        Disassemble: ((std reflect Mirror: object)
                        ~ slot: name
                        ~ slotValue).
    );

    BuildAST: disassembledFunction => (
      ^ ((decompiler Decompiler clone) initWithFunction: disassembledFunction) buildAST
    );

    RewriteAST: ast => rewriter Rewrite: ast;

    Quickbuild: code => (
        BuildAST: (Disassemble: code)
    );

    Quickrewrite: code => (
        RewriteAST: (Quickbuild: code)
    );

    Quickprint: code => (
        (ast Printer) clone initWithWriter: (std io out)
          ~ print: (Quickbuild: code).
        (std io out) newline commit.
    );
    Quickopt: code => (
        (ast Printer) clone initWithWriter: (std io out)
          ~ print: (Quickrewrite: code) ast.
        (std io out) newline commit.
    );

    Quickcompile: ast => compiler CompileAst: ast;
}
