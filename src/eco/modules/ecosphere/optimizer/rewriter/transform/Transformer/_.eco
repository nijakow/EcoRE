{
    static with inherited _ = std Clonable;

    protected transform = $;
    protected module => transform module;
    protected optimizer => module optimizer;

    protected astTypes => module ast types;
    protected builder => module builder;

    context;

    Answer: ast In: context => (transform Answer) clone initWithAST: ast Context: context;
    Answer: ast => Answer: ast In: context;

    In: context => (transform Transformer) clone init: context;

    "
        Sometimes we don't want to have all those ASTScope's flying
        around. This function neatly unwraps them for us.
    "
    Unscope: ast => (
        | c <- context |
        [ ast type == astTypes Scope ] while: [
            ast <- ast body.
            c <- ast context.
        ].
      ^ Answer: ast In: c
    );

    ExtendVarargs: args => (
        | v <- std util newVector |
        args into: v.
        context lexicalVarargs yes: [ :varargs | varargs do: [ :vararg | v add: vararg ] ].
      ^ v asArray
    );

    ExtendVarargs: args If: bool => (
        bool   if: [ ^ ExtendVarargs: args ]
             else: [ ^ args                ]
    );

    with inherited _inlining = (here / 'inlining.eco') importIn: self;
    with inherited _lookup = (here / 'lookup.eco') importIn: self;
    with inherited _valueref = (here / 'valueref.eco') importIn: self;
    with inherited _builtin = (here / 'builtin.eco') importIn: self;
    with inherited _send = (here / 'send.eco') importIn: self;
    with inherited _return = (here / 'return.eco') importIn: self;
    with inherited _jump = (here / 'jump.eco') importIn: self;
    with inherited _compound = (here / 'compound.eco') importIn: self;
    with inherited _assignment = (here / 'assignment.eco') importIn: self;
    with inherited _block = (here / 'block.eco') importIn: self;
    with inherited _scope = (here / 'scope.eco') importIn: self;

    transform: ast force: force => (
        Switch: (ast type)
          ~ case: astTypes ValueRef   do: [ ^ transformValueRef:   ast              ]
          ~ case: astTypes Builtin    do: [ ^ transformBuiltin:    ast              ]
          ~ case: astTypes Send       do: [ ^ transformSend:       ast              ]
          ~ case: astTypes Return     do: [ ^ transformReturn:     ast              ]
          ~ case: astTypes Jump       do: [ ^ transformJump:       ast              ]
          ~ case: astTypes Compound   do: [ ^ transformCompound:   ast              ]
          ~ case: astTypes Assignment do: [ ^ transformAssignment: ast              ]
          ~ case: astTypes Block      do: [ ^ transformBlock:      ast Force: true  ]  "Must always be true, otherwise blocks get inlined into the wrong scope."
          ~ case: astTypes Scope      do: [ ^ transformScope:      ast              ]
          "TODO: Slot Assignments, ..."
        ~ default: [ ^ Answer: ast ]
    );

    transform: ast => transform: ast force: false;
    pull:      ast => transform: ast force: true;

    transformMultiple: exprs =>
        exprs map: [ :expr | transform: expr ];
    
    pullAnswer: answer => pull: (answer wrapIn: context);
    

    init: _context => (
        context <- _context.
      ^ self
    );

    writeOn: w => w << 'a transformer';
}
