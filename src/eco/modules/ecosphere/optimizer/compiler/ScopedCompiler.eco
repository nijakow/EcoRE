
{
    static with inherited _ = std Clonable;

    scope;

    with inherited trait = {
        static with inherited _ = std Trait;
        protected compiler = $package;
        protected ast      = $package optimizer ast;

        protected writer => scope lexicalBase writer;


        protected In: scope => (compiler ScopedCompiler) clone initWithScope: scope;

        protected lastValueIsOnStack => writer writePop;


        initWithScope: _scope => (
            scope <- _scope.
          ^ self
        );


        compileConstant: expr => (
            writer writeConst: (expr constant).
        );

        compileValueRef: expr => (
            scope lookupLabel: (expr marker)
                      IfFound: [ :result :depth | writer writeLoad: result Depth: depth    ]
                   IfNotFound: [ (std sys error) ThrowMessage: 'Unable to find ValueRef!'. ]
        );

        compileBlock: expr => (
            | lex <- scope newLexical |

            (expr args) do: [ :arg |
                lex addArgument: arg
            ].

            (In: lex) compile: (expr code).

            writer writeDelayedClosure: $[ :(subwriter, expr) |
                subwriter finishWithArgs: ((expr args) size) Varargs: (expr varargs)
            ] bind(lex writer, expr).
        );

        compileCompound: expr => (
            expr instructions do: [ :instr |
                compile: instr.
            ].
        );
        
        compileReturn: expr => (
            compile: (expr returnValue).
            writer writePush.
            writer writeReturn: (expr depth).
        );

        compileScope: expr => (
            "
                TODO: Introduce labels for beginning and end of scope.
            "
            (expr context entryLabel) yes: [ :label | scope placeJumpLabel: label ].
            compile: expr body.
            (expr context exitLabel) yes: [ :label | scope placeJumpLabel: label ].
        );

        compileBuiltin: expr => (
            expr args do: [ :arg | compile: arg. writer writePush. ].
            writer writeBuiltin: (expr message) Args: (expr args size) Varargs: (expr varargs).
            lastValueIsOnStack.
        );

        compileSend: expr => (
            expr args do: [ :arg | compile: arg. writer writePush. ].
            writer writeSend: (expr message) Args: (expr args size) Varargs: (expr varargs).
            lastValueIsOnStack.
        );

        compileAssignment: expr => (
            | lhs <- expr lhs, rhs <- expr rhs |

            Switch: (lhs type)
              ~ case: ast types ValueRef do: [
                    "
                        Introduce the variable if it didn't exist yet.
                        TODO: Variable might be used in an outer scope later on!
                    "
                    scope lookupLabel: (lhs marker)
                              IfFound: [ :result :depth | ]
                           IfNotFound: [ scope addLocal: lhs marker ].

                    scope lookupLabel: (lhs marker)
                              IfFound: [ :result :depth | writer writeStoreLexical: result Depth: depth ]
                           IfNotFound: [ (std sys error) ThrowMessage: 'Unable to find ValueRef!' ].
                ]
              ~ default: [ (std sys error) ThrowMessage: 'Unable to compile assignment: Type not supported' ].
        );

        compileSlotAssignment: expr => (
            compile: lhs.
            writer writePush.
            compile: rhs.
            writer writePush.
            writer writeAssign: slot.
        );

        compileJump: expr => (
            compile: (expr returnValue).
            "TODO: Replace this with a call to lookupJumpLabel:IfFound:IfNotFound:"
            
            | label <- scope lookupJumpLabel: (expr label) |
            writer writeJumpToLabel: label.
        );

        compileLabel: expr => (
            scope placeJumpLabel: (expr label).
        );

        compile: expr => (
            Switch: (expr type)
              ~ case: ast types Constant       do: [ compileConstant:       expr ]
              ~ case: ast types ValueRef       do: [ compileValueRef:       expr ]
              ~ case: ast types Compound       do: [ compileCompound:       expr ]
              ~ case: ast types Block          do: [ compileBlock:          expr ]
              ~ case: ast types Scope          do: [ compileScope:          expr ]
              ~ case: ast types Builtin        do: [ compileBuiltin:        expr ]
              ~ case: ast types Send           do: [ compileSend:           expr ]
              "TODO: Resend"
              ~ case: ast types Assignment     do: [ compileAssignment:     expr ]
              ~ case: ast types SlotAssignment do: [ compileSlotAssignment: expr ]
              ~ case: ast types Return         do: [ compileReturn:         expr ]
              ~ case: ast types Jump           do: [ compileJump:           expr ]
              ~ case: ast types JumpLabel      do: [ compileLabel:          expr ]
            ~ default: [ (std sys error) ThrowMessage: 'Unable to compile expression: Type not supported' ].
        );

        writeOn: w => w << 'a scoped compiler';
    };
}
