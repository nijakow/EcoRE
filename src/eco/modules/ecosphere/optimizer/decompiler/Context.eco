{
    static with inherited _ = std Clonable;
    decompiler = $;

    lexical, core,
    protected regs;

    with inherited trait = {
        static with inherited _ = std Trait;

        protected optimizer   => decompiler optimizer;
        protected markerAlloc => core allocator;

        _init: _lexical core: _core => (
            lexical  <- _lexical.
            core     <- _core.
            regs     <- std util newMap.
          ^ self
        );

        initWithLexical: p => _init: (Yes: p) core: (p core);
        init => _init: No core: ((decompiler ContextCore) new);

        lexicalDepth => lexical yes: [ :l | (l lexicalDepth + 1) ] no: 0;

        lexical: depth => (
            (depth == 0) if: [ ^ self ].
          ^ lexical yes lexical: (depth - 1)
        );

        translateRegister: n => (
            (regs at: n) yes: [ :v | ^ v ].

            | r <- markerAlloc allocate |

            regs at: n put: r.
          ^ r
        );

        wrap => (decompiler Context) clone initWithLexical: self;
    }
}
