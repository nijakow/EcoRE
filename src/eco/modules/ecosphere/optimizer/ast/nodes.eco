{
    static with inherited _ = std Module;
    protected contextModule = $;

    own ASTType => contextModule types;

    own AST = {
        static with inherited _ = std Clonable;
        protected contextModule = $;

        with inherited trait = {
            init => self;

            type => contextModule ASTType Default;

            acceptVisitor: visitor => visitor visitAST: self;

            isAtomic => false;

            childrenDo: block => self;

            writeOn: w => 'AST()';
        };
    };

    own ASTValueRef = {
        static with inherited _ = std Clonable;
        with inherited own AST = $ AST;

        marker;

        with inherited trait = {
            initWithMarker: _marker => (
                $(AST) init.
                marker <- _marker.
              ^ self
            );

            type => contextModule ASTType ValueRef;

            acceptVisitor: visitor => visitor visitASTValueRef: self;

            isAtomic => true;

            writeOn: w => w << 'ValueRef(' << marker << ')';
        };
    };

    own ASTConstant = {
        static with inherited _ = std Clonable;
        with inherited own AST = $ AST;

        constant;

        with inherited trait = {
            initWithConstant: _constant => (
                $(AST) init.
                constant <- _constant;
              ^ self
            );

            type => contextModule ASTType Constant;

            acceptVisitor: visitor => visitor visitASTConstant: self;

            isAtomic => true;

            writeOn: w => w << '(' << constant << ')';
        };
    };

    own ASTBlock = {
        static with inherited _ = std Clonable;
        with inherited own AST = $ AST;

        args, code;

        with inherited trait = {
            initWithArgs: _args Code: _code => (
                $(AST) init.
                args <- _args.
                code <- _code.
              ^ self
            );

            type => contextModule ASTType Block;

            acceptVisitor: visitor => visitor visitASTBlock: self;

            isAtomic => true;

            childrenDo: block => ( block value(code). $(AST) childrenDo: block );

            writeOn: w => (
                w << '['.
                args do: [ :arg | w << ' :' << arg ].
                w << ' | ' << code << ']'.
            );
        };
    };

    own ASTScope = {
        static with inherited _ = std Clonable;
        with inherited own AST = $ AST;

        body, context;

        with inherited trait = {
            initWithBody: _body Context: _context => (
                $(AST) init.
                body    <- _body.
                context <- _context.
              ^ self
            );

            type => contextModule ASTType Scope;

            acceptVisitor: visitor => visitor visitASTScope: self;

            isAtomic => body isAtomic;

            childrenDo: block => ( block value(body). $(AST) childrenDo: block );

            writeOn: w => w << '<| ' << body << ' |>';
        };
    };

    own ASTCompound = {
        static with inherited _ = std Clonable;
        with inherited own AST = $ AST;

        instructions;

        with inherited trait = {
            initWithInstructions: _instructions => (
                $(AST) init.
                instructions <- _instructions asArray.
              ^ self
            );

            type => contextModule ASTType Compound;

            acceptVisitor: visitor => visitor visitASTCompound: self;

            childrenDo: block => ( instructions do: [ :i | block value(i) ]. $(AST) childrenDo: block );

            writeOn: w => w << '(' << instructions << ')';
        };
    };

    own ASTAssignment = {
        static with inherited _ = std Clonable;
        with inherited own AST = $ AST;

        lhs, rhs;

        with inherited trait = {
            initWithLHS: _lhs RHS: _rhs => (
                $(AST) init.
                lhs <- _lhs.
                rhs <- _rhs.
              ^ self
            );

            type => contextModule ASTType Assignment;

            acceptVisitor: visitor => visitor visitASTAssignment: self;

            childrenDo: block => ( block value(lhs). block value(rhs). $(AST) childrenDo: block );

            writeOn: w => w << '(' << lhs << ' <- ' << rhs << ')';
        };
    };

    own ASTSlotAssignment = {
        static with inherited _ = std Clonable;
        with inherited own AST = $ AST;

        protected slot;
        protected lhs;
        protected rhs;

        with inherited trait = {
            initWithLHS: _lhs RHS: _rhs Slot: _slot => (
                $(AST) init.
                lhs <- _lhs.
                rhs <- _rhs.
                slot <- _slot.
              ^ self
            );

            type => contextModule ASTType SlotAssignment;

            acceptVisitor: visitor => visitor visitASTSlotAssignment: self;

            childrenDo: block => ( block value(lhs). block value(rhs). $(AST) childrenDo: block );

            writeOn: w => w << '(' << lhs << ' ' << slot << ' <- ' << rhs << ')';
        };
    };

    own ASTBuiltin = {
        static with inherited _ = std Clonable;
        with inherited own AST = $ AST;

        message, args, varargs;

        with inherited trait = {
            initWithMessage: _message Args: _args Varargs: _varargs => (
                $(AST) init.
                message  <- _message.
                args     <- _args asArray.
                varargs  <- _varargs.
              ^ self
            );

            type => contextModule ASTType Builtin;

            acceptVisitor: visitor => visitor visitASTBuiltin: self;

            childrenDo: block => ( args do: [ :a | block value(a) ]. $(AST) childrenDo: block );

            writeOn: w => (
                w << message.
                (args size == 0) -> [ w << '()'. ^ self ].
                w << '('.
                0 to: (args size - 2) do: [ :i |
                    w << (args at: i).
                    w << ', '.
                ].
                w << (args last).
                varargs -> [ w << ', ...' ].
                w << ')'.
            );
        };
    };

    own ASTSend = {
        static with inherited _ = std Clonable;
        with inherited own AST = $ AST;

        message, args, varargs;

        with inherited trait = {
            initWithMessage: _message Args: _args Varargs: _varargs => (
                $(AST) init.
                message  <- _message.
                args     <- _args asArray.
                varargs  <- _varargs.
              ^ self
            );

            type => contextModule ASTType Send;

            receiver => args at: 0;

            acceptVisitor: visitor => visitor visitASTSend: self;

            childrenDo: block => ( args do: [ :a | block value(a) ]. $(AST) childrenDo: block );

            writeOn: w => (
                w << (args first).
                w << ' ' << message.
                (args size > 1) -> [
                    w << '('.
                    1 to: (args size - 2) do: [ :i |
                        w << (args at: i).
                        w << ', '.
                    ].
                    w << (args last).
                    varargs -> [ w << ', ...' ].
                    w << ')'.
                ].
            );
        };
    };

    own ASTResend = {
        static with inherited _ = std Clonable;
        with inherited own AST = $ AST;

        message, args, varargs;

        with inherited trait = {
            initWithMessage: _message Args: _args Varargs: _varargs => (
                $(AST) init.
                message  <- _message.
                args     <- _args asArray.
                varargs  <- _varargs.
              ^ self
            );

            type => contextModule ASTType Resend;

            receiver => args at: 0;

            acceptVisitor: visitor => visitor visitASTResend: self;

            childrenDo: block => ( args do: [ :a | block value(a) ]. $(AST) childrenDo: block );

            writeOn: w => (
                w << '$(' << (args first).
                w << ') ' << message.
                (args size > 1) -> [
                    w << '('.
                    1 to: (args size - 2) do: [ :i |
                        w << (args at: i).
                        w << ', '.
                    ].
                    w << (args last).
                    varargs -> [ w << ', ...' ].
                    w << ')'.
                ].
            );
        };
    };

    own ASTReturn = {
        static with inherited _ = std Clonable;
        with inherited own AST = $ AST;

        returnValue;
        depth;

        with inherited trait = {
            initWithValue: _value Depth: _depth => (
                $(AST) init.
                returnValue <- _value.
                depth       <- _depth.
              ^ self
            );

            type => contextModule ASTType Return;

            acceptVisitor: visitor => visitor visitASTReturn: self;

            childrenDo: block => ( block value(returnValue). $(AST) childrenDo: block );

            writeOn: w => w << '^..' << depth << ' ' << returnValue;
        };
    };

    own ASTJump = {
        static with inherited _ = std Clonable;
        with inherited own AST = $ AST;

        label, returnValue;

        with inherited trait = {
            initWithLabel: _label Value: _value => (
                $(AST) init.
                label       <- _label.
                returnValue <- _value.
              ^ self
            );

            type => contextModule ASTType Jump;

            acceptVisitor: visitor => visitor visitASTJump: self;

            writeOn: w => w << 'ASTJump(' << label << ', ' << returnValue << ')';
        };
    };

    own ASTJumpLabel = {
        static with inherited _ = std Clonable;
        with inherited own AST = $ AST;

        label;

        with inherited trait = {
            initWithLabel: _label => (
                $(AST) init.
                label <- _label.
              ^ self
            );

            type => contextModule ASTType JumpLabel;

            acceptVisitor: visitor => visitor visitASTJumpLabel: self;

            writeOn: w => w << 'ASTJumpLabel(' << label << ')';
        };
    };

}
