{
    static with inherited _ = std Clonable;
    protected ast = $;

    writer, indentation;

    Indented: n => (ast Printer) clone initWithWriter: writer Indentation: (indentation + 1);


    protected indent: relative => (
        1 to: (indentation + relative) do: [
            writer << '  '.
        ]
    );

    protected indent => indent: 0;

    protected newline => ( writer newline. indent. );

    protected indented: block => (
        indentation <- indentation + 1.
        block value.
        indentation <- indentation - 1.
    );


    printBlock: expr => (
        writer << '['.
        expr args do: [ :arg |
            (writer << ' :' << arg).
        ].
        indented: [
            newline.
            print: expr code.
        ].
        newline.
        writer << ']'.
    );

    printCompoundBody: expr => (
        ((expr instructions size) == 1) if: [
            print: ((expr instructions) at: 0).
          ^ self
        ].
        expr instructions do: [ :instr |
            ((instr type) == (ast types Compound)) if: [
                printCompoundBody: instr.
            ] else: [
                newline.
                print: instr.
                writer << ','.
            ].
        ].
    );

    printCompound: expr => (
        writer << '('.
        indented: [
            printCompoundBody: expr.
        ].
        newline.
        writer << ')'.
    );

    printReturn: expr => (
        writer << '^ '.
        rprint: expr returnValue.
    );

    printScope: expr => (
        writer << '<| ' << (expr context depth - 1) << ' / ' << expr context lexicalDepth
                        << ', entry: ' << expr context entryLabel
                        << ', exit: ' << expr context exitLabel.
        indented: [
            newline.
            print: expr body.
        ].
        newline.
        writer << '|>'.
        "print: expr body."
    );

    printJump: expr => (
        print: expr returnValue.
        newline.
        writer << 'goto ' << expr label.
    );

    printSend: expr => (
        writer << 'send ' << expr message << ', varargs: ' << expr varargs.
        indented: [
            expr args do: [ :arg |
                newline.
                print: arg.
            ]
        ].
    );

    printAssignment: expr => (
        writer << 'assign ' << (expr lhs).
        indented: [
            newline.
            print: (expr rhs).
        ].
    );

    printSlotAssignment: expr => (
        writer << 'slot assign ' << (expr slot).
        indented: [
            newline.
            print: (expr lhs).
            newline.
            print: (expr rhs).
        ].
    );

    print: expr => (
        Switch: (expr type)
          ~ case: ast types Block          do: [ printBlock: expr          ]
          ~ case: ast types Compound       do: [ printCompound: expr       ]
          ~ case: ast types Return         do: [ printReturn: expr         ]
          ~ case: ast types Scope          do: [ printScope: expr          ]
          ~ case: ast types Jump           do: [ printJump: expr           ]
          ~ case: ast types Send           do: [ printSend: expr           ]
          ~ case: ast types Assignment     do: [ printAssignment: expr     ]
          ~ case: ast types SlotAssignment do: [ printSlotAssignment: expr ]
        ~ default: [ writer << '?' << expr ]
    );

    rprint: expr => (
        indented: [ print: expr ]
    );

    initWithWriter: _writer Indentation: _i => (
        writer      <- _writer.
        indentation <- _i.
      ^ self
    );

    initWithWriter: _writer => initWithWriter: _writer Indentation: 0;
}
