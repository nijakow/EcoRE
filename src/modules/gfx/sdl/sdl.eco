{
    static with inherited _ = std Module;

    protected lib,
    protected libttf;

    protected SDL_Init,
    protected SDL_Quit,
    protected SDL_GetError,
    protected SDL_PollEvent,
    protected SDL_CreateWindow,
    protected SDL_DestroyWindow,
    protected SDL_ShowWindow,
    protected SDL_HideWindow,
    protected SDL_GetWindowSurface,
    protected SDL_GetRenderer,
    protected SDL_CreateRenderer,
    protected SDL_DestroyRenderer,
    protected SDL_SetRenderDrawColor,
    protected SDL_RenderClear,
    protected SDL_RenderDrawPoint,
    protected SDL_RenderDrawLine,
    protected SDL_RenderDrawRect,
    protected SDL_RenderFillRect,
    protected SDL_RenderCopy,
    protected SDL_RenderFlush,
    protected SDL_RenderPresent;
    protected SDL_SetRenderTarget;
    protected SDL_GetRenderTarget;
    protected SDL_CreateRGBSurfaceWithFormat;
    protected SDL_CreateSoftwareRenderer;
    protected SDL_CreateTexture;
    protected SDL_CreateTextureFromSurface;
    protected SDL_DestroyTexture;
    protected SDL_QueryTexture;
    protected SDL_RenderSetClipRect;
    protected SDL_SetRenderTarget;

    protected TTF_Init,
    protected TTF_OpenFont,
    protected TTF_CloseFont,
    protected TTF_RenderText_Solid;

    SDL_Scancode,
    SDL_Keycode,
    SDL_Keysym,
    SDL_KeyboardEvent,
    SDL_MouseMotionEvent,
    SDL_MouseButtonEvent,
    SDL_Event,
    SDL_Rect,
    SDL_Color;

    INIT_EVERYTHING;

    SDL_PIXELFORMAT_UNKNOWN <- 0,
    SDL_PIXELFORMAT_INDEX1LSB <- 1,
    SDL_PIXELFORMAT_INDEX1MSB <- 2,
    SDL_PIXELFORMAT_INDEX4LSB <- 3,
    SDL_PIXELFORMAT_INDEX4MSB <- 4,
    SDL_PIXELFORMAT_INDEX8 <- 5,
    SDL_PIXELFORMAT_RGB332 <- 6,
    SDL_PIXELFORMAT_RGB444 <- 7,
    SDL_PIXELFORMAT_RGB555 <- 8,
    SDL_PIXELFORMAT_BGR555 <- 9,
    SDL_PIXELFORMAT_ARGB4444 <- 10,
    SDL_PIXELFORMAT_RGBA4444 <- 11,
    SDL_PIXELFORMAT_ABGR4444 <- 12,
    SDL_PIXELFORMAT_BGRA4444 <- 13,
    SDL_PIXELFORMAT_ARGB1555 <- 14,
    SDL_PIXELFORMAT_RGBA5551 <- 15,
    SDL_PIXELFORMAT_ABGR1555 <- 16,
    SDL_PIXELFORMAT_BGRA5551 <- 17,
    SDL_PIXELFORMAT_RGB565 <- 18,
    SDL_PIXELFORMAT_BGR565 <- 19,
    SDL_PIXELFORMAT_RGB24 <- 20,
    SDL_PIXELFORMAT_BGR24 <- 21,
    SDL_PIXELFORMAT_RGB888 <- 22,
    SDL_PIXELFORMAT_RGBX8888 <- 23,
    SDL_PIXELFORMAT_BGR888 <- 24,
    SDL_PIXELFORMAT_BGRX8888 <- 25,
    SDL_PIXELFORMAT_ARGB8888 <- 26,
    SDL_PIXELFORMAT_RGBA8888 <- 27,
    SDL_PIXELFORMAT_ABGR8888 <- 28,
    SDL_PIXELFORMAT_BGRA8888 <- 29,
    SDL_PIXELFORMAT_ARGB2101010 <- 30;

    SDL_TEXTUREACCESS_STATIC    <- 0,
    SDL_TEXTUREACCESS_STREAMING <- 1.
    SDL_TEXTUREACCESS_TARGET    <- 2;

    SDL_EventTypes = {
        static with inherited _ = std Module;

        KEYDOWN = 768,
        KEYUP = 769,
        MOUSEMOTION = 1024,
        MOUSEBUTTONDOWN = 1025,
        MOUSEBUTTONUP = 1026
    };

    DefaultFont;

    private DefaultFontPath <- (here / 'resources' / 'DejaVuSansMono.ttf') path;

    with inherited trait = {
        InitLinux => Setup: 'libSDL2.so' And: 'libSDL2_ttf.so';
        InitMac => Setup: '/opt/homebrew/Cellar/sdl2/2.26.3/lib/libSDL2-2.0.0.dylib'
                     And: '/opt/homebrew/Cellar/sdl2_ttf/2.20.2/lib/libSDL2_ttf-2.0.0.dylib';
        Init => (
            std os types Current
              ~ ifLinux: [ ^ InitLinux ]
              ~ ifMacOS: [ ^ InitMac   ].
            'SDL2 not supported on this platform' throw.
        );
        
        Setup: libpath And: ttfpath => (
            lib <- (ffi DLOpen: libpath) yes.
            libttf <- (ffi DLOpen: ttfpath) yes.
            INIT_EVERYTHING <- 62001.

            SDL_Rect <- ffi struct(ffi types int, ffi types int, ffi types int, ffi types int).
            SDL_Color <- ffi struct(ffi types uint8, ffi types uint8, ffi types uint8, ffi types uint8).
            SDL_Scancode <- ffi types enum.
            SDL_Keycode <- ffi types enum.
            SDL_Keysym <- ffi struct(SDL_Scancode, SDL_Keycode, ffi types uint16, ffi types uint32).
            SDL_KeyboardEvent <- ffi struct(ffi types uint32, ffi types uint32, ffi types uint32, ffi types uint8, ffi types uint8, ffi types uint8, ffi types uint8, SDL_Keysym).
            SDL_MouseMotionEvent <- ffi struct(ffi types uint32, ffi types uint32, ffi types uint32, ffi types uint32, ffi types sint32, ffi types sint32, ffi types sint32, ffi types sint32).
            SDL_MouseButtonEvent <- ffi struct(ffi types uint32, ffi types uint32, ffi types uint32, ffi types uint32, ffi types uint8, ffi types uint8, ffi types uint8, ffi types uint8, ffi types sint32, ffi types sint32).
            SDL_Event <- ffi union(ffi types uint32, SDL_KeyboardEvent, SDL_MouseMotionEvent, SDL_MouseButtonEvent, (ffi types char) array: 56).
            SDL_Init <- (lib function: #'SDL_Init' type: ((ffi types int) function(ffi types uint32))) yes.
            SDL_Quit <- (lib function: #'SDL_Quit' type: ((ffi types void) function)) yes.
            SDL_GetError <- (lib function: #'SDL_GetError' type: ((ffi types string) function)) yes.
            SDL_PollEvent <- (lib function: #'SDL_PollEvent' type: ((ffi types int) function(SDL_Event pointer))) yes.
            SDL_CreateWindow <- (lib function: #'SDL_CreateWindow' type: ((ffi types pointer) function(ffi types string, ffi types int, ffi types int, ffi types int, ffi types int, ffi types uint32))) yes.
            SDL_DestroyWindow <- (lib function: #'SDL_DestroyWindow' type: ((ffi types void) function(ffi types pointer))) yes.
            SDL_ShowWindow <- (lib function: #'SDL_ShowWindow' type: ((ffi types void) function(ffi types pointer))) yes.
            SDL_HideWindow <- (lib function: #'SDL_HideWindow' type: ((ffi types void) function(ffi types pointer))) yes.
            SDL_GetWindowSurface <- (lib function: #'SDL_GetWindowSurface' type: ((ffi types pointer) function(ffi types pointer))) yes.
            SDL_GetRenderer <- (lib function: #'SDL_GetRenderer' type: ((ffi types pointer) function(ffi types pointer))) yes.
            SDL_CreateRenderer <- (lib function: #'SDL_CreateRenderer' type: ((ffi types pointer) function(ffi types pointer, ffi types int, ffi types uint32))) yes.
            SDL_DestroyRenderer <- (lib function: #'SDL_DestroyRenderer' type: ((ffi types void) function(ffi types pointer))) yes.
            SDL_SetRenderDrawColor <- (lib function: #'SDL_SetRenderDrawColor' type: ((ffi types int) function(ffi types pointer, ffi types uint8, ffi types uint8, ffi types uint8, ffi types uint8))) yes.
            SDL_RenderClear <- (lib function: #'SDL_RenderClear' type: ((ffi types int) function(ffi types pointer))) yes.
            SDL_RenderDrawPoint <- (lib function: #'SDL_RenderDrawPoint' type: ((ffi types int) function(ffi types pointer, ffi types int, ffi types int))) yes.
            SDL_RenderDrawLine <- (lib function: #'SDL_RenderDrawLine' type: ((ffi types int) function(ffi types pointer, ffi types int, ffi types int, ffi types int, ffi types int))) yes.
            SDL_RenderDrawRect <- (lib function: #'SDL_RenderDrawRect' type: ((ffi types int) function(ffi types pointer, SDL_Rect pointer))) yes.
            SDL_RenderFillRect <- (lib function: #'SDL_RenderFillRect' type: ((ffi types int) function(ffi types pointer, SDL_Rect pointer))) yes.
            SDL_RenderCopy <- (lib function: #'SDL_RenderCopy' type: ((ffi types int) function(ffi types pointer, ffi types pointer, ffi types pointer, ffi types pointer))) yes.
            SDL_RenderFlush <- (lib function: #'SDL_RenderFlush' type: ((ffi types int) function(ffi types pointer))) yes.
            SDL_RenderPresent <- (lib function: #'SDL_RenderPresent' type: ((ffi types void) function(ffi types pointer))) yes.
            SDL_SetRenderTarget <- (lib function: #'SDL_SetRenderTarget' type: ((ffi types int) function(ffi types pointer, ffi types pointer))) yes.
            SDL_GetRenderTarget <- (lib function: #'SDL_GetRenderTarget' type: ((ffi types pointer) function(ffi types pointer))) yes.
            SDL_CreateRGBSurfaceWithFormat <- (lib function: #'SDL_CreateRGBSurfaceWithFormat' type: ((ffi types pointer) function(ffi types uint32, ffi types int, ffi types int, ffi types int, ffi types uint32))) yes.
            SDL_CreateSoftwareRenderer <- (lib function: #'SDL_CreateSoftwareRenderer' type: ((ffi types pointer) function(ffi types pointer))) yes.
            SDL_CreateTexture <- (lib function: #'SDL_CreateTexture' type: ((ffi types pointer) function(ffi types pointer, ffi types uint32, ffi types int, ffi types int, ffi types int))) yes.
            SDL_CreateTextureFromSurface <- (lib function: #'SDL_CreateTextureFromSurface' type: ((ffi types pointer) function(ffi types pointer, ffi types pointer))) yes.
            SDL_DestroyTexture <- (lib function: #'SDL_DestroyTexture' type: ((ffi types void) function(ffi types pointer))) yes.
            SDL_QueryTexture <- (lib function: #'SDL_QueryTexture' type: ((ffi types int) function(ffi types pointer, ffi types uint32 pointer, ffi types int pointer, ffi types int pointer, ffi types int pointer))) yes.
            SDL_RenderSetClipRect <- (lib function: #'SDL_RenderSetClipRect' type: ((ffi types int) function(ffi types pointer, SDL_Rect pointer))) yes.
            SDL_SetRenderTarget <- (lib function: #'SDL_SetRenderTarget' type: ((ffi types int) function(ffi types pointer, ffi types pointer))) yes.

            TTF_Init <- (libttf function: #'TTF_Init' type: (ffi types int) function()) yes.
            TTF_OpenFont <- (libttf function: #'TTF_OpenFont' type: (ffi types pointer) function(ffi types string, ffi types int)) yes.
            TTF_CloseFont <- (libttf function: #'TTF_CloseFont' type: (ffi types void) function(ffi types pointer)) yes.

            "We're using a trick to define TTF_RenderText_Solid since using an SDL_Color struct isn't possible with libffi right now"
            TTF_RenderText_Solid <- (libttf function: #'TTF_RenderText_Solid' type: (ffi types pointer) function(ffi types pointer, ffi types string, SDL_Color)) yes.

            InitEverything.
            DefaultFont <- OpenFont(DefaultFontPath, 12).
          ^ self
        );

        InitEverything => Init: INIT_EVERYTHING;
        Init: flags => ( SDL_Init value(flags). TTF_Init value. );
        Quit => SDL_Quit value();
        GetError => SDL_GetError value();
        PollEvent(event_ptr) => SDL_PollEvent value(event_ptr);
        CreateWindow(name, x, y, w, h, flags) => SDL_CreateWindow value(name, x, y, w, h, flags);
        DestroyWindow(window) => SDL_DestroyWindow value(window);
        ShowWindow(window) => SDL_ShowWindow value(window);
        HideWindow(window) => SDL_HideWindow value(window);
        GetWindowSurface(window) => SDL_GetWindowSurface value(window);
        GetRenderer(window) => SDL_GetRenderer value(window);
        CreateRenderer(window, index, flags) => SDL_CreateRenderer value(window, index, flags);
        DestroyRenderer(renderer) => SDL_DestroyRenderer value(renderer);
        SetRenderDrawColor(renderer, r, g, b, a) => SDL_SetRenderDrawColor value(renderer, r, g, b, a);
        RenderClear(renderer) => SDL_RenderClear value(renderer);
        RenderDrawPoint(renderer, x, y) => SDL_RenderDrawPoint value(renderer, x, y);
        RenderDrawLine(renderer, x1, y1, x2, y2) => SDL_RenderDrawLine value(renderer, x1, y1, x2, y2);
        RenderDrawRect(renderer, rect) => SDL_RenderDrawRect value(renderer, rect);
        RenderFillRect(renderer, rect) => SDL_RenderFillRect value(renderer, rect);
        RenderCopy(renderer, texture, srcrect, dstrect) => SDL_RenderCopy value(renderer, texture, srcrect, dstrect);
        RenderFlush(renderer) => SDL_RenderFlush value(renderer);
        RenderPresent(renderer) => SDL_RenderPresent value(renderer);
        SetRenderTarget(renderer, texture) => SDL_SetRenderTarget value(renderer, texture);
        GetRenderTarget(renderer) => SDL_GetRenderTarget value(renderer);
        CreateRGBSurfaceWithFormat(width, height, depth, format) => SDL_CreateRGBSurfaceWithFormat value(0, width, height, depth, format);
        CreateSimpleRGBSurface(width, height) => CreateRGBSurfaceWithFormat(width, height, 32, SDL_PIXELFORMAT_UNKNOWN);
        CreateSoftwareRenderer(surface) => SDL_CreateSoftwareRenderer value(surface);
        CreateTexture(renderer, pixelformat, access, width, height) => SDL_CreateTexture value(renderer, pixelformat, access, width, height);
        CreateTextureFromSurface(renderer, surface) => SDL_CreateTextureFromSurface value(renderer, surface);
        DestroyTexture(texture) => SDL_DestroyTexture value(texture);
        QueryTexture(texture, format, access, w, h) => SDL_QueryTexture value(texture, format, access, w, h);
        RenderSetClipRect(renderer, rect) => SDL_RenderSetClipRect value(renderer, rect);
        SetRenderTarget(renderer, texture) => SDL_SetRenderTarget value(renderer, texture);

        OpenFont(name, size) => TTF_OpenFont value(name, size);
        CloseFont(font) => TTF_CloseFont value(font);
        RenderText_Solid(font, text, r, g, b, a) => (
            | color <- SDL_Color alloc |
            color at: 0 put: r.
            color at: 1 put: g.
            color at: 2 put: b.
            color at: 3 put: a.
            TTF_RenderText_Solid value(font, text, color)
        );

        "TODO..."
    };
}
