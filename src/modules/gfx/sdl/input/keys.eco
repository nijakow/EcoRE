{
    static with inherited _ = std Module;

    own keycodes = {
        static with inherited _ = std Module;

        trait = {
            static with inherited _ = std Trait;

            ifEscape:    block => self;
            ifBackspace: block => self;

            writeOn: w => w << 'a key';
        };

        letter_a = { static with inherited _ = std Enum; with inherited trait = $ trait; };
        letter_b = { static with inherited _ = std Enum; with inherited trait = $ trait; };
        letter_c = { static with inherited _ = std Enum; with inherited trait = $ trait; };
        letter_d = { static with inherited _ = std Enum; with inherited trait = $ trait; };
        letter_e = { static with inherited _ = std Enum; with inherited trait = $ trait; };
        letter_f = { static with inherited _ = std Enum; with inherited trait = $ trait; };
        letter_g = { static with inherited _ = std Enum; with inherited trait = $ trait; };
        letter_h = { static with inherited _ = std Enum; with inherited trait = $ trait; };
        letter_i = { static with inherited _ = std Enum; with inherited trait = $ trait; };
        letter_j = { static with inherited _ = std Enum; with inherited trait = $ trait; };
        letter_k = { static with inherited _ = std Enum; with inherited trait = $ trait; };
        letter_l = { static with inherited _ = std Enum; with inherited trait = $ trait; };
        letter_m = { static with inherited _ = std Enum; with inherited trait = $ trait; };
        letter_n = { static with inherited _ = std Enum; with inherited trait = $ trait; };
        letter_o = { static with inherited _ = std Enum; with inherited trait = $ trait; };
        letter_p = { static with inherited _ = std Enum; with inherited trait = $ trait; };
        letter_q = { static with inherited _ = std Enum; with inherited trait = $ trait; };
        letter_r = { static with inherited _ = std Enum; with inherited trait = $ trait; };
        letter_s = { static with inherited _ = std Enum; with inherited trait = $ trait; };
        letter_t = { static with inherited _ = std Enum; with inherited trait = $ trait; };
        letter_u = { static with inherited _ = std Enum; with inherited trait = $ trait; };
        letter_v = { static with inherited _ = std Enum; with inherited trait = $ trait; };
        letter_w = { static with inherited _ = std Enum; with inherited trait = $ trait; };
        letter_x = { static with inherited _ = std Enum; with inherited trait = $ trait; };
        letter_y = { static with inherited _ = std Enum; with inherited trait = $ trait; };
        letter_z = { static with inherited _ = std Enum; with inherited trait = $ trait; };

        letter_A = { static with inherited _ = std Enum; with inherited trait = $ trait; };
        letter_B = { static with inherited _ = std Enum; with inherited trait = $ trait; };
        letter_C = { static with inherited _ = std Enum; with inherited trait = $ trait; };
        letter_D = { static with inherited _ = std Enum; with inherited trait = $ trait; };
        letter_E = { static with inherited _ = std Enum; with inherited trait = $ trait; };
        letter_F = { static with inherited _ = std Enum; with inherited trait = $ trait; };
        letter_G = { static with inherited _ = std Enum; with inherited trait = $ trait; };
        letter_H = { static with inherited _ = std Enum; with inherited trait = $ trait; };
        letter_I = { static with inherited _ = std Enum; with inherited trait = $ trait; };
        letter_J = { static with inherited _ = std Enum; with inherited trait = $ trait; };
        letter_K = { static with inherited _ = std Enum; with inherited trait = $ trait; };
        letter_L = { static with inherited _ = std Enum; with inherited trait = $ trait; };
        letter_M = { static with inherited _ = std Enum; with inherited trait = $ trait; };
        letter_N = { static with inherited _ = std Enum; with inherited trait = $ trait; };
        letter_O = { static with inherited _ = std Enum; with inherited trait = $ trait; };
        letter_P = { static with inherited _ = std Enum; with inherited trait = $ trait; };
        letter_Q = { static with inherited _ = std Enum; with inherited trait = $ trait; };
        letter_R = { static with inherited _ = std Enum; with inherited trait = $ trait; };
        letter_S = { static with inherited _ = std Enum; with inherited trait = $ trait; };
        letter_T = { static with inherited _ = std Enum; with inherited trait = $ trait; };
        letter_U = { static with inherited _ = std Enum; with inherited trait = $ trait; };
        letter_V = { static with inherited _ = std Enum; with inherited trait = $ trait; };
        letter_W = { static with inherited _ = std Enum; with inherited trait = $ trait; };
        letter_X = { static with inherited _ = std Enum; with inherited trait = $ trait; };
        letter_Y = { static with inherited _ = std Enum; with inherited trait = $ trait; };
        letter_Z = { static with inherited _ = std Enum; with inherited trait = $ trait; };

        digit_0 = { static with inherited _ = std Enum; with inherited trait = $ trait; };
        digit_1 = { static with inherited _ = std Enum; with inherited trait = $ trait; };
        digit_2 = { static with inherited _ = std Enum; with inherited trait = $ trait; };
        digit_3 = { static with inherited _ = std Enum; with inherited trait = $ trait; };
        digit_4 = { static with inherited _ = std Enum; with inherited trait = $ trait; };
        digit_5 = { static with inherited _ = std Enum; with inherited trait = $ trait; };
        digit_6 = { static with inherited _ = std Enum; with inherited trait = $ trait; };
        digit_7 = { static with inherited _ = std Enum; with inherited trait = $ trait; };
        digit_8 = { static with inherited _ = std Enum; with inherited trait = $ trait; };
        digit_9 = { static with inherited _ = std Enum; with inherited trait = $ trait; };

        symbol_semicolon         = { static with inherited _ = std Enum; with inherited trait = $ trait; };
        symbol_equal             = { static with inherited _ = std Enum; with inherited trait = $ trait; };
        symbol_comma             = { static with inherited _ = std Enum; with inherited trait = $ trait; };
        symbol_minus             = { static with inherited _ = std Enum; with inherited trait = $ trait; };
        symbol_period            = { static with inherited _ = std Enum; with inherited trait = $ trait; };
        symbol_slash             = { static with inherited _ = std Enum; with inherited trait = $ trait; };
        symbol_tilde             = { static with inherited _ = std Enum; with inherited trait = $ trait; };
        symbol_backslash         = { static with inherited _ = std Enum; with inherited trait = $ trait; };
        symbol_left_parenthesis  = { static with inherited _ = std Enum; with inherited trait = $ trait; };
        symbol_right_parenthesis = { static with inherited _ = std Enum; with inherited trait = $ trait; };
        symbol_left_bracket      = { static with inherited _ = std Enum; with inherited trait = $ trait; };
        symbol_right_bracket     = { static with inherited _ = std Enum; with inherited trait = $ trait; };
        symbol_left_brace        = { static with inherited _ = std Enum; with inherited trait = $ trait; };
        symbol_right_brace       = { static with inherited _ = std Enum; with inherited trait = $ trait; };
        symbol_quote             = { static with inherited _ = std Enum; with inherited trait = $ trait; };

        special_enter     = { static with inherited _ = std Enum; with inherited trait = $ trait; };
        special_escape    = { static with inherited _ = std Enum; with inherited trait = $ trait; ifEscape:    block => ( block value. ^ self ); };
        special_backspace = { static with inherited _ = std Enum; with inherited trait = $ trait; ifBackspace: block => ( block value. ^ self ); };
        special_tab       = { static with inherited _ = std Enum; with inherited trait = $ trait; };
        special_space     = { static with inherited _ = std Enum; with inherited trait = $ trait; };

        special_unknown   = { static with inherited _ = std Enum; with inherited trait = $ trait; };
    },

    own sdlkeys = {
        static with inherited _ = std Module;

        SDLK_ESCAPE = 27,
        SDLK_BACKSPACE = 8,
        SDLK_TAB = 9,
        SDLK_RETURN = 13,
        SDLK_SPACE = 32,
    };

    Translate: sdlkey => (
        Switch: sdlkey
          ~ case: sdlkeys SDLK_ESCAPE    do: [ ^ keycodes special_escape    ]
          ~ case: sdlkeys SDLK_BACKSPACE do: [ ^ keycodes special_backspace ]
          ~ case: sdlkeys SDLK_TAB       do: [ ^ keycodes special_tab       ]
          ~ case: sdlkeys SDLK_RETURN    do: [ ^ keycodes special_enter     ]
          ~ case: sdlkeys SDLK_SPACE     do: [ ^ keycodes special_space     ]
        ~ default: [ ^ keycodes special_unknown ]
    );
}
