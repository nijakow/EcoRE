
{
    protected with parent = std;

    protected lib;

    protected SDL_Init,
    protected SDL_Quit,
    protected SDL_PollEvent,
    protected SDL_CreateWindow,
    protected SDL_DestroyWindow,
    protected SDL_ShowWindow,
    protected SDL_HideWindow,
    protected SDL_GetWindowSurface,
    protected SDL_GetRenderer,
    protected SDL_CreateRenderer,
    protected SDL_DestroyRenderer,
    protected SDL_SetRenderDrawColor,
    protected SDL_RenderClear,
    protected SDL_RenderDrawPoint,
    protected SDL_RenderDrawLine,
    protected SDL_RenderFlush,
    protected SDL_RenderPresent;

    INIT_EVERYTHING;

    with inherited trait = {
        init => init: 'libSDL2.so';
        
        init: libpath => (
            lib <- (ffi DLOpen: libpath) yes.
            INIT_EVERYTHING <- 62001.
            SDL_Init <- (lib getFunction: #'SDL_Init' Type: ((ffi types int) function(ffi types uint32))) yes.
            SDL_Quit <- (lib getFunction: #'SDL_Quit' Type: ((ffi types void) function)) yes.
            SDL_PollEvent <- (lib getFunction: #'SDL_PollEvent' Type: ((ffi types int) function(ffi types pointer))) yes.
            SDL_CreateWindow <- (lib getFunction: #'SDL_CreateWindow' Type: ((ffi types pointer) function(ffi types string, ffi types int, ffi types int, ffi types int, ffi types int, ffi types uint32))) yes.
            SDL_DestroyWindow <- (lib getFunction: #'SDL_DestroyWindow' Type: ((ffi types void) function(ffi types pointer))) yes.
            SDL_ShowWindow <- (lib getFunction: #'SDL_ShowWindow' Type: ((ffi types void) function(ffi types pointer))) yes.
            SDL_HideWindow <- (lib getFunction: #'SDL_HideWindow' Type: ((ffi types void) function(ffi types pointer))) yes.
            SDL_GetWindowSurface <- (lib getFunction: #'SDL_GetWindowSurface' Type: ((ffi types pointer) function(ffi types pointer))) yes.
            SDL_GetRenderer <- (lib getFunction: #'SDL_GetRenderer' Type: ((ffi types pointer) function(ffi types pointer))) yes.
            SDL_CreateRenderer <- (lib getFunction: #'SDL_CreateRenderer' Type: ((ffi types pointer) function(ffi types pointer, ffi types int, ffi types uint32))) yes.
            SDL_DestroyRenderer <- (lib getFunction: #'SDL_DestroyRenderer' Type: ((ffi types void) function(ffi types pointer))) yes.
            SDL_SetRenderDrawColor <- (lib getFunction: #'SDL_SetRenderDrawColor' Type: ((ffi types int) function(ffi types pointer, ffi types uint8, ffi types uint8, ffi types uint8, ffi types uint8))) yes.
            SDL_RenderClear <- (lib getFunction: #'SDL_RenderClear' Type: ((ffi types int) function(ffi types pointer))) yes.
            SDL_RenderDrawPoint <- (lib getFunction: #'SDL_RenderDrawPoint' Type: ((ffi types int) function(ffi types pointer, ffi types int, ffi types int))) yes.
            SDL_RenderDrawLine <- (lib getFunction: #'SDL_RenderDrawLine' Type: ((ffi types int) function(ffi types pointer, ffi types int, ffi types int, ffi types int, ffi types int))) yes.
            SDL_RenderFlush <- (lib getFunction: #'SDL_RenderFlush' Type: ((ffi types int) function(ffi types pointer))) yes.
            SDL_RenderPresent <- (lib getFunction: #'SDL_RenderPresent' Type: ((ffi types void) function(ffi types pointer))) yes.
          ^ self
        );

        InitEverything => Init(INIT_EVERYTHING);
        Init(flags) => SDL_Init value(flags);
        Quit => SDL_Quit value();
        PollEvent(event_ptr) => SDL_PollEvent value(event_ptr);
        CreateWindow(name, x, y, w, h, flags) => SDL_CreateWindow value(name, x, y, w, h, flags);
        DestroyWindow(window) => SDL_DestroyWindow value(window);
        ShowWindow(window) => SDL_ShowWindow value(window);
        HideWindow(window) => SDL_HideWindow value(window);
        GetWindowSurface(window) => SDL_GetWindowSurface value(window);
        GetRenderer(window) => SDL_GetRenderer value(window);
        CreateRenderer(window, index, flags) => SDL_CreateRenderer value(window, index, flags);
        DestroyRenderer(renderer) => SDL_DestroyRenderer value(renderer);
        SetRenderDrawColor(renderer, r, g, b, a) => SDL_SetRenderDrawColor value(renderer, r, g, b, a);
        RenderClear(renderer) => SDL_RenderClear value(renderer);
        RenderDrawPoint(renderer, x, y) => SDL_RenderDrawPoint value(renderer, x, y);
        RenderDrawLine(renderer, x1, y1, x2, y2) => SDL_RenderDrawLine value(renderer, x1, y1, x2, y2);
        RenderFlush(renderer) => SDL_RenderFlush value(renderer);
        RenderPresent(renderer) => SDL_RenderPresent value(renderer);

        "TODO..."
    };

    NewWindowWithTitle: title X: x Y: y W: w H: h => (Window clone) init: CreateWindow(title, x, y, w, h, 0);

    own Window = {
        protected sdl = $,
        protected winptr,
        renderer;

        with inherited trait = {
            init: _winptr => (
                winptr   <- _winptr.
                renderer <- (sdl Renderer clone) init: (sdl CreateRenderer(_winptr, -1, 0));
              ^ self
            );

            destroy => sdl DestroyWindow(winptr);

            show => sdl ShowWindow(winptr);
            hide => sdl HideWindow(winptr);

            writeOn: w => w << 'an sdl window';
        };

        with inherited parent = std Clonable;
    };

    own Renderer = {
        protected sdl = $,
        protected renptr;

        with inherited trait = {
            init: _renptr => (
                renptr <- _renptr.
              ^ self
            );

            destroy => sdl DestroyRenderer(renptr);

            flush => sdl RenderFlush(renptr);
            present => sdl RenderPresent(renptr);

            setR: r G: g B: b A: a => sdl SetRenderDrawColor(renptr, r, g, b, a);
            setR: r G: g B: b => setR: r G: g B: b A: 255;

            clear => sdl RenderClear(renptr);
            drawPointX: x Y: y => sdl RenderDrawPoint(renptr, x, y);
            drawLineX: x1 Y: y1 X: x2 Y: y2 => sdl RenderDrawLine(renptr, x1, y1, x2, y2);

            writeOn: w => w << 'an sdl renderer';
        };

        with inherited parent = std Clonable;
    };
}
