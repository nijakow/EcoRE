
{
    static with inherited _ = std Module;
    with wisp = $;

    MoleculeCorePaneForMirror: mirror Ui: ui Rebuilder: rebuilder => (
        |
            slots <- ui VBox()
        |
        
        mirror slotNames do: [ :slotName |
            |
                slotMirror <- (mirror slot: slotName)
            |
            slots add: (
                ui HBox(
                    ui Framed(
                        ui Padding(3,
                            ui HBox(
                                ui Label: (slotMirror isProtected if: 'p' else: ' '),
                                ui Label: (slotMirror isStatic if: 's' else: ' '),
                                ui Label: (slotMirror isFinal if: 'f' else: ' '),
                                ui Label: (slotMirror isWith if: 'w' else: ' '),
                                ui Label: (slotMirror isInherited if: 'i' else: ' '),
                            ) ~ xLayout: ui layouts ShrinkWrap,
                        ) ~ xLayout: ui layouts ShrinkWrap,
                    ) ~ xLayout: ui layouts ShrinkWrap
                      ~ yLayout: ui layouts Flexible,
                    ui Button(ui Padding(3, ui Label: (slotMirror name asString)),
                        $[ :(wisp, mirror) :sender |
                            (wisp actions open) Object: (mirror slotValue)
                        ] bind(wisp, slotMirror)
                    ) ~ xLayout: ui layouts Flexible
                      ~ yLayout: ui layouts Flexible,
                    "TODO: Connector"
                ) ~ xLayout: ui layouts Flexible
                  ~ yLayout: ui layouts ShrinkWrap,
            )
        ].

      ^ slots
    );

    MoleculeCorePaneForObject: molecule Ui: ui Rebuilder: rebuilder => MoleculeCorePaneForMirror: (std reflect Mirror: molecule) Ui: ui Rebuilder: rebuilder;

    MoleculePaneFor: object Ui: ui => (
        ui WithRebuilderDo: $[ :(us, ui, object) :rebuilder |
            ui Stacked(
                ui VBox(
                    ui Spacer,
                    ui HBox(
                        ui Spacer,
                        ui Button(ui Padding(5, ui Label: '+'),
                            $[ :(object, rebuilder) :sender |
                                "TODO"
                                #'ecosphere.ecore.reflect.add_value_slot'(object, -1, 1, any, #'newSlot', 42).
                                rebuilder value.
                            ] bind(object, rebuilder)
                        ),
                        ui SpacerW: 10 H: 1
                    ) ~ yLayout: ui layouts ShrinkWrap,
                ),
                ui Scrollable(ui Padding(10, us MoleculeCorePaneForObject: object Ui: ui Rebuilder: rebuilder)),
            ),
        ] bind(self, ui, object)
    );

    InterfacePaneFor: object Ui: ui => (
        (object == any) if: [ ^ PresentationPaneFor: object Ui: ui ].
        
        ui Scrollable(
            ui Padding(10,
                ( | vbox <- ui VBox() |
                    0 for: (object size) do: [ :slotIndex |
                        vbox add: (
                            | hbox <- ui HBox() |
                            
                            hbox add: (
                                ui Framed(
                                    ui Padding(3, ui Label: ((object nameForSlotIndex: slotIndex) asString)),
                                ),
                            ) ~ xLayout: ui layouts Flexible
                              ~ yLayout: ui layouts ShrinkWrap.
                            0 for: (object argCountForSlotIndex: slotIndex) do: [ :argIndex |
                                hbox add: (
                                    ui Button(
                                        ui Padding(3, ui Label: 'arg'),
                                        $[ :(wisp, type) :sender |
                                            (wisp actions open) Object: type
                                        ] bind(wisp, object argTypeForSlotIndex: slotIndex Arg: argIndex)
                                    ),
                                ) ~ xLayout: ui layouts Flexible
                                  ~ yLayout: ui layouts ShrinkWrap.
                            ].
                            (object hasVarargsForSlotIndex: slotIndex) if: [
                                hbox add: (
                                    ui Framed(
                                        ui Padding(3, ui Label: '...'),
                                    ) ~ xLayout: ui layouts ShrinkWrap,
                                ) ~ xLayout: ui layouts Flexible
                                  ~ yLayout: ui layouts ShrinkWrap.
                            ].
                            hbox
                        )
                    ].
                    vbox
                )
            )
        )
    );

    ArrayPaneFor: object Ui: ui => (
        ui Scrollable(
            ui Padding(10,
                ( | vbox <- ui VBox() |
                    0 for: (object size) do: [ :slotIndex |
                        vbox add: (
                            ui HBox(
                                ui Button(
                                    ui Center(
                                        ui Label: (
                                            | sw <- (std io StringWriter) new |
                                            sw << slotIndex.
                                            sw build
                                        )
                                    ),
                                    $[ :(wisp, object, index) :sender |
                                        (wisp actions open) Object: (object at: index)
                                    ] bind(wisp, object, slotIndex)
                                ) ~ xLayout: ui layouts Flexible
                                  ~ yLayout: ui layouts ShrinkWrap,
                            ) ~ xLayout: ui layouts Flexible
                              ~ yLayout: ui layouts ShrinkWrap.
                        )
                    ].
                    vbox
                )
            )
        )
    );

    CodePaneFor: object Ui: ui => (
        |
            writer       <- (std io StringWriter) new,
            disassembled <- (app ecosphere optimizer) Disassemble: object,
            ast          <- (app ecosphere optimizer) BuildAST: disassembled,
            rewritten    <- (app ecosphere optimizer) RewriteAST: ast
        |

        (((app ecosphere optimizer) ast Printer) clone initWithWriter: writer) print: rewritten ast.

        ui Scrollable(
            ui TextField: (writer build)
        )
    );


    PresentationPaneFor: object Ui: ui => (
        | writer <- (std io StringWriter) new |
        
        writer << object.

        ui Scrollable(
            ui Padding(5,
                ui TextField: (writer build)
            )
        )
    );

    OutlinerContentPaneFor: object Ui: ui => (
        begin
            ~ if: [ std reflect primitives IsMolecule:  object ] then: [ ^ MoleculePaneFor:  object Ui: ui ]
            ~ if: [ std reflect primitives IsInterface: object ] then: [ ^ InterfacePaneFor: object Ui: ui ]
            ~ if: [ std reflect primitives IsArray:     object ] then: [ ^ ArrayPaneFor:     object Ui: ui ]
            ~ if: [ std reflect primitives IsCode:      object ] then: [ ^ CodePaneFor:      object Ui: ui ]
        ~ default: [ ^ PresentationPaneFor: object Ui: ui ]
    );

    OutlinerPaneFor: object Ui: ui => (
        | vbox <- ui VBox() |
        vbox add: (ui Framed(OutlinerContentPaneFor: object Ui: ui)).
        vbox add: (
            ui HBox(
                ui Button(ui Padding(5, ui Label: 'Copy'),
                    $[ :(wisp, object) :sender |
                        "TODO: Copy to clipboard"
                        ((wisp framework actions) clipboard) CopyObject: object
                     ] bind(wisp, object)
                ) ~ xLayout: ui layouts Flexible,
                ui Button(ui Padding(5, ui Label: 'Proxy'),
                    $[ :(wisp, object) :sender |
                        (wisp actions open) Object: (sys builtins reflect GetProxy(object))
                    ] bind(wisp, object)
                ) ~ xLayout: ui layouts Flexible,
                ui Button(ui Padding(5, ui Label: 'Shell'),
                    $[ :(wisp, ui, vbox, object) :sender |
                        vbox add: ((wisp builder) ObjectShellPaneFor: object Ui: ui).
                    ] bind(wisp, ui, vbox, object)
                ) ~ xLayout: ui layouts Flexible,
            ) ~ yLayout: ui layouts ShrinkWrap,
        ).
      ^ vbox
    );

    OutlinerWindowFor: object Ui: ui => (
        ui Window(400, 400,
            OutlinerPaneFor: object Ui: ui
        )
    );

    ObjectShellPaneFor: object Ui: ui => (
        | vbox <- ui VBox() |
        vbox add: (
            ui DocumentEditor: (document FromString: '')
                    OnAccept: $[ :(app, object) :editor | (app framework actions) eval DocumentAndShowResult: (editor document) Environment: object ] bind(app, object)
                    OnCancel: $[ :(vbox) :editor | vbox unlink ] bind(vbox)
        ).
      ^ vbox
    );
}
