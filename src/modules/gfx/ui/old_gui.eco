{
    static with inherited _ = std Module;
    sdl = (here / 'gfx' / 'sdl' / '_.eco') import.
    morphic = (here / 'gfx' / 'morphic' / '_.eco') import.

    own MorphicHandler = {
        static with inherited _ = std Module;
        private morphic = $ morphic;

        protected mouseX,
        protected mouseY;

        protected program,
        protected renderer,
        protected morph;

        with inherited trait = {
            VBox(...) => (
                | box <- (morphic morphs VBoxMorph) new |
                std util newArray(...) do: [ :e | box add: e ].
              ^ box
            );

            HBox(...) => (
                | box <- (morphic morphs HBoxMorph) new |
                std util newArray(...) do: [ :e | box add: e ].
              ^ box
            );

            Button => (
                morphic morphs StackMorph new
                  ~ rigidWidth: 25
                  ~ rigidHeight: 25
                  ~ add: (morphic morphs ColorMorph new ~ r: 100 g: 0 b: 100)
                  ~ add: (morphic morphs ButtonMorph new)
            );

            LabeledButton: text => (
                morphic morphs StackMorph new
                  ~ xLayout: (morphic layouts ShrinkWrap)
                  ~ yLayout: (morphic layouts ShrinkWrap)
                  ~ add: (morphic morphs ColorMorph new ~ r: 100 g: 0 b: 100)
                  ~ add: (Label: text)
                  ~ add: (morphic morphs ButtonMorph new)
            );

            Frame(title, content) => (
                VBox(
                    HBox(title, HBox(Button, Spacer, Button, Spacer, Button) ~ rigidWidth: 100) ~ rigidHeight: 50,
                    content
                ) ~ rigidWidth: 300 ~ rigidHeight: 400
            );

            Label: text => (morphic morphs LabelMorph new) ~ text: text;

            ShrinkWrap(e)  => e ~ xLayout: morphic layouts ShrinkWrap ~ yLayout: morphic layouts ShrinkWrap;
            RedBlock(w, h) => morphic morphs ColorMorph new ~ r: 100 g: 0 b: 0 ~ rigidWidth: w ~ rigidHeight: h;
            GreenBlock(w, h) => morphic morphs ColorMorph new ~ r: 0 g: 100 b: 0 ~ rigidWidth: w ~ rigidHeight: h;
            BlueBlock(w, h) => morphic morphs ColorMorph new ~ r: 0 g: 0 b: 100 ~ rigidWidth: w ~ rigidHeight: h;
            YellowBlock    => morphic morphs ColorMorph new ~ r: 100 g: 100 b: 0;
            Spacer         => morphic morphs Morph new;
            Center(e)      => HBox(Spacer, VBox(Spacer, e, Spacer) ~ xLayout: morphic layouts ShrinkWrap, Spacer);

            makeF => (  VBox(
                            RedBlock(50, 50),
                            YellowBlock,
                            Center(RedBlock(25, 25)),
                            YellowBlock,
                            RedBlock(50, 50),
                        ) ~ xLayout: morphic layouts ShrinkWrap
                    );
            makeX => (
                morphic morphs HBoxMorph new
                    ~ add: ( morphic morphs ColorMorph new ~ r: 100 g: 100 b: 100 )
                    ~ add: makeF
                    ~ add: ( morphic morphs ColorMorph new ~ r: 100 g: 100 b: 100 )
                    ~ add: makeF
                    ~ add: ( morphic morphs ColorMorph new ~ r: 100 g: 100 b: 100 )
            );
            makeY => (
                morphic morphs VBoxMorph new
                  ~ add: makeX
                  ~ add: ( morphic morphs ColorMorph new ~ r: 0 g: 0 b: 100 )
                  ~ add: makeX
            );
            makeFrame => (
                Frame(Center(GreenBlock(100, 50)), YellowBlock)
            );

            init => (
                morph <- morphic morphs WorldMorph new
                           ~ add: (GreenBlock(50, 75) ~ moveToX: 400 Y: 100)
                           ~ add: (BlueBlock(100, 100) ~ moveToX: 600 Y: 75)
                           ~ add: ((Label: 'Hello, world! This is a test! :D') ~ moveToX: 600 Y: 600)
                           ~ add: ((morphic morphs FrameMorph new) ~ rigidWidth: 300 ~ rigidHeight: 300 ~ moveToX: 650 Y: 200)
                           ~ add: ((morphic morphs StackMorph new) ~ boundsX: 750 Y: 50 W: 50 H: 50)
                           ~ add: ((morphic morphs VBoxMorph new) ~ boundsX: 825 Y: 50 W: 50 H: 50)
                           ~ add: (makeFrame ~ moveToX: 250 Y: 320).
                1 to: 5 do: [ :x |
                    1 to: 5 do: [ :y |
                        morph add: (RedBlock(20, 20) ~ moveToX: x * 40 Y: y * 40)
                    ].
                ].
                morph add: ((LabeledButton: 'Click me!') ~ moveToX: 50 Y: 300).
                mouseX <- 0.
                mouseY <- 0.
              ^ self
            );

            setProgram: p => (
                program  <- p.
                renderer <- morphic Renderer clone
                              initWithSDLRenderer: program window renderer
                                                X: 0
                                                Y: 0
                                                W: program window width
                                                H: program window height.
                morph bounds: renderer bounds.
                morph renderer: renderer.
                morph layoutInPlace.
            );

            tick => (
                morph handMorph moveToX: mouseX Y: mouseY.
                morph maybeUpdate.
                morph render.
            );

            findMorphAtX: x Y: y => (
                | v <- No |
                morph xRayAtX: x Y: y Do: [ :m |
                    v <- Yes: m
                ].
              ^ v
            );

            handleEvent: event => (
                event isMouseMotionEvent -> [
                    mouseX <- event mouseMotionX.
                    mouseY <- event mouseMotionY.
                ].
                event isMouseButtonDown -> [
                    morph handMorph leftClick.
                ].
                event isKeyDown -> [ ^ program stop ].
            );
        };
    };

    Main => (
        sdl Init.
        |
            win     <- sdl NewWindowWithTitle: 'Morphic' X: 100 Y: 100 W: 1200 H: 750,
            program <- sdl Program clone initWithWindow: win Handler: (MorphicHandler new)
        |
        program run.
    );
}
