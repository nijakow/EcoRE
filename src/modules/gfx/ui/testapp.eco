{
    static with inherited _ = std Clonable;
    with inherited own MorphicApp = $ MorphicApp;

    MirrorBuilder = {
        static with inherited _ = std Module;
        builder <- $ ui.

        SlotOutliner: slotMirror => (
            builder ShrinkWrap(
                builder HBox(
                    builder Label: (slotMirror isProtected if: 'p' else: ' '),
                    builder Label: (slotMirror isStatic if: 's' else: ' '),
                    builder Label: (slotMirror isFinal if: 'f' else: ' '),
                    builder Label: (slotMirror isWith if: 'w' else: ' '),
                    builder Label: (slotMirror isInherited if: 'i' else: ' '),
                    builder SpacerW: 10 H: 1,
                    builder Button(builder Label: (slotMirror name asString),
                                builder StateAction(std util newArray(self, slotMirror), {
                                    value(sender) => (sender world yes) open: ((state at: 0) OutlinerWindowForObject: ((state at: 1) slotValue))
                                })
                    )
                )
            )
        );

        OutlinerPaneForMirror: mirror => (
            | slots <- builder make VBoxMorph |
            mirror slotNames do: [ :slotName |
                slots add: (SlotOutliner: (mirror slot: slotName))
            ].
          ^ slots
        );

        OutlinerPaneForObject: object => OutlinerPaneForMirror: (std reflect Mirror: object);

        OutlinerWindowForObject: object => builder Window(200, 100, builder Scrollable(OutlinerPaneForObject: object));
    };

    reset => (
      ^ self
    );

    build => (
        ui Window(200, 200,
            ui VBox(
                ui Button(ui Center(ui Label: 'Outliner'),
                          Action: { value(sender) => (sender world yes) open: (MirrorBuilder OutlinerWindowForObject: lobby) })
                    ~ xLayout: ui layouts Flexible
                    ~ yLayout: ui layouts Flexible,
                ui Button(ui Label: 'Another!', Action: { value(sender) => (state new) openInWorld: (sender world yes) }),
            )
        )
    );
}
