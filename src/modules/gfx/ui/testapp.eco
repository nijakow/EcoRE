{
    static with inherited _ = std Clonable;
    with inherited own MorphicApp = $ MorphicApp;

    MirrorBuilder = {
        static with inherited _ = std Module;
        builder <- $ ui.

        SlotOutliner: slotMirror => (
            builder Button(builder Label: (slotMirror name asString),
                           builder StateAction(std util newArray(self, slotMirror), {
                               value(sender) => (sender world yes) open: ((state at: 0) OutlinerWindowForObject: ((state at: 1) slotValue))
                           }))
        );

        OutlinerPaneForMirror: mirror => (
            | slots <- builder make VBoxMorph |
            mirror slotNames do: [ :slotName |
                slots add: (SlotOutliner: (mirror slot: slotName))
            ].
          ^ slots
        );

        OutlinerPaneForObject: object => OutlinerPaneForMirror: (std reflect Mirror: object);

        OutlinerWindowForObject: object => builder Window(300, 300, OutlinerPaneForObject: object);
    };

    counter;
    counter: v => counter <- v;

    reset => (
        counter <- 0.
      ^ self
    );

    build => (
        ui Window(200, 200,
            ui VBox(
                ui Button(ui Center(ui Label: 'Outliner'),
                          Action: { value(sender) => (sender world yes) open: (MirrorBuilder OutlinerWindowForObject: lobby) })
                    ~ xLayout: ui layouts Flexible
                    ~ yLayout: ui layouts Flexible,
                ui Button(ui Label: 'Another!', Action: { value(sender) => (state new) openInWorld: (sender world yes) }),
            )
        )
    );
}
