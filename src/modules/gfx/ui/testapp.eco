{
    static with inherited _ = std Clonable;
    with inherited own MorphicApp = $ MorphicApp;


    MirrorBuilder = {
        static with inherited _ = std Module;
        builder <- $ ui.

        optimizer <- (here / '..' / '..' / 'ecosphere' / 'optimizer' / '_.eco') import;

        SlotOutliner: slotMirror => (
            builder HBox(
                builder Label: (slotMirror isProtected if: 'p' else: ' '),
                builder Label: (slotMirror isStatic if: 's' else: ' '),
                builder Label: (slotMirror isFinal if: 'f' else: ' '),
                builder Label: (slotMirror isWith if: 'w' else: ' '),
                builder Label: (slotMirror isInherited if: 'i' else: ' '),
                builder SpacerW: 10 H: 1,
                builder Button(builder Label: (slotMirror name asString),
                                $[ :(builder, mirror) :sender |
                                    (sender world yes) open: (builder WindowFor: (mirror slotValue))
                                ] bind(self, slotMirror)
                ),
                builder Spacer ~ rigidHeight: 1,
                builder Button(builder Label: 'Ã¸',
                                $[ :(builder, mirror) :sender |
                                    (std io out << 'Deleting ' << mirror << '...') newline commit.
                                    mirror delete
                                ] bind(self, slotMirror)
                )
            ) ~ xLayout: builder layouts Flexible
              ~ yLayout: builder layouts ShrinkWrap
        );

        OutlinerPaneForMirror: mirror => (
            | slots <- builder make VBoxMorph |
            mirror slotNames do: [ :slotName |
                slots add: (SlotOutliner: (mirror slot: slotName))
            ].
          ^ slots
        );

        OutlinerPaneForObject: object => OutlinerPaneForMirror: (std reflect Mirror: object);

        OutlinerWindowForObject: object => (
            builder Window(400, 400,
                builder VBox(
                    builder Scrollable(OutlinerPaneForObject: object),
                    ObjectShellFor: object ~ rigidHeight: 100
                )
            )
        );

        DisassemblyWindowFor: code => (
            |
                writer       <- (std io StringWriter) new,
                disassembled <- optimizer Disassemble: code,
                ast          <- optimizer BuildAST: disassembled,
                rewritten    <- optimizer RewriteAST: ast
            |

            ((optimizer ast Printer) clone initWithWriter: writer) print: rewritten ast.

            builder Window(500, 400,
                builder Scrollable(
                    builder TextField: (writer build)
                )
            )
        );

        PresentationWindowFor: object => (
            | writer <- (std io StringWriter) new |
            writer << object.
            builder Window(400, 400,
                builder VBox(
                    builder Scrollable(builder TextField: (writer build)),
                    ObjectShellFor: object ~ rigidHeight: 100
                )
            )
        );

        PathOutlinerRow: childpath Name: name => (
            builder ShrinkWrap(
                builder HBox(
                    builder Button(builder Label: (name),
                                   $[ :(builder, path) :sender |
                                        (sender world yes) open: (builder OutlinerWindowForPath: path)
                                   ] bind(self, childpath)
                    )
                ) ~ xLayout: builder layouts Flexible
            )
        );
        PathOutlinerRow: childpath => PathOutlinerRow: childpath Name: (childpath name);
        OutlinerPaneForPath: path => (
            | slots <- builder make VBoxMorph |
            slots add: (PathOutlinerRow: (path / '..') Name: '..').
            path children do: [ :subpath |
                slots add: (PathOutlinerRow: subpath)
            ].
          ^ slots
        );
        OutlinerWindowForPath: path => (
            ((path extension) equals: 'eco') if: [
                ^ [ WindowFor: (path import) ] catch: [ :e |
                    | sw <- (std io StringWriter) new |
                    (sw << 'Syntax error while parsing expression:') newline newline.
                    sw << e.
                    ErrorWindow: (sw build)
                ]
            ] else: [
                ^ builder Window(400, 400, builder Scrollable(OutlinerPaneForPath: path))
            ]
        );

        WindowFor: object => (
            begin
              ~ if: [ std reflect primitives IsCode:     object ] then: [ ^ DisassemblyWindowFor:    object ]
              ~ if: [ std reflect primitives IsMolecule: object ] then: [ ^ OutlinerWindowForObject: object ]
            ~ default: [ ^ PresentationWindowFor: object ]
        );

        ErrorWindow: error => (
            builder Window(360, 200,
                builder TextField: error
            )
        );

        RunStringAndShowResult: source World: world Environment: environment => (
            [
                |
                    tok    <- ((lang eco tokenizer Tokenizer) clone) init: (source iterator),
                    parser <- ((lang eco parser Parser) clone) init: tok
                |
                parser exprDo: [ :expr |
                    [
                        | result <- expr basicEvaluateInEnv: environment |
                        world open: (WindowFor: result)
                    ] catch: [ :e |
                        | sw <- (std io StringWriter) new |
                        (sw << 'Error while evaluating expression!') newline newline.
                        sw << e.
                        world open: (ErrorWindow: (sw build))
                    ]
                ]
            ] catch: [ :e |
                | sw <- (std io StringWriter) new |
                (sw << 'Syntax error while parsing expression:') newline newline.
                sw << e.
                world open: (ErrorWindow: (sw build))
            ]
        );
        RunStringAndShowResult: source World: world => RunStringAndShowResult: source World: world Environment: lobby;

        ShellWindow => (
            builder Window(500, 350,
                builder Editor: '"Enter your code here"\n\n'
                    OnAccept: $[ :(us) :editor | us RunStringAndShowResult: (editor fullText) World: (editor world yes) ] bind(self)
                    OnCancel: $[ :editor | editor clear ]
            )
        );

        ObjectShellFor: object => (
            builder Editor: '"Enter your instructions here"\n\n'
                OnAccept: $[ :(us, object) :editor | us RunStringAndShowResult: (editor fullText) World: (editor world yes) Environment: object ] bind(self, object)
                OnCancel: $[ :editor | editor clear ]
        );
    };

    reset => (
      ^ self
    );

    build => (
        ui Window(280, 200,
            ui VBox(
                ui Center(ui TextField: 'Look at me as I can fly!\n    - Chrom, "Regret & Testify"'),
                ui Button(ui Center(ui Label: 'Outliner'),
                          $[ :(MirrorBuilder) :sender | (sender world yes) open: (MirrorBuilder OutlinerWindowForObject: lobby) ]
                                bind(MirrorBuilder))
                    ~ xLayout: ui layouts Flexible
                    ~ yLayout: ui layouts Flexible,
                ui Button(ui Center(ui Label: 'Files'),
                          $[ :(MirrorBuilder) :sender | (sender world yes) open: (MirrorBuilder OutlinerWindowForPath: (std os files here / '..' / '..' / '..')) ]
                                bind(MirrorBuilder))
                    ~ xLayout: ui layouts Flexible
                    ~ yLayout: ui layouts Flexible,
                ui Button(ui Center(ui Label: 'Shell'),
                          $[ :(MirrorBuilder) :sender | (sender world yes) open: (MirrorBuilder ShellWindow) ]
                                bind(MirrorBuilder))
                    ~ xLayout: ui layouts Flexible
                    ~ yLayout: ui layouts Flexible
            )
        )
    );
}
