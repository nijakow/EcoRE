{
    static with inherited _ = std Clonable;
    with inherited own MorphicApp = $ MorphicApp;


    MirrorBuilder = {
        static with inherited _ = std Module;
        builder <- $ ui.

        optimizer <- (here / '..' / '..' / 'ecosphere' / 'optimizer' / '_.eco') import;

        SlotOutliner: slotMirror => (
            builder ShrinkWrap(
                builder HBox(
                    builder Label: (slotMirror isProtected if: 'p' else: ' '),
                    builder Label: (slotMirror isStatic if: 's' else: ' '),
                    builder Label: (slotMirror isFinal if: 'f' else: ' '),
                    builder Label: (slotMirror isWith if: 'w' else: ' '),
                    builder Label: (slotMirror isInherited if: 'i' else: ' '),
                    builder SpacerW: 10 H: 1,
                    builder Button(builder Label: (slotMirror name asString),
                                   builder StateAction(std util newArray(self, slotMirror), {
                                       value(sender) => (sender world yes) open: ((state at: 0) WindowFor: ((state at: 1) slotValue))
                                   })
                    )
                ) ~ xLayout: builder layouts Flexible
            )
        );

        OutlinerPaneForMirror: mirror => (
            | slots <- builder make VBoxMorph |
            mirror slotNames do: [ :slotName |
                slots add: (SlotOutliner: (mirror slot: slotName))
            ].
          ^ slots
        );

        OutlinerPaneForObject: object => OutlinerPaneForMirror: (std reflect Mirror: object);

        OutlinerWindowForObject: object => builder Window(400, 400, builder Scrollable(OutlinerPaneForObject: object));

        DisassemblyWindowFor: code => (
            |
                writer       <- (std io StringWriter) new,
                disassembled <- optimizer Disassemble: code,
                ast          <- optimizer BuildAST: disassembled,
                rewritten    <- optimizer RewriteAST: ast
            |

            ((optimizer ast Printer) clone initWithWriter: writer) print: rewritten ast.

            builder Window(750, 750,
                builder Scrollable(
                    builder TextField: (writer build)
                )
            )
        );

        WindowFor: object => (
            begin
              ~ if: [ std reflect primitives IsCode:     object ] then: [ ^ DisassemblyWindowFor:    object ]
              ~ if: [ std reflect primitives IsMolecule: object ] then: [ ^ OutlinerWindowForObject: object ]
            ~ default: [ ^ OutlinerWindowForObject: object ]  "TODO: add a better default"
        );
    };

    reset => (
      ^ self
    );

    build => (
        ui Window(200, 200,
            ui VBox(
                ui TextField: 'Ecosphere\nis\nawesome!',
                ui Button(ui Center(ui Label: 'Outliner'),
                          Action: { value(sender) => (sender world yes) open: (MirrorBuilder OutlinerWindowForObject: lobby) })
                    ~ xLayout: ui layouts Flexible
                    ~ yLayout: ui layouts Flexible,
                ui Button(ui Label: 'Another!', Action: { value(sender) => (state new) openInWorld: (sender world yes) }),
            )
        )
    );
}
