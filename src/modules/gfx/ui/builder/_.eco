
{
    static with inherited _ = std Module;
    with $battery = $;

    make = {
        static with inherited _ = std Trait;
        static with $battery = $;

        VBoxMorph => (morphic morphs VBoxMorph) new;
    };

    layouts = {
      static with inherited _ = std Module;
      static with $battery = $;

      Flexible   => morphic layouts Flexible;
      ShrinkWrap => morphic layouts ShrinkWrap;
      Rigid      => morphic layouts Rigid;
    };

    ShrinkWrap(element) => (
        element ~ xLayout: layouts ShrinkWrap
                ~ yLayout: layouts ShrinkWrap
    );

    Flexible(element) => (
        element ~ xLayout: layouts Flexible
                ~ yLayout: layouts Flexible
    );

    VBox(...) => (
        | box <- (morphic morphs VBoxMorph) new |
        std util newArray(...) do: [ :e | box add: e ].
      ^ box
    );

    HBox(...) => (
        | box <- (morphic morphs HBoxMorph) new |
        std util newArray(...) do: [ :e | box add: e ].
      ^ box
    );

    Stacked(...) => (
        | box <- (morphic morphs StackMorph) new |
        std util newArray(...) reverseDo: [ :e | box add: e ].
      ^ box
    );

    Margin(margin, element) => (
      ^ (morphic morphs MarginMorph) clone initWithMargin: margin
          ~ add: element
    );

    Framed(element) => (
      ^ (morphic morphs FrameMorph) new
          ~ add: element
    );

    Clipped(element) => (
      ^ (morphic morphs ClipMorph) new
          ~ add: element
    );

    Spacer => (morphic morphs Morph) new;
    SpacerW: w H: h => Spacer ~ rigidWidth: w ~ rigidHeight: h;

    ColorMorph(r, g, b) => (morphic morphs ColorMorph) new ~ r: r g: g b: b;

    Center(element) => (
      ^ VBox( Spacer, HBox(Spacer, element, Spacer) ~ yLayout: layouts ShrinkWrap, Spacer )
    );

    Scrollable(element) => (
        |
            bar     <- (morphic morphs ScrollBarMorph) new,
            content <- (morphic morphs ScrollContentMorph) new
        |

        content add: element.
        bar notifyTo: content.

      ^ HBox(Clipped(content), bar)
    );

    Label: text => (morphic morphs LabelMorph) new ~ text: (morphic Text: text);

    TextField: text => (
        | lines <- VBox |
        text splitOnChar: $'newline'
          ~ do: [ :line | lines add: (Label: line) ].
      ^ ShrinkWrap(lines)
    );

    Editor: text => (
        | editor <- (morphic morphs EditorMorph) new |
        text splitOnChar: $'newline'
          ~ do: [ :line | editor append: line ].
      ^ editor
    );

    Editor: text OnAccept: onaccept OnCancel: oncancel => (
        | editor <- Editor: text |
      ^ VBox(
          Scrollable(Flexible(editor)),
          HBox(
              Button(Margin(3, Label: 'Accept'), $[ :(editor, onaccept) :sender | onaccept value(editor) ] bind(editor, onaccept))
                ~ xLayout: layouts Flexible
                ~ yLayout: layouts ShrinkWrap,
              Button(Margin(3, Label: 'Cancel'), $[ :(editor, oncancel) :sender | oncancel value(editor) ] bind(editor, oncancel))
                ~ xLayout: layouts Flexible
                ~ yLayout: layouts ShrinkWrap
          ) ~ xLayout: layouts Flexible
            ~ yLayout: layouts ShrinkWrap
      )
    );

    DocumentEditor: doc OnAccept: onaccept OnCancel: oncancel => (
        | editor <- DocumentEditor: doc |
      ^ VBox(
          Scrollable(Flexible(Margin(5, editor))),
          HBox(
              Button(Margin(3, HBox(Spacer, Label: 'Accept', Spacer)), $[ :(editor, onaccept) :sender | onaccept value(editor) ] bind(editor, onaccept))
                ~ xLayout: layouts Flexible
                ~ yLayout: layouts ShrinkWrap,
              Button(Margin(3, HBox(Spacer, Label: 'Cancel', Spacer)), $[ :(editor, oncancel) :sender | oncancel value(editor) ] bind(editor, oncancel))
                ~ xLayout: layouts Flexible
                ~ yLayout: layouts ShrinkWrap
          ) ~ xLayout: layouts Flexible
            ~ yLayout: layouts ShrinkWrap
      )
    );

    DocumentEditor: document => (
      ^ (morphic morphs DocumentEditorMorph) clone initWithDocument: document
    );

    Button(caption, action) => (
      ^ ShrinkWrap(Stacked(
            (morphic morphs ButtonMorph) new ~ action: action,
            (morphic morphs FrameMorph) new,
            caption
        ))
    );

    Minimized(window) => (
        Window(200, 100,
            Button(Center(Label: 'Unminimize'),
                    $[ :(minimized) :sender | (sender world yes) open: minimized ] bind(window)
            ) ~ xLayout: layouts Flexible
              ~ yLayout: layouts Flexible
        )
    );

    WithRebuilderDo: aBlock => (
        |
            container <- VBox(),
            rebuilder <- $[ :(builder, container, aBlock) | container replaceWith: (builder WithRebuilderDo: aBlock) ] bind(self, container, aBlock)
        |
        container add: (aBlock value(rebuilder)).
      ^ container
    );

    Window(w, h, content) => (
      | window <- (morphic morphs DraggableMorph) new |
      window
          ~ add: Stacked(
                VBox(
                    HBox(Spacer,
                        Stacked(
                            HBox(
                                Button(Margin(3, Label: ' _ '), $[ :(builder, window) :sender | (window world yes) open: (builder Minimized(window)). window unlink. ] bind(self, window)),
                                Button(Margin(3, Label: ' X '), $[ :(window) :sender | window unlink ] bind(window))
                            ) ~ xLayout: layouts ShrinkWrap
                              ~ yLayout: layouts ShrinkWrap,
                            ColorMorph(0, 42, 47)
                        ) ~ xLayout: layouts ShrinkWrap
                          ~ yLayout: layouts ShrinkWrap,
                    ) ~ yLayout: layouts ShrinkWrap,
                    Margin(10, Stacked(content, ColorMorph(0, 42, 47)))
                      ~ xLayout: layouts Flexible
                      ~ yLayout: layouts Flexible,
                    HBox(Spacer,
                        Stacked(
                            HBox(
                                ShrinkWrap(Button(Label: ' ^ ', $[ :(window) :sender | window rigidHeight: (window height - 25). window layoutChanged. ] bind(window))),
                                ShrinkWrap(Button(Label: ' V ', $[ :(window) :sender | window rigidHeight: (window height + 25). window layoutChanged. ] bind(window))),
                                ShrinkWrap(Button(Label: ' < ', $[ :(window) :sender | window rigidWidth: (window width - 25). window layoutChanged. ] bind(window))),
                                ShrinkWrap(Button(Label: ' > ', $[ :(window) :sender | window rigidWidth: (window width + 25). window layoutChanged. ] bind(window)))
                            ) ~ xLayout: layouts ShrinkWrap
                              ~ yLayout: layouts ShrinkWrap,
                            ColorMorph(0, 42, 47)
                        ) ~ xLayout: layouts ShrinkWrap
                          ~ yLayout: layouts ShrinkWrap,
                    ) ~ yLayout: layouts ShrinkWrap,
                ),
                ColorMorph(0, 120, 136),
          )
          ~ rigidWidth: w
          ~ rigidHeight: h
    );
}
