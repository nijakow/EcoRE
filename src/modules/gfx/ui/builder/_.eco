
{
    static with inherited _ = std Module;
    protected wrapper = $;

    morphic => wrapper morphic;

    with actions = (here / 'actions.eco') importIn: self;

    layouts = {
      static with inherited _ = std Module;
      protected wrapper = $;

      Flexible   => wrapper morphic layouts Flexible;
      ShrinkWrap => wrapper morphic layouts ShrinkWrap;
      Rigid      => wrapper morphic layouts Rigid;
    };

    ShrinkWrap(element) => (
        element ~ xLayout: layouts ShrinkWrap
                ~ yLayout: layouts ShrinkWrap
    );

    VBox(...) => (
        | box <- (morphic morphs VBoxMorph) new |
        std util newArray(...) do: [ :e | box add: e ].
      ^ box
    );

    HBox(...) => (
        | box <- (morphic morphs HBoxMorph) new |
        std util newArray(...) do: [ :e | box add: e ].
      ^ box
    );

    Stacked(...) => (
        | box <- (morphic morphs StackMorph) new |
        std util newArray(...) reverseDo: [ :e | box add: e ].
      ^ box
    );

    Framed(element) => (
      ^ (morphic morphs FrameMorph) new
          ~ add: element
    );

    Scrollable(element) => element;

    Label: text => (morphic morphs LabelMorph) new ~ text: text;

    Button(caption, action) => (
      ^ ShrinkWrap(Stacked(
            (morphic morphs ButtonMorph) new ~ action: action,
            caption
        ))
    );

    Window(w, h, content) => (
      ^ (morphic morphs DraggableMorph) new
          ~ add: content
          ~ rigidWidth: w
          ~ rigidHeight: h
    );
}
