
{
    static with inherited _ = std Module;
    protected wrapper = $;

    morphic => wrapper morphic;

    make = {
        static with inherited _ = std Trait;
        with builder = $;

        VBoxMorph => (builder morphic morphs VBoxMorph) new;
    };

    with actions = (here / 'actions.eco') importIn: self;

    layouts = {
      static with inherited _ = std Module;
      protected wrapper = $;

      Flexible   => wrapper morphic layouts Flexible;
      ShrinkWrap => wrapper morphic layouts ShrinkWrap;
      Rigid      => wrapper morphic layouts Rigid;
    };

    ShrinkWrap(element) => (
        element ~ xLayout: layouts ShrinkWrap
                ~ yLayout: layouts ShrinkWrap
    );

    VBox(...) => (
        | box <- (morphic morphs VBoxMorph) new |
        std util newArray(...) do: [ :e | box add: e ].
      ^ box
    );

    HBox(...) => (
        | box <- (morphic morphs HBoxMorph) new |
        std util newArray(...) do: [ :e | box add: e ].
      ^ box
    );

    Stacked(...) => (
        | box <- (morphic morphs StackMorph) new |
        std util newArray(...) reverseDo: [ :e | box add: e ].
      ^ box
    );

    Margin(margin, element) => (
      ^ (morphic morphs MarginMorph) clone initWithMargin: margin
          ~ add: element
    );

    Framed(element) => (
      ^ Margin(10, element)
    );

    Clipped(element) => (
      ^ (morphic morphs ClipMorph) new
          ~ add: element
    );

    Spacer => (morphic morphs Morph) new;
    SpacerW: w H: h => Spacer ~ rigidWidth: w ~ rigidHeight: h;

    Center(element) => (
      ^ VBox( Spacer, HBox(Spacer, element, Spacer) ~ yLayout: layouts ShrinkWrap, Spacer )
    );

    Scrollable(element) => (
      ^ HBox(Clipped(element), (morphic morphs ScrollBarMorph) new)
    );

    Label: text => (morphic morphs LabelMorph) new ~ text: text;

    TextField: text => (
        | lines <- VBox |
        text splitOnChar: $'newline'
          ~ do: [ :line | lines add: (Label: line) ].
      ^ ShrinkWrap(lines)
    );

    Button(caption, action) => (
      ^ ShrinkWrap(Stacked(
            (morphic morphs ButtonMorph) new ~ action: action,
            caption
        ))
    );

    Window(w, h, content) => (
      | window <- (morphic morphs DraggableMorph) new |
      window
          ~ add: Margin(10, VBox(
                    HBox(Spacer, Button(Label: 'X', StateAction(window, { value => unlink }))) ~ yLayout: layouts ShrinkWrap,
                    content
                  )
            )
          ~ rigidWidth: w
          ~ rigidHeight: h
    );
}
