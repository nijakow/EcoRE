
{
    static with inherited _ = std Module;

    own SDLTurtle = {
        with inherited parent = std Clonable;

        protected turtlegfx = $;

        protected renderer,
        protected x, y, angle,
        protected penDown;

        with inherited trait = {
            initWithRenderer: _renderer X: _x Y: _y => (
                moveToX: _x Y: _y.
                renderer <- _renderer.
                angle    <- 0.0.
                penDown  <- true.
              ^ self
            );

            initWithRenderer: renderer => initWithRenderer: renderer X: 0.0 Y: 0.0;

            moveToX: _x Y: _y => (
                x <- _x.
                y <- _y.
              ^ self
            );

            left: alpha => (
                angle <- angle + ((alpha / 360.0) * (3.141592 * 2)).
              ^ self
            );

            right: alpha => left: alpha negate;
            
            forward: amount => (
                |
                    tx <- x + ((angle cos) * amount),
                    ty <- y - ((angle sin) * amount)
                |
                penDown -> [ renderer drawLineX: (x asInt) Y: (y asInt) X: (tx asInt) Y: (ty asInt) ].
                moveToX: tx Y: ty.
              ^ self
            );

            backward: amount => forward: amount negate;

            writeOn: w => w << 'a turtle(' << x << ', ' << y << ')';
        };
    }
}
