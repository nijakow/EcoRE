
    {
        static with inherited _ = std Clonable;
        private morphic = $;

        width, height,
        protected offsets,
        protected sdlRenderer;

        with inherited trait = {
            initWithSDLRenderer: _sdl_renderer X: _x Y: _y W: _w H: _h => (
                sdlRenderer <- _sdl_renderer.
                offsets     <- std util newStack.
                width       <- _w.
                height      <- _h.
                offsets push: (morphic Origin).
              ^ self
            );

            offset => offsets top;
            pushOffset: point => offsets push: point;
            popOffset => offsets pop;
            withPushedOffset: offset Do: block => (
                pushOffset: offset.
                block value.
                popOffset.
              ^ self
            );

            xOff => offset x;
            yOff => offset y;

            clear => sdlRenderer clear;
            present => sdlRenderer present;

            setR: r G: g B: b => sdlRenderer setR: r G: g B: b;
            setColor: color => sdlRenderer setColor: color;

            drawPointX: x Y: y => sdlRenderer drawPointX: xOff + x Y: yOff + y;
            drawLineX: x1 Y: y1 X: x2 Y: y2 => sdlRenderer drawLineX: xOff + x1 Y: yOff + y1 X: xOff + x2 Y: yOff + y2;
            drawRectX: x Y: y W: w H: h => sdlRenderer drawRectX: xOff + x Y: yOff + y W: w H: h;
            drawRect: rect => drawRectX: rect x Y: rect y W: rect w H: rect h;
            fillRectX: x Y: y W: w H: h => sdlRenderer fillRectX: xOff + x Y: yOff + y W: w H: h;
            fillRect: rect => fillRectX: rect x Y: rect y W: rect w H: rect h;
            drawTexture: tex X: x Y: y W: w H: h => sdlRenderer drawTexture: tex X: xOff + x Y: yOff + y W: w H: h;
            drawTexture: tex W: w H: h => drawTexture: tex X: 0 Y: 0 W: w H: h;

            makeTextTexture: text => sdlRenderer makeTextTexture: text;

            accept: morph => morph renderOn: self;

            writeOn: w => w << 'a morphic renderer';
        };
    };
