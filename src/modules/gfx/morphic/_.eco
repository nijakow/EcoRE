{
    static with inherited _ = std Module;
    with $battery = $;

    own Renderer = (here / 'renderer.eco') importIn: self;

    with own orientation = (here / 'orientation.eco') importIn: self;

    with own math = (here / 'math.eco') importIn: self;

    own layouts = (here / 'layouts.eco') importIn: self;
    own layouters = (here / 'layouters' / '_.eco') importIn: self;
    own representations = (here / 'representations' / '_.eco') importIn: self;

    own children = (here / 'children.eco') importIn: self;

    own morphs = {
        static with inherited _ = std Module;
        morphic = $;

        own Morph = (here / 'morphs' / 'Morph.eco') importIn: self;
        own FrameMorph = (here / 'morphs' / 'FrameMorph.eco') importIn: self;
        own StackMorph = (here / 'morphs' / 'StackMorph.eco') importIn: self;
        own MarginMorph = (here / 'morphs' / 'MarginMorph.eco') importIn: self;
        own BoxMorph = (here / 'morphs' / 'BoxMorph.eco') importIn: self;
        own HBoxMorph = (here / 'morphs' / 'HBoxMorph.eco') importIn: self;
        own VBoxMorph = (here / 'morphs' / 'VBoxMorph.eco') importIn: self;
        own LabelMorph = (here / 'morphs' / 'LabelMorph.eco') importIn: self;
        own ColorMorph = (here / 'morphs' / 'ColorMorph.eco') importIn: self;
        own DraggableMorph = (here / 'morphs' / 'DraggableMorph.eco') importIn: self;
        own HandMorph = (here / 'morphs' / 'HandMorph.eco') importIn: self;
        own WorldMorph = (here / 'morphs' / 'WorldMorph.eco') importIn: self;
        own ButtonMorph = (here / 'morphs' / 'ButtonMorph.eco') importIn: self;
        own ClipMorph = (here / 'morphs' / 'ClipMorph.eco') importIn: self;
        own ScrollBarMorph = (here / 'morphs' / 'ScrollBarMorph.eco') importIn: self;
        own ScrollContentMorph = (here / 'morphs' / 'ScrollContentMorph.eco') importIn: self;
        own EditorMorph = (here / 'morphs' / 'EditorMorph.eco') importIn: self;
        own DocumentEditorMorph = (here / 'morphs' / 'DocumentEditorMorph.eco') importIn: self;
    };

    driver = (here / 'driver.eco') importIn: self;

    Text: text => driver Text: text;

    own Color = {
        static with inherited _ = std Clonable;

        r <- 0,
        g <- 0,
        b <- 0;

        with inherited trait = {
            static with inherited _ = std Trait;

            initWithR: _r G: _g B: _b => (
                r <- _r.
                g <- _g.
                b <- _b.
              ^ self
            );

            writeOn: w => w << 'Color(' << r << ', ' << g << ', ' << b << ')';
        };
    };

    R: r G: g B: b => Color clone initWithR: r G: g B: b;

    RunWithWidth: w Height: h App: app => driver RunWithWidth: w Height: h App: app;
}
