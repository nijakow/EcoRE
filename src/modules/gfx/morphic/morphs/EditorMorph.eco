
{
    static with inherited _ = std Clonable;
    with inherited own Morph = $ Morph;

    protected caret,
    protected lines;

    with inherited trait = {
        static with inherited _ = std Trait;

        protected own Line = {
            static with inherited _ = std Clonable;

            textobj, texture;

            static with inherited trait = {
                static with inherited _ = std Trait;

                initWithTextObj: _textobj => (
                    textobj <- _textobj.
                    texture <- No.
                  ^ self
                );

                text => textobj text;

                width  => textobj width;
                height => textobj height;

                caretX: x      => textobj pointAtCharacterIndex: x;
                charAtPoint: x => textobj characterIndexAtX: x;

                protected getOrMakeTexture: renderer => (
                    texture no: [
                        texture <- Yes: (renderer makeTextTexture: textobj text).
                    ].
                  ^ texture
                );

                protected invalidateTexture => (
                    texture <- No.
                  ^ self
                );

                unlink => invalidateTexture;

                renderOn: renderer X: x Y: y => (
                    (getOrMakeTexture: renderer) yes: [ :t | renderer drawTexture: t X: x Y: y W: width H: height ].
                );

                writeOn: w => w << 'a text editor line';
            };
        };

        init => (
            $(Morph) init.
            caret <- morphic X: 0 Y: 0.
            lines <- std util newVector.
          ^ self
        );

        baseMinWidth => (
            | w <- 0 |
            lines do: [ :l | w <- w max: l width ].
          ^ w
        );

        baseMinHeight => (
            | h <- 0 |
            lines do: [ :l | h <- h + l height ].
          ^ h
        );

        protected reshapeToFit => (
            rigidWidth: baseMinWidth.
            rigidHeight: baseMinHeight.
          ^ self
        );

        append: text => (
            lines add: (Line clone initWithTextObj: (morphic Text: text)).
            reshapeToFit.
            layoutChanged.
          ^ self
        );

        protected replaceLine: y With: text => (
            | line <- (lines at: y) |
            line unlink.
            lines at: y put: (Line clone initWithTextObj: (morphic Text: text)).
            reshapeToFit.
            layoutChanged.
            renderDirty.
          ^ self
        );

        deleteCharAtX: x Y: y => (
            |
                text    <- (lines at: y) text,
                newtext <- (std io StringWriter) new
            |
            text forEach: [ :i :c |
                (i != (x - 1)) if: [ newtext << c ].
            ].
            replaceLine: y With: newtext build.
          ^ self
        );

        deleteChar => (
            deleteCharAtX: (caret x) Y: (caret y).
            moveCaretToX: ((caret x) - 1) Y: (caret y).
          ^ self
        );

        insertText: text AtX: x Y: y => (
            |
                oldtext <- (lines at: y) text,
                newtext <- (std io StringWriter) new
            |
            (x < oldtext size) if: [
                oldtext forEach: [ :i :c |
                    (i == x) if: [ newtext << text ].
                    newtext << c.
                ].
            ] else: [
                newtext << oldtext << text.
            ].
            replaceLine: y With: newtext build.
          ^ self
        );
        insertText: text => (
            insertText: text AtX: (caret x) Y: (caret y).
            moveCaretToX: ((caret x) + text size) Y: (caret y).
          ^ self
        );

        protected readjustCaret => (
            |
                x <- (((caret x) min: ((lines at: (caret y)) text size)) max: 0),
                y <- (((caret y) min: (lines size - 1)) max: 0)
            |
            caret <- morphic X: x Y: y.
          ^ self
        );
        moveCaretToX: x Y: y => (
            caret <- morphic X: x Y: y.
            readjustCaret.
            renderDirty.
          ^ self
        );
        moveCaretTo: point => moveCaretToX: (point x) Y: (point y);

        protected caretToPixel(caret) => (
            |
                caretX <- (lines at: (caret y)) caretX: (caret x),
                caretY <- 0,
                y      <- 0
            |
            lines do: [ :l |
                (y < caret y) if: [ caretY <- caretY + l height ].
                y <- y + 1.
            ].
          ^ morphic X: caretX Y: caretY
        );

        protected pixelToCaret(pixel) => (
            |
                x  <- 0,
                y  <- 0,
                dy <- 0,
                dc <- 0
            |
            lines do: [ :l |
                (dy < pixel y) if: [ y <- dc ].
                dy <- dy + l height.
                dc <- dc + 1
            ].

            x <- (lines at: y) charAtPoint: pixel x.
          ^ morphic X: x Y: y
        );

        renderImplOn: renderer => (
            | y <- 0 |
            lines do: [ :l |
                l renderOn: renderer X: 0 Y: y.
                y <- y + l height.
            ].

            | pixelCaret <- caretToPixel(caret) |
            
            renderer setR: 255 G: 0 B: 0.
            renderer drawLineX: (pixelCaret x) Y: (pixelCaret y) X: (pixelCaret x) Y: (pixelCaret y) + (lines at: (caret y)) height.

            $(Morph) renderImplOn: renderer.
        );

        handleKey: key At: point HandMorph: hand => (
            key ifBackspace: [ deleteChar. ^ true ].
            key keyText yes: [ :text |
                insertText: text.
            ].
          ^ true
        );
        handleClickAt: point HandMorph: hand => (
            moveCaretTo: (pixelToCaret(point)).
          ^ true
        );

        writeOn: w => w << 'a text editor';
    };
}
