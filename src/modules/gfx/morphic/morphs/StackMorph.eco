
    {
        static with inherited _ = std Clonable;
        with inherited own Morph = $ Morph;

        with inherited trait = {
            init => (
                $(Morph) initWithManyChildren.
              ^ self
            );

            updateMinSizeCaches => (
                | w <- 0, h <- 0 |
                childrenDo: [ :m |
                    w <- w max: m minWidth.
                    h <- h max: m minHeight.
                ].
                cachedMinWidth: w.
                cachedMinHeight: h.
            );

            layoutInPlace => (
                shrinkToFit.
                childrenDo: [ :c |
                    |
                        w <- (c xLayout isFlexible) if: [ bounds w ] else: [ c minWidth  ],
                        h <- (c yLayout isFlexible) if: [ bounds h ] else: [ c minHeight ]
                    |
                    c boundsX: 0 Y: 0 W: w H: h.
                ].
                childrenDo: [ :c | c layoutInPlaceIfNeeded ].
                layoutIsNowOkay.
            );

            renderOn: renderer => (
                renderer setR: 40 G: 0 B: 0.
                renderer drawRectX: 0 Y: 0 W: bounds w H: bounds h.
                $(Morph) renderOn: renderer.
            );

            "handleDropMorph: morph AtX: x Y: y => ( add: morph. ^ true );"

            writeOn: w => w << 'a stack morph';
        };
    }
