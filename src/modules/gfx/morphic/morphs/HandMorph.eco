
    {
        static with inherited _ = std Clonable;
        with inherited own Morph = $ Morph;

        protected grabbedMorph;
        
        clipboard, lastMorph;

        with inherited trait = {
            init => (
                $(Morph) initWithOneChild.
                rigidWidth: 1.
                rigidHeight: 1.
                grabbedMorph <- No.
                clipboard <- No.
                lastMorph <- No.
              ^ self
            );

            copyToClipboard: obj => clipboard <- Yes: obj;
            clearClipboard => clipboard <- No;

            lastMorph: obj => lastMorph <- Yes: obj;
            noLastMorph => lastMorph <- No;

            moved => (
                world yes: [ :world |
                    world xRayAt: globalOffset ReverseDo: [ :m |
                        (m != self) if: [
                            lastMorph yes: [ :lm | (lm != m) if: [ lm handleHandExit: self. lastMorph: m. m handleHandEnter: self. ] ]
                                      no: [ lastMorph: m. m handleHandEnter: self. ].
                        ].
                      ^ self
                    ].
                    lastMorph yes: [ :lm | lm handleHandExit: self ].
                    noLastMorph.
                ].
              ^ self
            );

            grab: morph => (
                | p <- morph globalOffset - globalOffset |
                add: morph.
                morph moveTo: p. "TODO: Keep offset"
                grabbedMorph <- Yes: morph.
              ^ self
            );

            click => (
                | gb <- globalOffset |
                grabbedMorph
                  ~ yes: [ :m | world yes: [ :w | (w dropMorph: m At: gb) -> [ grabbedMorph <- No ] ] ]
                     no: [      world yes: [ :w | (w clickAt: gb HandMorph: self) ] ]
            );

            leftClick   => click;
            middleClick => click;
            rightClick  => (
                | gb <- globalOffset |
                grabbedMorph
                  ~ yes: [ :m | world yes: [ :w | (w dropMorph: m At: globalOffset) -> [ grabbedMorph <- No ] ] ]
                     no: [      world yes: [ :w | (w grabAt: gb HandMorph: self) ] ]
            );

            handleKey: key => (
                world yes: [ :w | w key: key At: globalOffset HandMorph: self ]
            );

            dispatchEvent: block AtX: evtX Y: evtY => false; "Avoid dispatching to children"

            writeOn: w => w << 'a hand morph';
        };
    }
