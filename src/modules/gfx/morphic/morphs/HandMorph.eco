
    {
        static with inherited _ = std Clonable;
        with inherited own Morph = $ Morph;

        protected grabbedMorph;
        
        clipboard, lastMorphs, lastMorphs2;

        with inherited trait = {
            init => (
                $(Morph) initWithOneChild.
                rigidWidth: 1.
                rigidHeight: 1.
                grabbedMorph <- No.
                clipboard    <- No.
                lastMorphs   <- std util newVector.
                lastMorphs2  <- std util newVector.
              ^ self
            );

            copyToClipboard: obj => clipboard <- Yes: obj;
            clearClipboard => clipboard <- No;

            moved => (
                world yes: [ :world |
                    world xRayAt: globalOffset ReverseDo: [ :m |
                        (m != self) if: [
                            lastMorphs2 add: m.
                        ].
                    ].
                ].

                lastMorphs do: [ :oldMorph |
                    (lastMorphs2 find: oldMorph)
                        no: [ oldMorph handleHandExit: self ].
                ].

                lastMorphs2 do: [ :newMorph |
                    (lastMorphs find: newMorph)
                        no: [ newMorph handleHandEnter: self ].
                ].

                ( "Swap the morph lists"
                    | m <- lastMorphs2 |
                    lastMorphs2 <- lastMorphs.
                    lastMorphs  <- m.
                    lastMorphs2 clear.
                ).

              ^ self
            );

            grab: morph => (
                | p <- morph globalOffset - globalOffset |
                add: morph.
                morph moveTo: p. "TODO: Keep offset"
                grabbedMorph <- Yes: morph.
              ^ self
            );

            click => (
                | gb <- globalOffset |
                grabbedMorph
                  ~ yes: [ :m | world yes: [ :w | (w dropMorph: m At: gb) -> [ grabbedMorph <- No ] ] ]
                     no: [      world yes: [ :w | (w clickAt: gb HandMorph: self) ] ]
            );

            leftClick   => click;
            middleClick => click;
            rightClick  => (
                | gb <- globalOffset |
                grabbedMorph
                  ~ yes: [ :m | world yes: [ :w | (w dropMorph: m At: globalOffset) -> [ grabbedMorph <- No ] ] ]
                     no: [      world yes: [ :w | (w grabAt: gb HandMorph: self) ] ]
            );

            handleKey: key => (
                world yes: [ :w | w key: key At: globalOffset HandMorph: self ]
            );

            dispatchEvent: block AtX: evtX Y: evtY => false; "Avoid dispatching to children"

            writeOn: w => w << 'a hand morph';
        };
    }
