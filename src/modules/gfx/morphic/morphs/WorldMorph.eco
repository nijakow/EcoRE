
    {
        static with inherited _ = std Clonable;
        with inherited own Morph = $ Morph;

        protected renderer,
        handMorph;

        with inherited trait = {
            init => (
                $(Morph) initWithManyChildren.
                renderer  <- No.
                handMorph <- (morphic morphs HandMorph new).
                add: handMorph.
              ^ self
            );

            renderer: r => renderer <- r;

            childrenDo: block => (
                $(Morph) childrenDo: [ :c |
                    (handMorph != c) -> [ block value(c) ].
                ].
                block value(handMorph).
            );

            world => Yes: self;

            maybeUpdate => (
                isLayoutDirty if: [
                    forceLayoutInPlace
                ].
            );

            render => (
                ([ isRenderDirty ] or: [ isChildRenderDirty ]) if: [
                    fullRender
                ].
            );

            fullRender => (
                renderer setR: 00 G: 42 B: 47.
                renderer clear.
                renderOn: renderer.
                renderer present.
            );

            handleDropMorph: morph At: point => (
                | gb <- globalOffset, mgb <- morph globalOffset |
                (tryAdd: morph) -> [
                    morph moveTo: (mgb - gb).
                ].
              ^ true
            );
            handleClick: click At: point HandMorph: hand => false;

            open: morph => (
                add: morph.
                morph reshapeX: 100 Y: 100 W: (morph minWidth) H: (morph minHeight).
              ^ self
            );

            writeOn: w => w << 'a world morph';
        };
    }
