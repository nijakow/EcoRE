{
    static with inherited _ = std Module;
    morphic = $;

    own LayouterTrait = {
        static with inherited _ = std Trait;
        protected module = $;
        protected morphic => module morphic;

        writeOn: w => w << 'a layouter';

        protected ShrinkConstraints: constraints ForMorph: morph Orientation: orientation => (
            morph layoutForOrientation: orientation
              ~ ifShrinkWrap: [           ^ (morph minSizeForOrientation: orientation)         ]
                ifFlexible:   [           ^ (constraints dimensionForOrientation: orientation) ]
                ifRigid:      [ :extent | ^ extent                                             ]
        );

        protected ShrinkConstraints: constraints ForMorph: morph => (
            morphic X: (ShrinkConstraints: constraints ForMorph: morph Orientation: (morphic orientation Horizontal))
                    Y: (ShrinkConstraints: constraints ForMorph: morph Orientation: (morphic orientation Vertical))
        );

        protected baseCalculateMinSizeForMorph: morph Orientation: orientation => (
            | min <- 0 |
            morph childrenDo: [ :c |
                min <- min max: (c minSizeForOrientation: orientation)
            ].
          ^ min max: (morph baseMinSizeForOrientation: orientation)
        );

        calculateMinSizeForMorph: morph Orientation: orientation => (
            morph layoutForOrientation: orientation
              ~ ifShrinkWrap: [           ^ baseCalculateMinSizeForMorph: morph Orientation: orientation ]
                ifFlexible:   [           ^ baseCalculateMinSizeForMorph: morph Orientation: orientation ]
                ifRigid:      [ :extent | ^ extent                                                       ]
        );

        calculatePreferredSizeForMorph: morph Orientation: orientation Constraint: constraint => (
            morph layoutForOrientation: orientation
              ~ ifShrinkWrap: [           ^ calculateMinSizeForMorph: morph Orientation: orientation ]
                ifFlexible:   [           ^ constraint                                               ]
                ifRigid:      [ :extent | ^ extent                                                   ]
        );

        layoutMorph: morph Constraints: constraints => (
            | shrunkConstraints <- ShrinkConstraints: constraints ForMorph: morph |
            morph childrenDo: [ :c |
                c layoutInPlace
            ].
            morph resizeTo: shrunkConstraints.
        );
    };

    own Default = {
        static with inherited _ = std Clonable;
        with inherited LayouterTrait = $ LayouterTrait;

        "No implementation"
    };

    own Flex = {
        static with inherited _ = std Clonable;
        with inherited layouterTrait = $ LayouterTrait;

        orientation;

        initWithOrientation: _orientation => (
            orientation <- _orientation.
          ^ self
        );

        protected W: w H: h => morphic W: w H: h;
        protected TransformedW: w H: h => (
            orientation ifHorizontal: [ W: w H: h ] ifVertical: [ W: h H: w ]
        );
        protected Transformed: dimensions => (
            TransformedW: (dimensions width) H: (dimensions height)
        );
        protected Layout: morph => morph layoutForOrientation: orientation;
        protected Extent: morph => morph extentForOrientation: orientation;
        protected OppositeLayout: morph => morph layoutForOrientation: (orientation opposite);
        protected OppositePreferredSize: morph Constraints: constraints => (
            morph preferredSizeForOrientation: (orientation opposite)
                                   Constraint: (constraints dimensionForOrientation: (orientation opposite))
        );

        protected calculateMinSizeForMorphMainAxis: morph => (
            | minSize <- 0 |
            morph childrenDo: [ :child |
                minSize <- minSize + (child minSizeForOrientation: orientation).
            ].
          ^ minSize
        );

        protected calculateMinSizeForMorphCrossAxis: morph => (
            | minSize <- 0 |
            morph childrenDo: [ :child |
                minSize <- minSize max: (child minSizeForOrientation: (orientation opposite)).
            ].
          ^ minSize
        );

        protected baseCalculateMinSizeForMorph: morph Orientation: morphOrientation => (
            (morphOrientation == orientation)
              ~ if: [ calculateMinSizeForMorphMainAxis:  morph ]
              else: [ calculateMinSizeForMorphCrossAxis: morph ]
        );

        layoutMorph: morph Constraints: constraints => (
            | shrunkConstraints <- ShrinkConstraints: constraints ForMorph: morph |

            |
                flexCount  <- 0,
                offset     <- 0,
                cross      <- 0
            |
            morph childrenDo: [ :child |
                "
                    First, we check if the child is flexible or rigid.
                    If it is flexible, we don't know its size yet, so we just count how
                    many flexible children there are.

                    Meanwhile, we also calculate the cross axis size.

                    This way, we have all necessary information once this
                    loop is finished.
                "
                (Layout: child) isFlexible
                  ~ if: [ flexCount <- flexCount + 1.
                          cross     <- cross max: (OppositePreferredSize: child Constraints: shrunkConstraints) ]
                  else: [
                          "
                              Since we know the size of the child along the main axis,
                              we can calculate its size directly by layouting it.

                              If the child is flexible along the cross axis, we use our own 'height' constraints
                              as their preferred 'height'. This way, they will be able to grow to the correct size.

                              Note that we don't move the child, since we don't know the size of the flexible children yet.
                          "
                          |
                              childConstraints <- TransformedW: (child minSizeForOrientation: orientation)
                                                             H: (shrunkConstraints dimensionForOrientation: (orientation opposite)),
                              childDimensions  <- child layoutWithConstraints: childConstraints
                          |

                          "We add the preferred size of the child to the main axis."
                          offset <- offset + (childConstraints dimensionForOrientation: orientation).
                          cross  <- cross max: (childConstraints dimensionForOrientation: (orientation opposite)).
                        ].
            ].

            "Here we calculate the size of all flexible children."
            |
                remainingSpace <- (shrunkConstraints dimensionForOrientation: orientation) - offset,
                flexSize       <- (flexCount isZero) if: [ 0 ] else: [ remainingSpace / flexCount ],
                flexDimensions <- (TransformedW: flexSize H: cross),  "We only calculate it once, for efficiency."
                position       <- 0
            |

            "This is the main positioning loop. We position all children along the main axis."
            morph childrenDo: [ :child |
                "Move the child to the correct position."
                child moveTo: (TransformedW: position H: 0).

                "Now that we know the size distribution we can also layout the flexible children."
                (Layout: child) isFlexible
                  ~ if: [ child layoutWithConstraints: flexDimensions ].
                
                "As before, we increment the position along the main axis."
                position <- position + (child extentForOrientation: orientation).
            ].

            "
                Finally, we resize the morph to fit the constraints.
            "
            morph resizeTo: shrunkConstraints.
        );

        writeOn: w => w << 'a flex layouter';
    };

    own HFlex = self Flex clone initWithOrientation: (self morphic orientation Horizontal);
    own VFlex = self Flex clone initWithOrientation: (self morphic orientation Vertical);


    own Stack = {
        static with inherited _ = std Clonable;
        with inherited layouterTrait = $ LayouterTrait;

        layoutMorph: morph Constraints: constraints => (
            | shrunkConstraints <- ShrinkConstraints: constraints ForMorph: morph |

            morph childrenDo: [ :child |
                child moveTo: (morphic Origin).
                child layoutWithConstraints: shrunkConstraints.
            ].

            morph resizeTo: shrunkConstraints.
        );

        writeOn: w => w << 'a stack layouter';
    };

    own Margin = {
        static with inherited _ = std Clonable;
        with inherited layouterTrait = $ LayouterTrait;

        margin <- 0;

        margin: m => margin <- m;

        layoutMorph: morph Constraints: constraints => (
            | shrunkConstraints <- ShrinkConstraints: constraints ForMorph: morph |

            |
                offsetPoint      <- morphic X: margin Y: margin,
                childConstraints <- morphic W: ((shrunkConstraints width  - (margin * 2)) max: 0)
                                            H: ((shrunkConstraints height - (margin * 2)) max: 0)
            |

            morph childrenDo: [ :child |
                child moveTo: offsetPoint.
                child layoutWithConstraints: childConstraints.
            ].

            morph resizeTo: shrunkConstraints.
        );

        writeOn: w => w << 'a margin layouter';
    };

    Margin: m => Margin clone margin: m;


    own FreeOffset = {
        static with inherited _ = std Clonable;
        with inherited layouterTrait = $ LayouterTrait;

        x, y;

        x: xv => x <- xv;
        y: yv => y <- yv;
        x: xv y: yv => x: xv ~ y: yv;

        layoutMorph: morph Constraints: constraints => (
            | shrunkConstraints <- ShrinkConstraints: constraints ForMorph: morph |

            |
                offsetPoint <- morphic X: x Y: y,
            |

            morph childrenDo: [ :child |
                child moveTo: offsetPoint.
                child layoutWithoutConstraints.
            ].

            morph resizeTo: shrunkConstraints.
        );

        writeOn: w => w << 'a free offset layouter(' << x << ', ' << y << ')';
    };

    FreeOffsetX: x Y: y => FreeOffset clone x: x y: y;
}
