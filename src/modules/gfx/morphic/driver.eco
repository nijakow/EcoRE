{
    static with inherited _ = std Module;
    morphic = $;
    eve = (here / '..' / 'eve' / '_.eco') importIn: self;

    own MorphicHandler = {
        static with inherited _ = std Module;
        private morphic = $ morphic;

        protected mouseX,
        protected mouseY;

        protected program,
        protected renderer,
        protected morph,
        protected tickCount,
        protected app,
        protected eve;

        with inherited trait = {
            initWithApp: _app Eve: _eve => (
                app       <- _app.
                eve       <- _eve.
                mouseX    <- 0.
                mouseY    <- 0.
                morph     <- morphic morphs WorldMorph new.
                tickCount <- 0.
              ^ self
            );

            tick => (
                ([ morph handMorph offset x != mouseX ] or: [ morph handMorph offset y != mouseY ]) -> [
                    morph handMorph moveToX: mouseX Y: mouseY.
                    morph renderDirty. "Force a full render"
                ].

                morph maybeUpdate.
                morph render.
            );

            findMorphAtX: x Y: y => (
                | v <- No |
                morph xRayAtX: x Y: y Do: [ :m |
                    v <- Yes: m
                ].
              ^ v
            );

            handleKey: key => morph handMorph handleKey: key;

            handleEvent: event => (
                event isMouseMotionEvent -> [
                    mouseX <- event mouseMotionX.
                    mouseY <- event mouseMotionY.
                ].
                event isMouseButtonDown -> [
                    | button <- event whichMouseButton |

                    Switch: button
                      ~ case: 1 do: [ morph handMorph leftClick   ]
                      ~ case: 2 do: [ morph handMorph middleClick ]
                      ~ case: 3 do: [ morph handMorph rightClick  ]
                    ~ default: [
                        (std io out << 'Unknown mouse key!') newline commit.
                      ].
                ].
                event isKeyDown -> [ ^ program stop ].
            );

            launch => (
                renderer <- (morphic Renderer) clone initWithEve: eve.

                morph <- app build.

                morph reshapeX: renderer xOff
                            Y: renderer yOff
                            W: renderer width
                            H: renderer height.
                morph renderer: renderer.

                morph layoutInPlace.
                app openInWorld: morph.
            );
        };
    };

    RunWithWidth: w Height: h App: app => (
        eve Init.
        eve InitEve.
        (MorphicHandler clone initWithApp: app Eve: eve) launch.
    );
}
