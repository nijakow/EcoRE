{
    static with inherited _ = std Module;

    protected lib,
    protected DefaultFontPath <- (here / 'resources' / 'DejaVuSansMono.ttf') path;

    protected Eve_Init,
    protected Eve_Terminate,
    protected Eve_CurrentWidth,
    protected Eve_CurrentHeight,
    protected Eve_PushFrame,
    protected Eve_PopFrame,
    protected Eve_TranslateI2,
    protected Eve_SetColorRGBA,
    protected Eve_SetColorRGB,
    protected Eve_Clip,
    protected Eve_DrawLine,
    protected Eve_DrawRect,
    protected Eve_FillRect,
    protected Eve_DrawText,
    protected Eve_Clear,
    protected Eve_Render,
    protected Eve_PollEvent,
    protected Eve_IsEventQuit,
    protected Eve_IsEventKeyDown,
    protected Eve_IsEventKeyUp,
    protected Eve_IsEventMouseMotion,
    protected Eve_IsEventMouseButtonDown,
    protected Eve_IsEventMouseButtonUp,
    protected Eve_GetEventMouseX,
    protected Eve_GetEventMouseY,
    protected Eve_GetEventMouseButtonID,
    protected Eve_GetEventKeySym,
    protected Eve_GetTextWidth,
    protected Eve_GetTextHeight;

    InitLinux => Setup: (std os files here / '..' / 'eve' / 'libeve.so') path;
    InitMac   => Setup: (std os files here / '..' / 'eve' / 'libeve.dylib') path;
    
    Init => (
        std os type
            ~ ifLinux: [ ^ InitLinux ]
            ~ ifMacOS: [ ^ InitMac   ].
        'EVE is not supported on this platform' throw.
    );

    Setup: libpath => (
        lib <- (ffi DLOpen: libpath) yes.
        Eve_Init <- (lib function: #'Eve_Init' type: ((ffi types void) function(ffi types string, ffi types uint))) yes.
        Eve_Terminate <- (lib function: #'Eve_Terminate' type: ((ffi types void) function())) yes.
        Eve_CurrentWidth <- (lib function: #'Eve_CurrentWidth' type: ((ffi types uint) function())) yes.
        Eve_CurrentHeight <- (lib function: #'Eve_CurrentHeight' type: ((ffi types uint) function())) yes.
        Eve_PushFrame <- (lib function: #'Eve_PushFrame' type: ((ffi types void) function())) yes.
        Eve_PopFrame <- (lib function: #'Eve_PopFrame' type: ((ffi types void) function())) yes.
        Eve_TranslateI2 <- (lib function: #'Eve_TranslateI2' type: ((ffi types void) function(ffi types int, ffi types int))) yes.
        Eve_SetColorRGBA <- (lib function: #'Eve_SetColorRGBA' type: ((ffi types void) function(ffi types uint8, ffi types uint8, ffi types uint8, ffi types uint8))) yes.
        Eve_SetColorRGB <- (lib function: #'Eve_SetColorRGB' type: ((ffi types void) function(ffi types uint8, ffi types uint8, ffi types uint8))) yes.
        Eve_Clip <- (lib function: #'Eve_Clip' type: ((ffi types void) function(ffi types int, ffi types int, ffi types int, ffi types int))) yes.
        Eve_DrawLine <- (lib function: #'Eve_DrawLine' type: ((ffi types void) function(ffi types int, ffi types int, ffi types int, ffi types int))) yes.
        Eve_DrawRect <- (lib function: #'Eve_DrawRect' type: ((ffi types void) function(ffi types int, ffi types int, ffi types int, ffi types int))) yes.
        Eve_FillRect <- (lib function: #'Eve_FillRect' type: ((ffi types void) function(ffi types int, ffi types int, ffi types int, ffi types int))) yes.
        Eve_DrawText <- (lib function: #'Eve_DrawText' type: ((ffi types void) function(ffi types string, ffi types int, ffi types int))) yes.
        Eve_Clear <- (lib function: #'Eve_Clear' type: ((ffi types void) function())) yes.
        Eve_Render <- (lib function: #'Eve_Render' type: ((ffi types void) function())) yes.
        Eve_PollEvent <- (lib function: #'Eve_PollEvent' type: ((ffi types bool) function())) yes.
        Eve_IsEventQuit <- (lib function: #'Eve_IsEventQuit' type: ((ffi types bool) function())) yes.
        Eve_IsEventKeyDown <- (lib function: #'Eve_IsEventKeyDown' type: ((ffi types bool) function())) yes.
        Eve_IsEventKeyUp <- (lib function: #'Eve_IsEventKeyUp' type: ((ffi types bool) function())) yes.
        Eve_IsEventMouseMotion <- (lib function: #'Eve_IsEventMouseMotion' type: ((ffi types bool) function())) yes.
        Eve_IsEventMouseButtonDown <- (lib function: #'Eve_IsEventMouseButtonDown' type: ((ffi types bool) function())) yes.
        Eve_IsEventMouseButtonUp <- (lib function: #'Eve_IsEventMouseButtonUp' type: ((ffi types bool) function())) yes.
        Eve_GetEventMouseX <- (lib function: #'Eve_GetEventMouseX' type: ((ffi types uint) function())) yes.
        Eve_GetEventMouseY <- (lib function: #'Eve_GetEventMouseY' type: ((ffi types uint) function())) yes.
        Eve_GetEventMouseButtonID <- (lib function: #'Eve_GetEventMouseButtonID' type: ((ffi types uint) function())) yes.
        Eve_GetEventKeySym <- (lib function: #'Eve_GetEventKeySym' type: ((ffi types uint) function())) yes.
        Eve_GetTextWidth <- (lib function: #'Eve_GetTextWidth' type: ((ffi types uint) function(ffi types string))) yes.
        Eve_GetTextHeight <- (lib function: #'Eve_GetTextHeight' type: ((ffi types uint) function(ffi types string))) yes.
      ^ self
    );

    InitEve => Eve_Init value(DefaultFontPath, 14);
    TerminateEve => Eve_Terminate value();

    CurrentWidth => Eve_CurrentWidth value();
    CurrentHeight => Eve_CurrentHeight value();

    PushFrame => Eve_PushFrame value();
    PopFrame => Eve_PopFrame value();

    TranslateI2(x, y) => Eve_TranslateI2 value(x, y);

    SetColorRGBA(r, g, b, a) => Eve_SetColorRGBA value(r, g, b, a);
    SetColorRGB(r, g, b) => Eve_SetColorRGB value(r, g, b);

    Clip(x, y, w, h) => Eve_Clip value(x, y, w, h);

    DrawLine(x1, y1, x2, y2) => Eve_DrawLine value(x1, y1, x2, y2);

    DrawRect(x, y, w, h) => Eve_DrawRect value(x, y, w, h);
    FillRect(x, y, w, h) => Eve_FillRect value(x, y, w, h);

    DrawText(text, x, y) => Eve_DrawText value(text, x, y);

    Clear => Eve_Clear value();
    Render => Eve_Render value();

    PollEvent => Eve_PollEvent value();

    IsEventQuit => Eve_IsEventQuit value() != 0;
    IsEventKeyDown => Eve_IsEventKeyDown value() != 0;
    IsEventKeyUp => Eve_IsEventKeyUp value() != 0;
    IsEventMouseMotion => Eve_IsEventMouseMotion value() != 0;
    IsEventMouseButtonDown => Eve_IsEventMouseButtonDown value() != 0;
    IsEventMouseButtonUp => Eve_IsEventMouseButtonUp value() != 0;

    GetEventMouseX => Eve_GetEventMouseX value();
    GetEventMouseY => Eve_GetEventMouseY value();

    GetEventMouseButtonID => Eve_GetEventMouseButtonID value();

    GetEventKeySym => Eve_GetEventKeySym value();

    GetTextWidth(text) => Eve_GetTextWidth value(text);
    GetTextHeight(text) => Eve_GetTextHeight value(text);


    input = (here / 'input' / '_.eco') importIn: self.


    protected own Text = {
        static with inherited _ = std Clonable;

        text, width, height;

        with inherited trait = {
            static with inherited _ = std Trait;

            initWithText: _text Width: _width Height: _height => (
                text   <- _text.
                width  <- _width.
                height <- _height.
              ^ self
            );

            writeOn: w => w << 'a text element from EVE';
        };
    };

    Text: text => Text clone initWithText: text
                                    Width: (GetTextWidth(text))
                                   Height: (GetTextHeight(text));
}
