{
    static with inherited _ = std Module;

    own keycodes = {
        static with inherited _ = std Module;

        trait = {
            static with inherited _ = std Trait;

            ifEscape:    block => self;
            ifBackspace: block => self;
            ifEnter:     block => self;
            ifTab:       block => self;
            ifLeft:      block => self;
            ifRight:     block => self;
            ifUp:        block => self;
            ifDown:      block => self;
            ifPageUp:    block => self;
            ifPageDown:  block => self;
            ifHome:      block => self;
            ifEnd:       block => self;

            ifScrollUp:   block => self;
            ifScrollDown: block => self;

            keyText => No;

            writeOn: w => w << 'a key';
        };

        letter_a = { static with inherited _ = std Enum; with inherited trait = $ trait; keyText => Yes: 'a'; };
        letter_b = { static with inherited _ = std Enum; with inherited trait = $ trait; keyText => Yes: 'b'; };
        letter_c = { static with inherited _ = std Enum; with inherited trait = $ trait; keyText => Yes: 'c'; };
        letter_d = { static with inherited _ = std Enum; with inherited trait = $ trait; keyText => Yes: 'd'; };
        letter_e = { static with inherited _ = std Enum; with inherited trait = $ trait; keyText => Yes: 'e'; };
        letter_f = { static with inherited _ = std Enum; with inherited trait = $ trait; keyText => Yes: 'f'; };
        letter_g = { static with inherited _ = std Enum; with inherited trait = $ trait; keyText => Yes: 'g'; };
        letter_h = { static with inherited _ = std Enum; with inherited trait = $ trait; keyText => Yes: 'h'; };
        letter_i = { static with inherited _ = std Enum; with inherited trait = $ trait; keyText => Yes: 'i'; };
        letter_j = { static with inherited _ = std Enum; with inherited trait = $ trait; keyText => Yes: 'j'; };
        letter_k = { static with inherited _ = std Enum; with inherited trait = $ trait; keyText => Yes: 'k'; };
        letter_l = { static with inherited _ = std Enum; with inherited trait = $ trait; keyText => Yes: 'l'; };
        letter_m = { static with inherited _ = std Enum; with inherited trait = $ trait; keyText => Yes: 'm'; };
        letter_n = { static with inherited _ = std Enum; with inherited trait = $ trait; keyText => Yes: 'n'; };
        letter_o = { static with inherited _ = std Enum; with inherited trait = $ trait; keyText => Yes: 'o'; };
        letter_p = { static with inherited _ = std Enum; with inherited trait = $ trait; keyText => Yes: 'p'; };
        letter_q = { static with inherited _ = std Enum; with inherited trait = $ trait; keyText => Yes: 'q'; };
        letter_r = { static with inherited _ = std Enum; with inherited trait = $ trait; keyText => Yes: 'r'; };
        letter_s = { static with inherited _ = std Enum; with inherited trait = $ trait; keyText => Yes: 's'; };
        letter_t = { static with inherited _ = std Enum; with inherited trait = $ trait; keyText => Yes: 't'; };
        letter_u = { static with inherited _ = std Enum; with inherited trait = $ trait; keyText => Yes: 'u'; };
        letter_v = { static with inherited _ = std Enum; with inherited trait = $ trait; keyText => Yes: 'v'; };
        letter_w = { static with inherited _ = std Enum; with inherited trait = $ trait; keyText => Yes: 'w'; };
        letter_x = { static with inherited _ = std Enum; with inherited trait = $ trait; keyText => Yes: 'x'; };
        letter_y = { static with inherited _ = std Enum; with inherited trait = $ trait; keyText => Yes: 'y'; };
        letter_z = { static with inherited _ = std Enum; with inherited trait = $ trait; keyText => Yes: 'z'; };

        letter_A = { static with inherited _ = std Enum; with inherited trait = $ trait; keyText => Yes: 'A'; };
        letter_B = { static with inherited _ = std Enum; with inherited trait = $ trait; keyText => Yes: 'B'; };
        letter_C = { static with inherited _ = std Enum; with inherited trait = $ trait; keyText => Yes: 'C'; };
        letter_D = { static with inherited _ = std Enum; with inherited trait = $ trait; keyText => Yes: 'D'; };
        letter_E = { static with inherited _ = std Enum; with inherited trait = $ trait; keyText => Yes: 'E'; };
        letter_F = { static with inherited _ = std Enum; with inherited trait = $ trait; keyText => Yes: 'F'; };
        letter_G = { static with inherited _ = std Enum; with inherited trait = $ trait; keyText => Yes: 'G'; };
        letter_H = { static with inherited _ = std Enum; with inherited trait = $ trait; keyText => Yes: 'H'; };
        letter_I = { static with inherited _ = std Enum; with inherited trait = $ trait; keyText => Yes: 'I'; };
        letter_J = { static with inherited _ = std Enum; with inherited trait = $ trait; keyText => Yes: 'J'; };
        letter_K = { static with inherited _ = std Enum; with inherited trait = $ trait; keyText => Yes: 'K'; };
        letter_L = { static with inherited _ = std Enum; with inherited trait = $ trait; keyText => Yes: 'L'; };
        letter_M = { static with inherited _ = std Enum; with inherited trait = $ trait; keyText => Yes: 'M'; };
        letter_N = { static with inherited _ = std Enum; with inherited trait = $ trait; keyText => Yes: 'N'; };
        letter_O = { static with inherited _ = std Enum; with inherited trait = $ trait; keyText => Yes: 'O'; };
        letter_P = { static with inherited _ = std Enum; with inherited trait = $ trait; keyText => Yes: 'P'; };
        letter_Q = { static with inherited _ = std Enum; with inherited trait = $ trait; keyText => Yes: 'Q'; };
        letter_R = { static with inherited _ = std Enum; with inherited trait = $ trait; keyText => Yes: 'R'; };
        letter_S = { static with inherited _ = std Enum; with inherited trait = $ trait; keyText => Yes: 'S'; };
        letter_T = { static with inherited _ = std Enum; with inherited trait = $ trait; keyText => Yes: 'T'; };
        letter_U = { static with inherited _ = std Enum; with inherited trait = $ trait; keyText => Yes: 'U'; };
        letter_V = { static with inherited _ = std Enum; with inherited trait = $ trait; keyText => Yes: 'V'; };
        letter_W = { static with inherited _ = std Enum; with inherited trait = $ trait; keyText => Yes: 'W'; };
        letter_X = { static with inherited _ = std Enum; with inherited trait = $ trait; keyText => Yes: 'X'; };
        letter_Y = { static with inherited _ = std Enum; with inherited trait = $ trait; keyText => Yes: 'Y'; };
        letter_Z = { static with inherited _ = std Enum; with inherited trait = $ trait; keyText => Yes: 'Z'; };

        digit_0 = { static with inherited _ = std Enum; with inherited trait = $ trait; keyText => Yes: '0'; };
        digit_1 = { static with inherited _ = std Enum; with inherited trait = $ trait; keyText => Yes: '1'; };
        digit_2 = { static with inherited _ = std Enum; with inherited trait = $ trait; keyText => Yes: '2'; };
        digit_3 = { static with inherited _ = std Enum; with inherited trait = $ trait; keyText => Yes: '3'; };
        digit_4 = { static with inherited _ = std Enum; with inherited trait = $ trait; keyText => Yes: '4'; };
        digit_5 = { static with inherited _ = std Enum; with inherited trait = $ trait; keyText => Yes: '5'; };
        digit_6 = { static with inherited _ = std Enum; with inherited trait = $ trait; keyText => Yes: '6'; };
        digit_7 = { static with inherited _ = std Enum; with inherited trait = $ trait; keyText => Yes: '7'; };
        digit_8 = { static with inherited _ = std Enum; with inherited trait = $ trait; keyText => Yes: '8'; };
        digit_9 = { static with inherited _ = std Enum; with inherited trait = $ trait; keyText => Yes: '9'; };

        symbol_exclamation       = { static with inherited _ = std Enum; with inherited trait = $ trait; keyText => Yes: '!'; };
        symbol_at                = { static with inherited _ = std Enum; with inherited trait = $ trait; keyText => Yes: '@'; };
        symbol_hash              = { static with inherited _ = std Enum; with inherited trait = $ trait; keyText => Yes: '#'; };
        symbol_dollar            = { static with inherited _ = std Enum; with inherited trait = $ trait; keyText => Yes: '$'; };
        symbol_percent           = { static with inherited _ = std Enum; with inherited trait = $ trait; keyText => Yes: '%'; };
        symbol_caret             = { static with inherited _ = std Enum; with inherited trait = $ trait; keyText => Yes: '^'; };
        symbol_ampersand         = { static with inherited _ = std Enum; with inherited trait = $ trait; keyText => Yes: '&'; };
        symbol_asterisk          = { static with inherited _ = std Enum; with inherited trait = $ trait; keyText => Yes: '*'; };
        symbol_left_parenthesis  = { static with inherited _ = std Enum; with inherited trait = $ trait; keyText => Yes: '('; };
        symbol_right_parenthesis = { static with inherited _ = std Enum; with inherited trait = $ trait; keyText => Yes: ')'; };

        symbol_semicolon         = { static with inherited _ = std Enum; with inherited trait = $ trait; keyText => Yes: ';'; };
        symbol_colon             = { static with inherited _ = std Enum; with inherited trait = $ trait; keyText => Yes: ':'; };
        symbol_equal             = { static with inherited _ = std Enum; with inherited trait = $ trait; keyText => Yes: '='; };
        symbol_plus              = { static with inherited _ = std Enum; with inherited trait = $ trait; keyText => Yes: '+'; };
        symbol_minus             = { static with inherited _ = std Enum; with inherited trait = $ trait; keyText => Yes: '-'; };
        symbol_underscore        = { static with inherited _ = std Enum; with inherited trait = $ trait; keyText => Yes: '_'; };
        symbol_comma             = { static with inherited _ = std Enum; with inherited trait = $ trait; keyText => Yes: ','; };
        symbol_period            = { static with inherited _ = std Enum; with inherited trait = $ trait; keyText => Yes: '.'; };
        symbol_less_than         = { static with inherited _ = std Enum; with inherited trait = $ trait; keyText => Yes: '<'; };
        symbol_greater_than      = { static with inherited _ = std Enum; with inherited trait = $ trait; keyText => Yes: '>'; };
        symbol_slash             = { static with inherited _ = std Enum; with inherited trait = $ trait; keyText => Yes: '/'; };
        symbol_question          = { static with inherited _ = std Enum; with inherited trait = $ trait; keyText => Yes: '?'; };
        symbol_tilde             = { static with inherited _ = std Enum; with inherited trait = $ trait; keyText => Yes: '~'; };
        symbol_backquote         = { static with inherited _ = std Enum; with inherited trait = $ trait; keyText => Yes: '`'; };
        symbol_backslash         = { static with inherited _ = std Enum; with inherited trait = $ trait; keyText => Yes: '\\'; };
        symbol_pipe              = { static with inherited _ = std Enum; with inherited trait = $ trait; keyText => Yes: '|'; };
        symbol_left_bracket      = { static with inherited _ = std Enum; with inherited trait = $ trait; keyText => Yes: '['; };
        symbol_right_bracket     = { static with inherited _ = std Enum; with inherited trait = $ trait; keyText => Yes: ']'; };
        symbol_left_brace        = { static with inherited _ = std Enum; with inherited trait = $ trait; keyText => Yes: '{'; };
        symbol_right_brace       = { static with inherited _ = std Enum; with inherited trait = $ trait; keyText => Yes: '}'; };
        symbol_single_quote      = { static with inherited _ = std Enum; with inherited trait = $ trait; keyText => Yes: '\''; };
        symbol_double_quote      = { static with inherited _ = std Enum; with inherited trait = $ trait; keyText => Yes: '"'; };

        special_enter     = { static with inherited _ = std Enum; with inherited trait = $ trait; ifEnter:     block => ( block value. ^ self ); };
        special_escape    = { static with inherited _ = std Enum; with inherited trait = $ trait; ifEscape:    block => ( block value. ^ self ); };
        special_backspace = { static with inherited _ = std Enum; with inherited trait = $ trait; ifBackspace: block => ( block value. ^ self ); };
        special_tab       = { static with inherited _ = std Enum; with inherited trait = $ trait; ifTab:       block => ( block value. ^ self ); keyText => Yes: '\t'; };
        special_space     = { static with inherited _ = std Enum; with inherited trait = $ trait; keyText => Yes: ' '; };

        special_left  = { static with inherited _ = std Enum; with inherited trait = $ trait; ifLeft:  block => ( block value. ^ self ); };
        special_right = { static with inherited _ = std Enum; with inherited trait = $ trait; ifRight: block => ( block value. ^ self ); };
        special_up    = { static with inherited _ = std Enum; with inherited trait = $ trait; ifUp:    block => ( block value. ^ self ); };
        special_down  = { static with inherited _ = std Enum; with inherited trait = $ trait; ifDown:  block => ( block value. ^ self ); };

        special_pageup   = { static with inherited _ = std Enum; with inherited trait = $ trait; ifPageUp:   block => ( block value. ^ self ); };
        special_pagedown = { static with inherited _ = std Enum; with inherited trait = $ trait; ifPageDown: block => ( block value. ^ self ); };

        special_scroll_up   = { static with inherited _ = std Enum; with inherited trait = $ trait; ifScrollUp:   block => ( block value. ^ self ); };
        special_scroll_down = { static with inherited _ = std Enum; with inherited trait = $ trait; ifScrollDown: block => ( block value. ^ self ); };

        special_home = { static with inherited _ = std Enum; with inherited trait = $ trait; ifHome: block => ( block value. ^ self ); };
        special_end  = { static with inherited _ = std Enum; with inherited trait = $ trait; ifEnd:  block => ( block value. ^ self ); };

        special_unknown = { static with inherited _ = std Enum; with inherited trait = $ trait; };
    },

    own sdlkeys = {
        static with inherited _ = std Module;

        SDLK_ESCAPE = 27,
        SDLK_BACKSPACE = 8,
        SDLK_TAB = 9,
        SDLK_RETURN = 13,
        SDLK_SPACE = 32,

        SDLK_LEFT  = 1073741904,
        SDLK_RIGHT = 1073741903,
        SDLK_UP    = 1073741906,
        SDLK_DOWN  = 1073741905,

        SDLK_A = 97,
        SDLK_B = 98,
        SDLK_C = 99,
        SDLK_D = 100,
        SDLK_E = 101,
        SDLK_F = 102,
        SDLK_G = 103,
        SDLK_H = 104,
        SDLK_I = 105,
        SDLK_J = 106,
        SDLK_K = 107,
        SDLK_L = 108,
        SDLK_M = 109,
        SDLK_N = 110,
        SDLK_O = 111,
        SDLK_P = 112,
        SDLK_Q = 113,
        SDLK_R = 114,
        SDLK_S = 115,
        SDLK_T = 116,
        SDLK_U = 117,
        SDLK_V = 118,
        SDLK_W = 119,
        SDLK_X = 120,
        SDLK_Y = 121,
        SDLK_Z = 122,

        SDLK_0 = 48,
        SDLK_1 = 49,
        SDLK_2 = 50,
        SDLK_3 = 51,
        SDLK_4 = 52,
        SDLK_5 = 53,
        SDLK_6 = 54,
        SDLK_7 = 55,
        SDLK_8 = 56,
        SDLK_9 = 57,
    };

    own sdlscans = {
        static with inherited _ = std Module;

        SDL_SCANCODE_UNKNOWN = 0,

        SDL_SCANCODE_A = 4,
        SDL_SCANCODE_B = 5,
        SDL_SCANCODE_C = 6,
        SDL_SCANCODE_D = 7,
        SDL_SCANCODE_E = 8,
        SDL_SCANCODE_F = 9,
        SDL_SCANCODE_G = 10,
        SDL_SCANCODE_H = 11,
        SDL_SCANCODE_I = 12,
        SDL_SCANCODE_J = 13,
        SDL_SCANCODE_K = 14,
        SDL_SCANCODE_L = 15,
        SDL_SCANCODE_M = 16,
        SDL_SCANCODE_N = 17,
        SDL_SCANCODE_O = 18,
        SDL_SCANCODE_P = 19,
        SDL_SCANCODE_Q = 20,
        SDL_SCANCODE_R = 21,
        SDL_SCANCODE_S = 22,
        SDL_SCANCODE_T = 23,
        SDL_SCANCODE_U = 24,
        SDL_SCANCODE_V = 25,
        SDL_SCANCODE_W = 26,
        SDL_SCANCODE_X = 27,
        SDL_SCANCODE_Y = 28,
        SDL_SCANCODE_Z = 29,

        SDL_SCANCODE_1 = 30,
        SDL_SCANCODE_2 = 31,
        SDL_SCANCODE_3 = 32,
        SDL_SCANCODE_4 = 33,
        SDL_SCANCODE_5 = 34,
        SDL_SCANCODE_6 = 35,
        SDL_SCANCODE_7 = 36,
        SDL_SCANCODE_8 = 37,
        SDL_SCANCODE_9 = 38,
        SDL_SCANCODE_0 = 39,

        SDL_SCANCODE_RETURN = 40,
        SDL_SCANCODE_ESCAPE = 41,
        SDL_SCANCODE_BACKSPACE = 42,
        SDL_SCANCODE_TAB = 43,
        SDL_SCANCODE_SPACE = 44,

        SDL_SCANCODE_MINUS = 45,
        SDL_SCANCODE_EQUALS = 46,
        SDL_SCANCODE_LEFTBRACKET = 47,
        SDL_SCANCODE_RIGHTBRACKET = 48,
        SDL_SCANCODE_BACKSLASH = 49,
        SDL_SCANCODE_NONUSHASH = 50,
        SDL_SCANCODE_SEMICOLON = 51,
        SDL_SCANCODE_APOSTROPHE = 52,
        SDL_SCANCODE_GRAVE = 53,
        SDL_SCANCODE_COMMA = 54,
        SDL_SCANCODE_PERIOD = 55,
        SDL_SCANCODE_SLASH = 56,

        SDL_SCANCODE_CAPSLOCK = 57,

        SDL_SCANCODE_F1 = 58,
        SDL_SCANCODE_F2 = 59,
        SDL_SCANCODE_F3 = 60,
        SDL_SCANCODE_F4 = 61,
        SDL_SCANCODE_F5 = 62,
        SDL_SCANCODE_F6 = 63,
        SDL_SCANCODE_F7 = 64,
        SDL_SCANCODE_F8 = 65,
        SDL_SCANCODE_F9 = 66,
        SDL_SCANCODE_F10 = 67,
        SDL_SCANCODE_F11 = 68,
        SDL_SCANCODE_F12 = 69,

        SDL_SCANCODE_PRINTSCREEN = 70,
        SDL_SCANCODE_SCROLLLOCK = 71,
        SDL_SCANCODE_PAUSE = 72,
        SDL_SCANCODE_INSERT = 73,
        SDL_SCANCODE_HOME = 74,
        SDL_SCANCODE_PAGEUP = 75,
        SDL_SCANCODE_DELETE = 76,
        SDL_SCANCODE_END = 77,
        SDL_SCANCODE_PAGEDOWN = 78,
        SDL_SCANCODE_RIGHT = 79,
        SDL_SCANCODE_LEFT = 80,
        SDL_SCANCODE_DOWN = 81,
        SDL_SCANCODE_UP = 82,

        SDL_SCANCODE_NUMLOCKCLEAR = 83,
        SDL_SCANCODE_KP_DIVIDE = 84,
        SDL_SCANCODE_KP_MULTIPLY = 85,
        SDL_SCANCODE_KP_MINUS = 86,
        SDL_SCANCODE_KP_PLUS = 87,
        SDL_SCANCODE_KP_ENTER = 88,
        SDL_SCANCODE_KP_1 = 89,
        SDL_SCANCODE_KP_2 = 90,
        SDL_SCANCODE_KP_3 = 91,
        SDL_SCANCODE_KP_4 = 92,
        SDL_SCANCODE_KP_5 = 93,
        SDL_SCANCODE_KP_6 = 94,
        SDL_SCANCODE_KP_7 = 95,
        SDL_SCANCODE_KP_8 = 96,
        SDL_SCANCODE_KP_9 = 97,
        SDL_SCANCODE_KP_0 = 98,
        SDL_SCANCODE_KP_PERIOD = 99,

        SDL_SCANCODE_NONUSBACKSLASH = 100,
        SDL_SCANCODE_APPLICATION = 101,
        SDL_SCANCODE_POWER = 102,
        SDL_SCANCODE_KP_EQUALS = 103,
        SDL_SCANCODE_F13 = 104,
        SDL_SCANCODE_F14 = 105,
        SDL_SCANCODE_F15 = 106,
        SDL_SCANCODE_F16 = 107,
        SDL_SCANCODE_F17 = 108,
        SDL_SCANCODE_F18 = 109,
        SDL_SCANCODE_F19 = 110,
        SDL_SCANCODE_F20 = 111,
        SDL_SCANCODE_F21 = 112,
        SDL_SCANCODE_F22 = 113,
        SDL_SCANCODE_F23 = 114,
        SDL_SCANCODE_F24 = 115,
        SDL_SCANCODE_EXECUTE = 116,
        SDL_SCANCODE_HELP = 117,
        SDL_SCANCODE_MENU = 118,
        SDL_SCANCODE_SELECT = 119,
        SDL_SCANCODE_STOP = 120,
        SDL_SCANCODE_AGAIN = 121,
        SDL_SCANCODE_UNDO = 122,
        SDL_SCANCODE_CUT = 123,
        SDL_SCANCODE_COPY = 124,
        SDL_SCANCODE_PASTE = 125,
        SDL_SCANCODE_FIND = 126,
        SDL_SCANCODE_MUTE = 127,
        SDL_SCANCODE_VOLUMEUP = 128,
        SDL_SCANCODE_VOLUMEDOWN = 129,

        SDL_SCANCODE_KP_COMMA = 133,
        SDL_SCANCODE_KP_EQUALSAS400 = 134,

        SDL_SCANCODE_INTERNATIONAL1 = 135,
        SDL_SCANCODE_INTERNATIONAL2 = 136,
        SDL_SCANCODE_INTERNATIONAL3 = 137,
        SDL_SCANCODE_INTERNATIONAL4 = 138,
        SDL_SCANCODE_INTERNATIONAL5 = 139,
        SDL_SCANCODE_INTERNATIONAL6 = 140,
        SDL_SCANCODE_INTERNATIONAL7 = 141,
        SDL_SCANCODE_INTERNATIONAL8 = 142,
        SDL_SCANCODE_INTERNATIONAL9 = 143,
        SDL_SCANCODE_LANG1 = 144,
        SDL_SCANCODE_LANG2 = 145,
        SDL_SCANCODE_LANG3 = 146,
        SDL_SCANCODE_LANG4 = 147,
        SDL_SCANCODE_LANG5 = 148,
        SDL_SCANCODE_LANG6 = 149,
        SDL_SCANCODE_LANG7 = 150,
        SDL_SCANCODE_LANG8 = 151,
        SDL_SCANCODE_LANG9 = 152,

        SDL_SCANCODE_ALTERASE = 153,
        SDL_SCANCODE_SYSREQ = 154,
        SDL_SCANCODE_CANCEL = 155,
        SDL_SCANCODE_CLEAR = 156,
        SDL_SCANCODE_PRIOR = 157,
        SDL_SCANCODE_RETURN2 = 158,
        SDL_SCANCODE_SEPARATOR = 159,
        SDL_SCANCODE_OUT = 160,
        SDL_SCANCODE_OPER = 161,
        SDL_SCANCODE_CLEARAGAIN = 162,
        SDL_SCANCODE_CRSEL = 163,
        SDL_SCANCODE_EXSEL = 164,

        SDL_SCANCODE_KP_00 = 176,
        SDL_SCANCODE_KP_000 = 177,
        SDL_SCANCODE_THOUSANDSSEPARATOR = 178,
        SDL_SCANCODE_DECIMALSEPARATOR = 179,
        SDL_SCANCODE_CURRENCYUNIT = 180,
        SDL_SCANCODE_CURRENCYSUBUNIT = 181,
        SDL_SCANCODE_KP_LEFTPAREN = 182,
        SDL_SCANCODE_KP_RIGHTPAREN = 183,
        SDL_SCANCODE_KP_LEFTBRACE = 184,
        SDL_SCANCODE_KP_RIGHTBRACE = 185,
        SDL_SCANCODE_KP_TAB = 186,
        SDL_SCANCODE_KP_BACKSPACE = 187,
        SDL_SCANCODE_KP_A = 188,
        SDL_SCANCODE_KP_B = 189,
        SDL_SCANCODE_KP_C = 190,
        SDL_SCANCODE_KP_D = 191,
        SDL_SCANCODE_KP_E = 192,
        SDL_SCANCODE_KP_F = 193,
        SDL_SCANCODE_KP_XOR = 194,
        SDL_SCANCODE_KP_POWER = 195,
        SDL_SCANCODE_KP_PERCENT = 196,
        SDL_SCANCODE_KP_LESS = 197,
        SDL_SCANCODE_KP_GREATER = 198,
        SDL_SCANCODE_KP_AMPERSAND = 199,
        SDL_SCANCODE_KP_DBLAMPERSAND = 200,
        SDL_SCANCODE_KP_VERTICALBAR = 201,
        SDL_SCANCODE_KP_DBLVERTICALBAR = 202,
        SDL_SCANCODE_KP_COLON = 203,
        SDL_SCANCODE_KP_HASH = 204,
        SDL_SCANCODE_KP_SPACE = 205,
        SDL_SCANCODE_KP_AT = 206,
        SDL_SCANCODE_KP_EXCLAM = 207,
        SDL_SCANCODE_KP_MEMSTORE = 208,
        SDL_SCANCODE_KP_MEMRECALL = 209,
        SDL_SCANCODE_KP_MEMCLEAR = 210,
        SDL_SCANCODE_KP_MEMADD = 211,
        SDL_SCANCODE_KP_MEMSUBTRACT = 212,
        SDL_SCANCODE_KP_MEMMULTIPLY = 213,
        SDL_SCANCODE_KP_MEMDIVIDE = 214,
        SDL_SCANCODE_KP_PLUSMINUS = 215,
        SDL_SCANCODE_KP_CLEAR = 216,
        SDL_SCANCODE_KP_CLEARENTRY = 217,
        SDL_SCANCODE_KP_BINARY = 218,
        SDL_SCANCODE_KP_OCTAL = 219,
        SDL_SCANCODE_KP_DECIMAL = 220,
        SDL_SCANCODE_KP_HEXADECIMAL = 221,

        SDL_SCANCODE_LCTRL = 224,
        SDL_SCANCODE_LSHIFT = 225,
        SDL_SCANCODE_LALT = 226,
        SDL_SCANCODE_LGUI = 227,
        SDL_SCANCODE_RCTRL = 228,
        SDL_SCANCODE_RSHIFT = 229,
        SDL_SCANCODE_RALT = 230,
        SDL_SCANCODE_RGUI = 231,

        SDL_SCANCODE_MODE = 257,

        SDL_SCANCODE_AUDIONEXT = 258,
        SDL_SCANCODE_AUDIOPREV = 259,
        SDL_SCANCODE_AUDIOSTOP = 260,
        SDL_SCANCODE_AUDIOPLAY = 261,
        SDL_SCANCODE_AUDIOMUTE = 262,
        SDL_SCANCODE_MEDIASELECT = 263,
        SDL_SCANCODE_WWW = 264,
        SDL_SCANCODE_MAIL = 265,
        SDL_SCANCODE_CALCULATOR = 266,
        SDL_SCANCODE_COMPUTER = 267,
        SDL_SCANCODE_AC_SEARCH = 268,
        SDL_SCANCODE_AC_HOME = 269,
        SDL_SCANCODE_AC_BACK = 270,
        SDL_SCANCODE_AC_FORWARD = 271,
        SDL_SCANCODE_AC_STOP = 272,
        SDL_SCANCODE_AC_REFRESH = 273,
        SDL_SCANCODE_AC_BOOKMARKS = 274,

        SDL_SCANCODE_BRIGHTNESSDOWN = 275,
        SDL_SCANCODE_BRIGHTNESSUP = 276,
        SDL_SCANCODE_DISPLAYSWITCH = 277,

        SDL_SCANCODE_KBDILLUMTOGGLE = 278,
        SDL_SCANCODE_KBDILLUMDOWN = 279,
        SDL_SCANCODE_KBDILLUMUP = 280,
        SDL_SCANCODE_EJECT = 281,
        SDL_SCANCODE_SLEEP = 282,

        SDL_SCANCODE_APP1 = 283,
        SDL_SCANCODE_APP2 = 284,

        SDL_SCANCODE_AUDIOREWIND = 285,
        SDL_SCANCODE_AUDIOFASTFORWARD = 286,

        SDL_NUM_SCANCODES = 512
    };

    Translate: sdlscan Modifiers: mods => (
        |
            isLeftShift  <- (mods bitAnd: 1) != 0,
            isRightShift <- (mods bitAnd: 2) != 0,
            isShift      <- [ isLeftShift ] or: [ isRightShift ],
        |

        Switch: sdlscan
          ~ case: sdlscans SDL_SCANCODE_ESCAPE    do: [ ^ keycodes special_escape    ]
          ~ case: sdlscans SDL_SCANCODE_BACKSPACE do: [ ^ keycodes special_backspace ]
          ~ case: sdlscans SDL_SCANCODE_TAB       do: [ ^ keycodes special_tab       ]
          ~ case: sdlscans SDL_SCANCODE_RETURN    do: [ ^ keycodes special_enter     ]
          ~ case: sdlscans SDL_SCANCODE_SPACE     do: [ ^ keycodes special_space     ]
          ~ case: sdlscans SDL_SCANCODE_LEFT      do: [ ^ keycodes special_left      ]
          ~ case: sdlscans SDL_SCANCODE_RIGHT     do: [ ^ keycodes special_right     ]
          ~ case: sdlscans SDL_SCANCODE_UP        do: [ ^ keycodes special_up        ]
          ~ case: sdlscans SDL_SCANCODE_DOWN      do: [ ^ keycodes special_down      ]
          ~ case: sdlscans SDL_SCANCODE_PAGEUP    do: [ ^ keycodes special_pageup    ]
          ~ case: sdlscans SDL_SCANCODE_PAGEDOWN  do: [ ^ keycodes special_pagedown  ]
          ~ case: sdlscans SDL_SCANCODE_HOME      do: [ ^ keycodes special_home      ]
          ~ case: sdlscans SDL_SCANCODE_END       do: [ ^ keycodes special_end       ]
          ~ case: sdlscans SDL_SCANCODE_A      do: [ isShift if: [ ^ keycodes letter_A ] else: [ ^ keycodes letter_a ]          ]
          ~ case: sdlscans SDL_SCANCODE_B      do: [ isShift if: [ ^ keycodes letter_B ] else: [ ^ keycodes letter_b ]          ]
          ~ case: sdlscans SDL_SCANCODE_C      do: [ isShift if: [ ^ keycodes letter_C ] else: [ ^ keycodes letter_c ]          ]
          ~ case: sdlscans SDL_SCANCODE_D      do: [ isShift if: [ ^ keycodes letter_D ] else: [ ^ keycodes letter_d ]          ]
          ~ case: sdlscans SDL_SCANCODE_E      do: [ isShift if: [ ^ keycodes letter_E ] else: [ ^ keycodes letter_e ]          ]
          ~ case: sdlscans SDL_SCANCODE_F      do: [ isShift if: [ ^ keycodes letter_F ] else: [ ^ keycodes letter_f ]          ]
          ~ case: sdlscans SDL_SCANCODE_G      do: [ isShift if: [ ^ keycodes letter_G ] else: [ ^ keycodes letter_g ]          ]
          ~ case: sdlscans SDL_SCANCODE_H      do: [ isShift if: [ ^ keycodes letter_H ] else: [ ^ keycodes letter_h ]          ]
          ~ case: sdlscans SDL_SCANCODE_I      do: [ isShift if: [ ^ keycodes letter_I ] else: [ ^ keycodes letter_i ]          ]
          ~ case: sdlscans SDL_SCANCODE_J      do: [ isShift if: [ ^ keycodes letter_J ] else: [ ^ keycodes letter_j ]          ]
          ~ case: sdlscans SDL_SCANCODE_K      do: [ isShift if: [ ^ keycodes letter_K ] else: [ ^ keycodes letter_k ]          ]
          ~ case: sdlscans SDL_SCANCODE_L      do: [ isShift if: [ ^ keycodes letter_L ] else: [ ^ keycodes letter_l ]          ]
          ~ case: sdlscans SDL_SCANCODE_M      do: [ isShift if: [ ^ keycodes letter_M ] else: [ ^ keycodes letter_m ]          ]
          ~ case: sdlscans SDL_SCANCODE_N      do: [ isShift if: [ ^ keycodes letter_N ] else: [ ^ keycodes letter_n ]          ]
          ~ case: sdlscans SDL_SCANCODE_O      do: [ isShift if: [ ^ keycodes letter_O ] else: [ ^ keycodes letter_o ]          ]
          ~ case: sdlscans SDL_SCANCODE_P      do: [ isShift if: [ ^ keycodes letter_P ] else: [ ^ keycodes letter_p ]          ]
          ~ case: sdlscans SDL_SCANCODE_Q      do: [ isShift if: [ ^ keycodes letter_Q ] else: [ ^ keycodes letter_q ]          ]
          ~ case: sdlscans SDL_SCANCODE_R      do: [ isShift if: [ ^ keycodes letter_R ] else: [ ^ keycodes letter_r ]          ]
          ~ case: sdlscans SDL_SCANCODE_S      do: [ isShift if: [ ^ keycodes letter_S ] else: [ ^ keycodes letter_s ]          ]
          ~ case: sdlscans SDL_SCANCODE_T      do: [ isShift if: [ ^ keycodes letter_T ] else: [ ^ keycodes letter_t ]          ]
          ~ case: sdlscans SDL_SCANCODE_U      do: [ isShift if: [ ^ keycodes letter_U ] else: [ ^ keycodes letter_u ]          ]
          ~ case: sdlscans SDL_SCANCODE_V      do: [ isShift if: [ ^ keycodes letter_V ] else: [ ^ keycodes letter_v ]          ]
          ~ case: sdlscans SDL_SCANCODE_W      do: [ isShift if: [ ^ keycodes letter_W ] else: [ ^ keycodes letter_w ]          ]
          ~ case: sdlscans SDL_SCANCODE_X      do: [ isShift if: [ ^ keycodes letter_X ] else: [ ^ keycodes letter_x ]          ]
          ~ case: sdlscans SDL_SCANCODE_Y      do: [ isShift if: [ ^ keycodes letter_Y ] else: [ ^ keycodes letter_y ]          ]
          ~ case: sdlscans SDL_SCANCODE_Z      do: [ isShift if: [ ^ keycodes letter_Z ] else: [ ^ keycodes letter_z ]          ]
          ~ case: sdlscans SDL_SCANCODE_1      do: [ isShift if: [ ^ keycodes symbol_exclamation       ] else: [ ^ keycodes digit_1 ] ]
          ~ case: sdlscans SDL_SCANCODE_2      do: [ isShift if: [ ^ keycodes symbol_at                ] else: [ ^ keycodes digit_2 ] ]
          ~ case: sdlscans SDL_SCANCODE_3      do: [ isShift if: [ ^ keycodes symbol_hash              ] else: [ ^ keycodes digit_3 ] ]
          ~ case: sdlscans SDL_SCANCODE_4      do: [ isShift if: [ ^ keycodes symbol_dollar            ] else: [ ^ keycodes digit_4 ] ]
          ~ case: sdlscans SDL_SCANCODE_5      do: [ isShift if: [ ^ keycodes symbol_percent           ] else: [ ^ keycodes digit_5 ] ]
          ~ case: sdlscans SDL_SCANCODE_6      do: [ isShift if: [ ^ keycodes symbol_caret             ] else: [ ^ keycodes digit_6 ] ]
          ~ case: sdlscans SDL_SCANCODE_7      do: [ isShift if: [ ^ keycodes symbol_ampersand         ] else: [ ^ keycodes digit_7 ] ]
          ~ case: sdlscans SDL_SCANCODE_8      do: [ isShift if: [ ^ keycodes symbol_asterisk          ] else: [ ^ keycodes digit_8 ] ]
          ~ case: sdlscans SDL_SCANCODE_9      do: [ isShift if: [ ^ keycodes symbol_left_parenthesis  ] else: [ ^ keycodes digit_9 ] ]
          ~ case: sdlscans SDL_SCANCODE_0      do: [ isShift if: [ ^ keycodes symbol_right_parenthesis ] else: [ ^ keycodes digit_0 ] ]
          ~ case: sdlscans SDL_SCANCODE_KP_0   do: [ ^ keycodes digit_0 ]
          ~ case: sdlscans SDL_SCANCODE_KP_1   do: [ ^ keycodes digit_1 ]
          ~ case: sdlscans SDL_SCANCODE_KP_2   do: [ ^ keycodes digit_2 ]
          ~ case: sdlscans SDL_SCANCODE_KP_3   do: [ ^ keycodes digit_3 ]
          ~ case: sdlscans SDL_SCANCODE_KP_4   do: [ ^ keycodes digit_4 ]
          ~ case: sdlscans SDL_SCANCODE_KP_5   do: [ ^ keycodes digit_5 ]
          ~ case: sdlscans SDL_SCANCODE_KP_6   do: [ ^ keycodes digit_6 ]
          ~ case: sdlscans SDL_SCANCODE_KP_7   do: [ ^ keycodes digit_7 ]
          ~ case: sdlscans SDL_SCANCODE_KP_8   do: [ ^ keycodes digit_8 ]
          ~ case: sdlscans SDL_SCANCODE_KP_9   do: [ ^ keycodes digit_9 ]
          ~ case: sdlscans SDL_SCANCODE_MINUS        do: [ isShift if: [ ^ keycodes symbol_underscore   ] else: [ ^ keycodes symbol_minus         ] ]
          ~ case: sdlscans SDL_SCANCODE_EQUALS       do: [ isShift if: [ ^ keycodes symbol_plus         ] else: [ ^ keycodes symbol_equal         ] ]
          ~ case: sdlscans SDL_SCANCODE_LEFTBRACKET  do: [ isShift if: [ ^ keycodes symbol_left_brace   ] else: [ ^ keycodes symbol_left_bracket  ] ]
          ~ case: sdlscans SDL_SCANCODE_RIGHTBRACKET do: [ isShift if: [ ^ keycodes symbol_right_brace  ] else: [ ^ keycodes symbol_right_bracket ] ]
          ~ case: sdlscans SDL_SCANCODE_SEMICOLON    do: [ isShift if: [ ^ keycodes symbol_colon        ] else: [ ^ keycodes symbol_semicolon     ] ]
          ~ case: sdlscans SDL_SCANCODE_APOSTROPHE   do: [ isShift if: [ ^ keycodes symbol_double_quote ] else: [ ^ keycodes symbol_single_quote  ] ]
          ~ case: sdlscans SDL_SCANCODE_GRAVE        do: [ isShift if: [ ^ keycodes symbol_tilde        ] else: [ ^ keycodes symbol_backquote     ] ]
          ~ case: sdlscans SDL_SCANCODE_COMMA        do: [ isShift if: [ ^ keycodes symbol_less_than    ] else: [ ^ keycodes symbol_comma         ] ]
          ~ case: sdlscans SDL_SCANCODE_PERIOD       do: [ isShift if: [ ^ keycodes symbol_greater_than ] else: [ ^ keycodes symbol_period        ] ]
          ~ case: sdlscans SDL_SCANCODE_SLASH        do: [ isShift if: [ ^ keycodes symbol_question     ] else: [ ^ keycodes symbol_slash         ] ]
          ~ case: sdlscans SDL_SCANCODE_BACKSLASH    do: [ isShift if: [ ^ keycodes symbol_pipe         ] else: [ ^ keycodes symbol_backslash     ] ]
        ~ default: [ ^ keycodes special_unknown ]
    );
}
