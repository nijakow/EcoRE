{
    static with inherited _ = std Module;
    sdl = (here / 'gfx' / 'sdl' / '_.eco') import.
    morphic = (here / 'gfx' / 'morphic' / '_.eco') import.

    own MorphicHandler = {
        static with inherited _ = std Module;
        private morphic = $ morphic;

        protected program,
        protected renderer,
        protected morph,
        protected grabbedMorph;

        with inherited trait = {
            makeF => morphic DemoMorph new
                        ~ xLayout: (morphic RigidSize: 50)
                        ~ yLayout: (morphic RigidSize: 50)
                        ~ r: 100 g: 0 b: 0;
            init => (
                | frame <- morphic Morph new |
                frame
                  ~ add: (
                        morphic VBox new
                          ~ xLayout: (morphic RigidSize: 400)
                          ~ yLayout: (morphic RigidSize: 250)
                          ~ add: (morphic ColorMorph new)
                          ~ add: (
                                morphic HBox new
                                  run: [ :me | 1 to: 3 do: [ :i | me add: makeF ] ].
                            )
                    ).
                morph <- frame.
              ^ self
            );

            setProgram: p => (
                program  <- p.
                renderer <- morphic Renderer clone
                              initWithSDLRenderer: program window renderer
                                                X: 0
                                                Y: 0
                                                W: program window width
                                                H: program window height.
                morph bounds: renderer bounds.
                morph recalculateLayout.
            );

            tick => (
                renderer setR: 0 G: 0 B: 0.
                renderer clear.
                renderer accept: morph.
                renderer present.
            );

            handleEvent: event => (
                event isMouseMotionEvent -> [
                    (std io out << event mouseMotionX << ' ' << event mouseMotionY) newline commit.
                    morph issueEvent: No AtX: event mouseMotionX Y: event mouseMotionY
                ].
                event isMouseButtonDown -> [
                    (std io out << 'Click!') newline.
                    morph xRayAtX: event mouseButtonX Y: event mouseButtonY Do: [
                        :morph | (std io out << morph) newline.
                    ].
                    (std io out) commit.
                ].
                event isKeyDown -> [ ^ program stop ].
            );
        };
    };

    Main => (
        sdl Init.
        |
            win     <- sdl NewWindowWithTitle: 'Morphic' X: 100 Y: 100 W: 800 H: 600,
            program <- sdl Program clone initWithWindow: win Handler: (MorphicHandler new)
        |
        program run.
    );
}
