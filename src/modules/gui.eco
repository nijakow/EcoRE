{
    static with inherited _ = std Module;
    sdl = (here / 'gfx' / 'sdl' / '_.eco') import.
    morphic = (here / 'gfx' / 'morphic' / '_.eco') import.

    own MorphicHandler = {
        static with inherited _ = std Module;
        private morphic = $ morphic;

        protected mouseX,
        protected mouseY;

        protected program,
        protected renderer,
        protected morph;

        with inherited trait = {
            VBox(...) => (
                | box <- (morphic VBoxMorph) new |
                std util newArray(...) do: [ :e | box add: e ].
              ^ box
            );

            HBox(...) => (
                | box <- (morphic HBoxMorph) new |
                std util newArray(...) do: [ :e | box add: e ].
              ^ box
            );

            ShrinkWrap(e)  => e ~ xLayout: morphic layouts ShrinkWrap ~ yLayout: morphic layouts ShrinkWrap;
            RedBlock(w, h) => morphic DemoMorph new ~ r: 100 g: 0 b: 0 ~ rigidWidth: w ~ rigidHeight: h;
            YellowBlock    => morphic DemoMorph new ~ r: 100 g: 100 b: 0;
            Spacer         => morphic Morph new;
            Center(e)      => HBox(Spacer, VBox(Spacer, e, Spacer) ~ xLayout: morphic layouts ShrinkWrap, Spacer);

            makeF => (  VBox(
                            RedBlock(50, 50),
                            YellowBlock,
                            Center(RedBlock(25, 25)),
                            YellowBlock,
                            RedBlock(50, 50),
                        ) ~ xLayout: morphic layouts ShrinkWrap
                    );
            makeX => (
                morphic HBoxMorph new
                    ~ add: ( morphic DemoMorph new ~ r: 100 g: 100 b: 100 )
                    ~ add: makeF
                    ~ add: ( morphic DemoMorph new ~ r: 100 g: 100 b: 100 )
                    ~ add: makeF
                    ~ add: ( morphic DemoMorph new ~ r: 100 g: 100 b: 100 )
            );
            makeY => (
                morphic VBoxMorph new
                  ~ add: makeX
                  ~ add: ( morphic DemoMorph new ~ r: 0 g: 0 b: 100 )
                  ~ add: makeX
            );

            init => (
                morph <- morphic WorldMorph new
                           ~ add: (RedBlock(50, 50) ~ moveToX: 100 Y: 100).
                mouseX <- 0.
                mouseY <- 0.
              ^ self
            );

            setProgram: p => (
                program  <- p.
                renderer <- morphic Renderer clone
                              initWithSDLRenderer: program window renderer
                                                X: 0
                                                Y: 0
                                                W: program window width
                                                H: program window height.
                morph bounds: renderer bounds.
                morph layoutInPlace.
                morph childrenDo: [ :c | std io out << c bounds ~ newline commit ].
            );

            tick => (
                morph handMorph moveToX: mouseX Y: mouseY.
                morph maybeUpdate.
                renderer setR: 0 G: 0 B: 0.
                renderer clear.
                renderer accept: morph.
                renderer present.
            );

            findMorphAtX: x Y: y => (
                | v <- No |
                morph xRayAtX: x Y: y Do: [ :m |
                    v <- Yes: m
                ].
              ^ v
            );

            handleEvent: event => (
                event isMouseMotionEvent -> [
                    mouseX <- event mouseMotionX.
                    mouseY <- event mouseMotionY.
                ].
                event isMouseButtonDown -> [
                    (std io out << 'Click!') newline commit.
                    morph handMorph grabOrRelease.
                ].
                event isKeyDown -> [ ^ program stop ].
            );
        };
    };

    Main => (
        sdl Init.
        |
            win     <- sdl NewWindowWithTitle: 'Morphic' X: 100 Y: 100 W: 800 H: 600,
            program <- sdl Program clone initWithWindow: win Handler: (MorphicHandler new)
        |
        program run.
    );
}
