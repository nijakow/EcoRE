
{
    static with inherited _ = std Module;

    own ast = (here / 'ast' / '_.eco') importIn: self;
    own instructions = (here / 'instructions' / '_.eco') importIn: self;

    own Decompiler = (here / 'Decompiler.eco') importIn: self;

    protected Disassembler => instructions Disassembler;
    

    Print(f, indent) => (
        | expr <- f instructions |
        [ :break |
            1 to: indent do: [ std io out << '    ' ].
            (std io out << expr) newline commit.
            expr withSubCode: [ :c | Print(c, indent + 1) ].
            expr next yes: [ :v | expr <- v ] no: [ break value ].
        ] repeatWithBreak.
      ^ f
    );

    DisassembleCodeObject: code => instructions Disassemble: code;

    Disassemble: code => DisassembleCodeObject: code;

    Disassemble: name In: object => (
        Disassemble: ((std reflect Mirror: object)
                        ~ slot: name
                        ~ slotValue).
    );

    Print: name In: object => Print(Disassemble: name In: object, 0);

    BuildAST: disassembledFunction => (
      ^ ((Decompiler clone) initWithFunction: disassembledFunction) buildAST
    );
}
