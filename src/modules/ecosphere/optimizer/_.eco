
{
    static with inherited _ = std Module;

    own common = (here / 'common' / '_.eco') importIn: self;

    own asm = (here / 'asm' / '_.eco') importIn: self;
    own ast = (here / 'ast' / '_.eco') importIn: self;
    own decompiler = (here / 'decompiler' / '_.eco') importIn: self;
    own rewriter = (here / 'rewriter' / '_.eco') importIn: self;


    DisassembleCodeObject: code => asm Disassemble: code;
    Disassemble: code => DisassembleCodeObject: code;

    Disassemble: name In: object => (
        Disassemble: ((std reflect Mirror: object)
                        ~ slot: name
                        ~ slotValue).
    );

    BuildAST: disassembledFunction => (
      ^ ((decompiler Decompiler clone) initWithFunction: disassembledFunction) buildAST
    );

    RewriteAST: ast => rewriter Rewrite: ast;
}
