{
    static with inherited _ = std Module;

    own ASTType = {
        own Default  = { static with inherited _ = std Enum };
        own Constant = { static with inherited _ = std Enum };
        own Register = { static with inherited _ = std Enum };

        own Compound = { static with inherited _ = std Enum };
        own Block    = { static with inherited _ = std Enum };

        own Builtin  = { static with inherited _ = std Enum };
        own Send     = { static with inherited _ = std Enum };
        own Resend   = { static with inherited _ = std Enum };

        own Return   = { static with inherited _ = std Enum };
    };

    own AST = {
        static with inherited _ = std Clonable;
        protected context = $;

        with inherited trait = {
            init => self;

            type => context ASTType Default;

            acceptVisitor: visitor => visitor visitAST: self;

            isAtomic => false;

            childrenDo: block => self;

            writeOn: w => 'AST()';
        };
    };

    own ASTRegister = {
        static with inherited _ = std Clonable;
        with inherited own AST = $ AST;

        depth, index;

        with inherited trait = {
            initWithDepth: _depth Index: _index => (
                $(AST) init.
                depth <- _depth.
                index <- _index.
              ^ self
            );

            type => context ASTType Register;

            acceptVisitor: visitor => visitor visitASTRegister: self;

            equalsRegister: other => [ index == other index ] and: [ depth == other depth ];

            isAtomic => true;

            writeOn: w => w << 'r' << depth << '_' << index;
        };
    };

    own ASTConstant = {
        static with inherited _ = std Clonable;
        with inherited own AST = $ AST;

        protected constant;

        with inherited trait = {
            initWithConstant: _constant => (
                $(AST) init.
                constant <- _constant;
              ^ self
            );

            type => context ASTType Constant;

            acceptVisitor: visitor => visitor visitASTConstant: self;

            isAtomic => true;

            writeOn: w => w << '(' << constant << ')';
        };
    };

    own ASTCode = {
        static with inherited _ = std Clonable;
        with inherited own AST = $ AST;

        protected code;

        with inherited trait = {
            initWithCode: _code => (
                $(AST) init.
                code <- _code.
              ^ self
            );

            acceptVisitor: visitor => visitor visitASTCode: self;

            isAtomic => true;

            childrenDo: block => ( block value(code). $(AST) childrenDo: block );

            writeOn: w => w << '[ ... | ' << code << ']';
        };
    };

    own ASTCompound = {
        static with inherited _ = std Clonable;
        with inherited own AST = $ AST;

        protected instructions;

        with inherited trait = {
            initWithInstructions: _instructions => (
                $(AST) init.
                instructions <- _instructions asArray.
              ^ self
            );

            acceptVisitor: visitor => visitor visitASTCompound: self;

            childrenDo: block => ( instructions do: [ :i | block value(i) ]. $(AST) childrenDo: block );

            writeOn: w => w << '(' << instructions << ')';
        };
    };

    own ASTAssignment = {
        static with inherited _ = std Clonable;
        with inherited own AST = $ AST;

        protected lhs;
        protected rhs;

        with inherited trait = {
            initWithLHS: _lhs RHS: _rhs => (
                $(AST) init.
                lhs <- _lhs.
                rhs <- _rhs.
              ^ self
            );

            acceptVisitor: visitor => visitor visitASTAssignment: self;

            childrenDo: block => ( block value(lhs). block value(rhs). $(AST) childrenDo: block );

            writeOn: w => w << '(' << lhs << ' <- ' << rhs << ')';
        };
    };

    own ASTSlotAssignment = {
        static with inherited _ = std Clonable;
        with inherited own AST = $ AST;

        protected slot;
        protected lhs;
        protected rhs;

        with inherited trait = {
            initWithLHS: _lhs RHS: _rhs Slot: _slot => (
                $(AST) init.
                lhs <- _lhs.
                rhs <- _rhs.
                slot <- _slot.
              ^ self
            );

            acceptVisitor: visitor => visitor visitASTSlotAssignment: self;

            childrenDo: block => ( block value(lhs). block value(rhs). $(AST) childrenDo: block );

            writeOn: w => w << '(' << lhs << ' ' << slot << ' <- ' << rhs << ')';
        };
    };

    own ASTBuiltin = {
        static with inherited _ = std Clonable;
        with inherited own AST = $ AST;

        protected message;
        protected args;
        protected varargs;

        with inherited trait = {
            initWithMessage: _message Args: _args Varargs: _varargs => (
                $(AST) init.
                message  <- _message.
                args     <- _args asArray.
                varargs  <- _varargs.
              ^ self
            );

            acceptVisitor: visitor => visitor visitASTBuiltin: self;

            childrenDo: block => ( args do: [ :a | block value(a) ]. $(AST) childrenDo: block );

            writeOn: w => (
                w << message.
                w << '('.
                0 to: (args size - 2) do: [ :i |
                    w << (args at: i).
                    w << ', '.
                ].
                w << (args last).
                varargs -> [ w << ', ...' ].
                w << ')'.
            );
        };
    };

    own ASTSend = {
        static with inherited _ = std Clonable;
        with inherited own AST = $ AST;

        protected message;
        protected args;
        protected varargs;

        with inherited trait = {
            initWithMessage: _message Args: _args Varargs: _varargs => (
                $(AST) init.
                message  <- _message.
                args     <- _args asArray.
                varargs  <- _varargs.
              ^ self
            );

            receiver => args at: 0;

            acceptVisitor: visitor => visitor visitASTSend: self;

            childrenDo: block => ( args do: [ :a | block value(a) ]. $(AST) childrenDo: block );

            writeOn: w => (
                w << (args first).
                w << ' ' << message.
                (args size > 1) -> [
                    w << '('.
                    1 to: (args size - 2) do: [ :i |
                        w << (args at: i).
                        w << ', '.
                    ].
                    w << (args last).
                    varargs -> [ w << ', ...' ].
                    w << ')'.
                ].
            );
        };
    };

    own ASTResend = {
        static with inherited _ = std Clonable;
        with inherited own AST = $ AST;

        protected message;
        protected args;
        protected varargs;

        with inherited trait = {
            initWithMessage: _message Args: _args Varargs: _varargs => (
                $(AST) init.
                message  <- _message.
                args     <- _args asArray.
                varargs  <- _varargs.
              ^ self
            );

            receiver => args at: 0;

            acceptVisitor: visitor => visitor visitASTResend: self;

            childrenDo: block => ( args do: [ :a | block value(a) ]. $(AST) childrenDo: block );

            writeOn: w => (
                w << '$(' << (args first).
                w << ') ' << message.
                (args size > 1) -> [
                    w << '('.
                    1 to: (args size - 2) do: [ :i |
                        w << (args at: i).
                        w << ', '.
                    ].
                    w << (args last).
                    varargs -> [ w << ', ...' ].
                    w << ')'.
                ].
            );
        };
    };

    own ASTReturn = {
        static with inherited _ = std Clonable;
        with inherited own AST = $ AST;

        protected returnValue;
        protected depth;

        with inherited trait = {
            initWithValue: _value Depth: _depth => (
                $(AST) init.
                returnValue <- _value.
                depth       <- _depth.
              ^ self
            );

            acceptVisitor: visitor => visitor visitASTReturn: self;

            childrenDo: block => ( block value(returnValue). $(AST) childrenDo: block );

            writeOn: w => w << '^ ' << returnValue;
        };
    };

    own ASTJumpBack = {
        static with inherited _ = std Clonable;
        with inherited own AST = $ AST;

        with inherited trait = {
            init => (
                $(AST) init.
              ^ self
            );

            acceptVisitor: visitor => visitor visitASTJumpBack: self;

            writeOn: w => w << 'ASTJumpBack()';
        };
    };
}
