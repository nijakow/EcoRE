{
    static with inherited _ = std Clonable;

    protected stack;

    with inherited trait = {
        initWithAST: ast => (
            stack <- std util newStack.
            stack push: ast.
          ^ self
        );

        up => ( stack pop. ^ self );
        protected enter: ast => ( stask push: ast. ^ self );

        current => stack top;

        arity => ( | i <- 0 | childrenDo: [ i <- i + 1 ]. ^ i );
        child: n => ( | i <- 0 | childrenDo: [ :c | (i == n) if: [ ^ c ]. i <- i + 1. ] );

        nth: n => enter: (child: n);

        left  => nth: 0;
        right => nth: (arity - 1);

        excursion: block => "TODO";

        childrenDo: block => current childrenDo: block;
        recursivelyDo: block => (
            block value(current).
            childrenDo: [ :c | c recursivelyDo: block ].
        );

        writeOn: w => w << 'an AST walker';
    }
}
