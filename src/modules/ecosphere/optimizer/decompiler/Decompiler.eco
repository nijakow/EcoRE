{
    static with inherited _ = std Clonable;
    protected decompiler = $;
    with inherited visitor = $ optimizer asm InstructionVisitor;

    protected function,
    protected context,
    protected stack,
    protected accu,
    protected cleared,
    protected compound;

    visitInstruction: instr => (std io out << 'Visiting ' << instr) newline;

    with inherited trait = {

        _initWithFunction: _function Context: _context => (
            function <- _function.
            context  <- _context.
            stack    <- std util newStack.
            cleared  <- false.
            compound <- std util newVector.
            accu     <- Register: 0.
          ^ self
        );

        initWithFunction: f Context: c => _initWithFunction: f Context: c;
        initWithFunction: f => _initWithFunction: f Context: (decompiler Context) new;

        protected optimizer => decompiler optimizer;
        protected ast => optimizer ast;
        protected builder => optimizer ast builder;

        protected UnknownInstruction => 42;

        protected GetAccu => accu;

        protected popN: amount => (
            "
                This is a very ugly implementation,
                which will (hopefully!) change in the future.
            "

            |
                s <- std util newStack,
                v <- std util newVector
            |
            1 to: amount do: [ s push: (stack pop) ].
            1 to: amount do: [ v add: (s pop) ].
          ^ v asArray
        );

        protected OnStack: expr => stack push: expr;
        protected OnAST: expr => (expr isAtomic not) if: [ compound add: expr ];
        protected Accu: expr => (
            cleared not -> [ OnAST: accu ].
            accu <- expr.
            cleared <- false.
        );

        protected Register: index Depth: depth => (
            builder ValueRef: (context lexical: depth ~ translateRegister: index)
        );
        protected Register: index => Register: index Depth: 0;

        visitNoop: instr => UnknownInstruction;
        visitConst: instr => Accu: (builder Constant: instr constant);
        visitPush: instr => ( OnStack: GetAccu. cleared <- true );
        visitPop: instr => Accu: stack pop;
        visitLoadLocal: instr => Accu: (Register: instr register);
        visitStoreLocal: instr => (
            OnAST: (builder Assign: GetAccu To: (Register: instr register)).
            cleared <- true.
        );
        visitLoadLexical: instr => Accu: (Register: instr register Depth: instr depth);
        visitStoreLexical: instr => (
            OnAST: (builder Assign: GetAccu To: (Register: instr register Depth: instr depth)).
            cleared <- true.
        );
        visitBuiltin: instr => ( Accu: (Register: 0). OnStack: (builder Builtin: instr key Args: (popN: (instr args)) Varargs: instr varargs) );
        visitSend: instr => OnStack: (builder Send: instr key Args: (popN: (instr args)) Varargs: instr varargs);
        visitResend: instr => OnStack: (builder Resend: instr key Args: (popN: (instr args)) Varargs: instr varargs);
        visitAssign: instr => ( | v <- stack pop | OnStack: (builder Assign: v To: stack pop Slot: instr key));
        visitReturn: instr => OnAST: (builder Return: stack pop Depth: instr depth);
        visitClosure: instr => Accu: (((decompiler Decompiler) clone) initWithFunction: instr code Context: (context wrap) ~ buildAST);

        buildAST => (
            |
                expr <- function instructions,
                args <- std util newVector
            |

            0 for: (function arguments) do: [ :i | args add: (context translateRegister: i) ].
            
            [ :break |
                expr accept: self;
                expr next yes: [ :v | expr <- v ] no: [ break value ].
            ] repeatWithBreak.
          ^ builder Block: ((compound size == 1) if: [ compound at: 0 ] else: [ builder Compound: compound ]) Args: (args asArray)
        );
    };
}
