
{
    static with inherited _ = std Module;
    protected module = $;

    protected with switch = $ switch;

    protected astTypes => module ast types;
    protected constraints => module constraints;
    
    ConstraintsFor: ast Context: context => (
        (Switch: ast type)
          ~ case: astTypes Constant do: [ ^ constraints Constant: ast Context: context                         ]
          ~ case: astTypes Block    do: [ ^ constraints Constant: ast Context: context                         ]
          ~ case: astTypes ValueRef do: [ ^ context constraintsFor: (ast ref)                                  ]
          ~ case: astTypes Scope    do: [ ^ ConstraintsFor: (ast body) Context: (ast context)                  ]  "TODO: Maybe wrap context?"
          ~ default: [ ^ constraints Unknown ]
        ~ end
    );

    ConstraintsFor: answer => ConstraintsFor: answer ast Context: answer context;



    IsConstant: ast => (
        (Switch: ast type)
          ~ case: astTypes Constant do: [ ^ true                   ]
          ~ case: astTypes Block    do: [ ^ true                   ]
          ~ case: astTypes Scope    do: [ ^ IsConstant: (ast body) ]
          ~ default: [ ^ false ]
        ~ end
    );
}
