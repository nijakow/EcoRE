{
    static with inherited _ = std Clonable;

    protected elimination = $;
    protected optimizer => elimination optimizer;
    protected astTypes => optimizer ast types;
    protected builder => optimizer ast builder;
    protected switch => optimizer switch;

    context;

    In: context => (elimination RegisterEliminator) clone init: context;

    
    processDefault: ast => ast;

    processConstant: ast => processDefault: ast;

    processRegister: ast => (
      ^ context lexical: (ast depth)
              ~ register: (ast index)
              ~ makeValueRefAST  "TODO"
    );

    processCompound: ast => (
      ^ builder Compound: (ast instructions map: [ :i | process: i ] ~ asArray)
    );

    processBlock: ast => (
      ^ builder Block: (process: ast code)
    );

    processScope: ast => (
      ^ (In: ast scope) process: (ast body)
    );

    processBuiltin: ast => (
      ^ builder Builtin: (ast name)
                   Args: (ast args map: [ :i | process: i ] ~ asArray)
                Varargs: (ast varargs)
    );

    processSend: ast => (
      ^ builder Send: (ast message)
                Args: (ast args map: [ :i | process: i ] ~ asArray)
             Varargs: (ast varargs)
    );

    processResend: ast => (
      ^ builder Resend: (ast message)
                  Args: (ast args map: [ :i | process: i ] ~ asArray)
               Varargs: (ast varargs)
    );

    processAssignment: ast => (
      ^ builder Assign: (process: ast rhs)
                    To: (process: ast lhs)
    );

    processSlotAssignment: ast => (
      ^ builder Assign: (process: ast rhs)
                    To: (process: ast lhs)
                  Slot: (ast slot)
    );

    processReturn: ast => (
      ^ builder Return: (process: ast returnValue)
                 Depth: (ast depth)
    );


    process: ast => (
        switch Switch: (ast type)
          ~ case: astTypes Constant   do: [ processConstant:   ast ]
          ~ case: astTypes Register   do: [ processRegister:   ast ]
          ~ case: astTypes Compound   do: [ processCompound:   ast ]
          ~ case: astTypes Block      do: [ processBlock:      ast ]
          ~ case: astTypes Scope      do: [ processScope:      ast ]
          ~ case: astTypes Builtin    do: [ processBuiltin:    ast ]
          ~ case: astTypes Send       do: [ processSend:       ast ]
          ~ case: astTypes Resend     do: [ processResend:     ast ]
          ~ case: astTypes Assignment do: [ processAssignment: ast ]
          ~ case: astTypes SlotAssignment do: [ processSlotAssignment: ast ]
          ~ case: astTypes Return     do: [ processReturn:     ast ]
        ~ default: [ processDefault: ast ]
    );


    init: _context => (
        context <- _context.
      ^ self
    );
}