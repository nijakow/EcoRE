
    {
        static with inherited _ = std Trait;

        LookupBlockMethod: name => (
            (name == #'value')  -> [ ^ Yes: (optimizer BuildAST: (optimizer Disassemble: #'value' In: (std reflect proxies Block))) ].
            (name == #'repeat') -> [ ^ Yes: (optimizer BuildAST: (optimizer Disassemble: #'repeat' In: (std reflect proxies Block))) ].
            (name == #'while:') -> [ ^ Yes: (optimizer BuildAST: (optimizer Disassemble: #'while:' In: (std reflect proxies Block))) ].
            (name == #'until:') -> [ ^ Yes: (optimizer BuildAST: (optimizer Disassemble: #'until:' In: (std reflect proxies Block))) ].

            (name == #'repeatWithExitValue') -> [ ^ Yes: (optimizer BuildAST: (optimizer Disassemble: #'repeatWithExitValue' In: (std reflect proxies Block))) ].
            (name == #'repeatWithBreak')     -> [ ^ Yes: (optimizer BuildAST: (optimizer Disassemble: #'repeatWithBreak' In: (std reflect proxies Block))) ].
            (name == #'repeatWithContinue')  -> [ ^ Yes: (optimizer BuildAST: (optimizer Disassemble: #'repeatWithContinue' In: (std reflect proxies Block))) ].
            (name == #'withRestart')         -> [ ^ Yes: (optimizer BuildAST: (optimizer Disassemble: #'withRestart' In: (std reflect proxies Block))) ].
          ^ No
        );

        LookupIntMethod: name => (
            (name == #'for:do:') -> [ ^ Yes: (optimizer BuildAST: (optimizer Disassemble: #'for:do:' In: (std reflect proxies Int ranged_loops))) ].
            (name == #'to:do:') -> [ ^ Yes: (optimizer BuildAST: (optimizer Disassemble: #'to:do:' In: (std reflect proxies Int ranged_loops))) ].
          ^ No
        );

        LookupMethod: name InAST: ast => (
            ((ast type) == (astTypes Block)) if: [ ^ LookupBlockMethod: name ].
            ((ast type) == (astTypes Constant)) if: [
                std reflect primitives IsInt: (ast constant)
                    ~ if: [ ^ LookupIntMethod: name ]
            ].
          ^ No
        );
    }
