
    {
        static with inherited _ = std Trait;

        allocMarker        => context core markerAllocator allocate;
        freeMarker: marker => self; "Not doing anything (yet?)"

        InlineAST: ast ArgDefs: argdefs Args: args Varargs: varargs NewContext: newContext => (
            ([args size > argdefs size] and: [varargs not]) if: [ (std io out << 'Note: Possible argument error while inlining!') newline commit ].
            (args size < argdefs size) if: [
                'Argument error when inlining!' throw
            ].

            newContext enableEntryAndExitLabels.

            |
                markers <- std util newVector,
                mapping <- std util newMap,
                cb      <- std util newVector
            |

            argdefs forEach: [ :i :arg |
                "TODO: If the corresponding argument is a constant (e.g. a block),
                       then don't generate a ValueRef, but replace the argument directly
                       by the literal.
                       This only works if there are no assignments to the variable."
                | param <- ((args at: i) ast) |
                (module IsConstant: param) if: [
                    mapping at: arg put: param
                ] else: [
                    |
                        v  <- allocMarker,
                        bv <- builder ValueRef: v
                    |
                    markers add: v.
                    mapping at: arg put: bv.
                    cb add: (builder Assign: ((args at: i) wrapIn: newContext) To: bv)
                ]
            ].

            |
                fixedArgCount <- argdefs size,
                varargCount <- args size - argdefs size,
                varargList  <- std util newVector
            |

            0 to: (varargCount - 1) do: [ :i |
                | param <- (args at: fixedArgCount + i) |
                (module IsConstant: param ast) if: [
                    varargList add: param
                ] else: [
                    |
                        v  <- allocMarker,
                        bv <- builder ValueRef: v
                    |
                    markers add: v.
                    varargList add: (Answer: bv).
                    cb add: (builder Assign: (param wrapIn: newContext) To: bv)
                ]
            ].

            newContext varargs: (varargList asArray).

            cb add: (transform ReplaceAll: mapping In: ast).
            cb add: (builder JumpLabel: (newContext exitLabel yes)).

            markers do: [ :marker | freeMarker: marker ].

          ^ ((In: newContext) transform: (builder Compound: cb asArray)) wrap
        );
        InlineAST: ast ArgDefs: argdefs Args: args Varargs: varargs =>
            InlineAST: ast ArgDefs: argdefs Args: args Varargs: varargs NewContext: context wrap;

        InlineLambda: lambda Args: args Varargs: varargs => (
            | ast <- lambda ast, newContext <- lambda context |
            "TODO: Maybe do argument checking?"
          ^ (InlineAST: ast code ArgDefs: ast args Args: args Varargs: varargs NewContext: (newContext wrapLexical))
        );

        InlineMethod: method Args: args Varargs: varargs => (
          "^ (InlineAST: method ArgDefs: ... Args: args Varargs: varargs)"
          ^ (InlineAST: method code ArgDefs: method args Args: args Varargs: varargs)
        );
    }