
{
    static with inherited _ = std Module;
    protected module = $;

    constraints => module constraints;

    own RegisterInfo = {
        static with inherited _ = std Clonable;
        protected context = $;

        constraints;

        with inherited trait = {
            init => (
                constraints <- context constraints Anything.
              ^ self
            );

            constraints: c => constraints <- c;

            writeOn: w => w << 'some register info';
        };
    };

    own Context = {
        static with inherited _ = std Clonable;
        protected context = $;

        surroundingContext,
        registers;

        with inherited trait = {
            initWithSurroundingContext: context => (
                surroundingContext <- Yes: context.
                registers          <- std util newMap.
              ^ self
            );

            init => (
                surroundingContext <- No.
                registers          <- std util newMap.
              ^ self
            );

            depth: d => (
                (d isZero)
                  ~   if: [ ^ self                                  ]
                    else: [ ^ surroundingContext yes depth: (d - 1) ]
            );

            register: index => (
                (registers at: index)
                  ~ yes: [ :r | ^ r ]
                     no: [
                          | ri <- (context RegisterInfo) new |
                          registers at: index put: ri.
                        ^ ri
                     ]
            );

            wrap => context WrapContext: self;

            writeOn: w => w << 'a context';
        };
    };

    WrapContext: context => (Context clone) initWithSurroundingContext: context;
    NewContext => (Context clone) init;
}
