
{
    static with inherited _ = std Module;

    own Context = {
        static with inherited _ = std Clonable;

        surroundingContext,
        registers;

        with inherited trait = {
            initWithSurroundingContext: context => (
                surroundingContext <- Yes: context.
                registers          <- std util newMap.
              ^ self
            );

            init => (
                surroundingContext <- No.
                registers          <- std util newMap.
              ^ self
            );

            depth: d => (
                (d isZero)
                  ~   if: [ ^ self                                  ]
                    else: [ ^ surroundingContext yes depth: (d - 1) ]
            );

            register: index => registers at: index;
        };

        WrapContext: context => (Context clone) initWithSurroundingContext: context;
    }
}
