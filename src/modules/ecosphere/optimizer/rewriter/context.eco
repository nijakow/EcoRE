
{
    static with inherited _ = std Module;
    protected module = $;

    ast => module ast;
    constraints => module constraints;

    own ContextCore = {
        static with inherited _ = std Clonable;
        protected context = $;

        valueRefAllocator;

        with inherited trait = {
            init => (
                valueRefAllocator <- (context ast ref ValueRefAllocator) new.
              ^ self
            );

            protected constraints => context constraints;

            constraintsFor: ref => constraints Unknown;

            writeOn: w => w << 'a context core';
        };
    };

    own Context = {
        static with inherited _ = std Clonable;
        protected context = $;

        core,
        surroundingContext,
        lexicalContext,
        varargs,
        entryLabel,
        exitLabel;

        with inherited trait = {

            _initWithSurroundingContext: surr Lexical: lex => (
                (surr or: lex) yes: [ :con | core <- con core                ]
                                no: [        core <- context ContextCore new ].
                surroundingContext <- surr.
                lexicalContext     <- lex.
                varargs            <- No.
                entryLabel         <- core valueRefAllocator allocate. "This is a hack."
                exitLabel          <- core valueRefAllocator allocate.  "Same here."
              ^ self
            );

            initWithSurroundingContext: context LexicalContext: lexical => (
              ^ _initWithSurroundingContext: (Yes: context) Lexical: (Yes: lexical)
            );

            initWithSurroundingContext: context => (
              ^ _initWithSurroundingContext: (Yes: context) Lexical: No
            );

            initWithLexicalContext: context => (
              ^ _initWithSurroundingContext: No Lexical: (Yes: lexical)
            );

            init => (
              ^ _initWithSurroundingContext: No Lexical: No
            );

            varargs: va => varargs <- Yes: va;

            lexicalVarargs => (
                varargs
                  ~ yes: [ :va | varargs                                                      ]
                     no: [       lexicalContext yes: [ :lc | lc lexicalVarargs ] no: [ No ]   ]
            );

            depth: d => (
                (d isZero)
                  ~   if: [ ^ self                                  ]
                    else: [ ^ surroundingContext yes depth: (d - 1) ]
            );

            lexical: d => (
                (d isZero)
                  ~   if: [ ^ self                                ]
                    else: [ ^ lexicalContext yes lexical: (d - 1) ]
            );

            depth => (
                surroundingContext yes: [ :lc | lc depth + 1 ]
                                    no: [       0            ]
            );

            lexicalDepth => (
                lexicalContext yes: [ :lc | lc lexicalDepth + 1 ]
                                no: [       0                   ]
            );

            wrap => context WrapContext: self;
            wrapLexical: other => context WrapContext: self Lexical: other;
            wrapLexical => wrapLexical: self;

            constraintsFor: ref => core constraintsFor: ref;

            writeOn: w => w << 'a context (' << depth << ', ' << lexicalDepth << ')';
        };
    };

    WrapContext: context => (Context clone) initWithSurroundingContext: context;
    WrapContext: context Lexical: lexical => (Context clone) initWithSurroundingContext: context LexicalContext: lexical;
    NewContext => (Context clone) init;
}
