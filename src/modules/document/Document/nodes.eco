{
    "
        Nodes Module
    "
    static with inherited _ = std Module;

    own SnipTrait = {
        static with inherited _ = std Trait;

        protected module = $;

        protected indexOutOfBoundsError => 'Index out of bounds.' throw;

        ifItemSnip: block => self;
        ifStringSnip: block => self;
        ifCompoundSnip: block => self;

        at: index => indexOutOfBoundsError;
        size => 0;
        splitAt: index => indexOutOfBoundsError;

        tryJoinWith: other => No;
    };

    own ItemSnip = {
        static with inherited _ = std Clonable;
        with inherited SnipTrait = $ SnipTrait;

        item;

        with inherited trait = {
            static with inherited _ = std Trait;

            initWithItem: _item => (
                item <- _item;
              ^ self
            );

            ifItemSnip: block => block value(self);

            at: index => (
                (index == 0) if: [ ^ item ].
                indexOutOfBoundsError
            );
            size => 1;
        };
    };

    own StringSnip = {
        static with inherited _ = std Clonable;
        with inherited SnipTrait = $ SnipTrait;

        content;

        with inherited trait = {
            static with inherited _ = std Trait;

            initWithContent: _content => (
                content <- _content;
              ^ self
            );

            ifStringSnip: block => block value(self);

            at: index => module CharacterItem: (content at: index);
            size => content size;

            splitAt: index => (
                (module StringSnip: (content substringTo: index))
              & (module StringSnip: (content substringFrom: index))
            );
        };
    };

    StringSnip: string => StringSnip clone initWithContent: string;


    own CompoundSnip = {
        static with inherited _ = std Clonable;
        with inherited SnipTrait = $ SnipTrait;

        snips;

        with inherited trait = {
            static with inherited _ = std Trait;

            initWithSnips: _snips => (
                snips <- _snips;
              ^ self
            );

            ifCompoundSnip: block => block value(self);

            at: index => (
                | i <- 0 |
                snips do: [ :snip |
                    | size <- snip size |
                    (index < (i + size)) if: [ ^ snip at: (index - i) ];
                    i <- (i + size)
                ].
                indexOutOfBoundsError
            );

            size => (
                | size <- 0 |
                snips do: [ :snip | size <- (size + snip size) ];
              ^ size
            );
        };
    };

    CompoundSnip: snips => CompoundSnip clone initWithSnips: snips;
    CompoundSnip(...) => CompoundSnip: (std util newArray(...));


    own ItemTrait = {
        static with inherited _ = std Trait;

        ifCharacter: block => self;
        ifReference: block => self;
    };

    own CharacterItem = {
        static with inherited _ = std Clonable;
        with inherited ItemTrait = $ ItemTrait;

        content;

        with inherited trait = {
            static with inherited _ = std Trait;

            initWithContent: _content => (
                content <- _content;
              ^ self
            );

            ifCharacter: block => block value(self);
        };
    };

    CharacterItem: character => CharacterItem clone initWithContent: character;


    own ReferenceItem = {
        static with inherited _ = std Clonable;
        with inherited ItemTrait = $ ItemTrait;

        content;

        with inherited trait = {
            static with inherited _ = std Trait;

            initWithContent: _content => (
                content <- _content;
              ^ self
            );

            ifReference: block => block value(self);
        };
    };

    ReferenceItem: reference => ReferenceItem clone initWithContent: reference;


    Text: text => StringItem clone initWithContent: text;
    Reference: reference => ReferenceItem clone initWithContent: reference;
}
