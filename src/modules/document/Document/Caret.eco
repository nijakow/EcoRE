{
    static with inherited _ = std Clonable;

    protected mod = $;

    document, offset;

    with inherited trait = {
        static with inherited _ = std Trait;

        initWithDocument: _document => (
            document <- _document.
            offset   <- 0.
          ^ self
        );

        protected root => document root;
        protected root: value => document root: value;

        currentItem => document root at: offset;

        moveTo: pos => (
            offset <- (pos min: root size) max: 0.
          ^ self
        );

        moveToX: x Y: y => (
            | off <- 0, ln <- 0, col <- 0 |

            (document documentStream)
                do: [ :item |
                    [ :exit |
                        item ifNewline: [ ln <- ln + 1. col <- 0. exit value. ].
                        col <- col + 1.
                    ] withBreak.
                    ([ln == y] and: [col == x]) if: [
                        (std io out << 'Moving to ' << x << ', ' << y << ' at ' << off) newline commit.
                      ^ self moveTo: off
                    ].
                    off <- off + 1.
                ].

          ^ self
        );

        forward: delta => moveTo: offset + delta;
        backward: delta => moveTo: offset - delta;

        forward => forward: 1;
        backward => backward: 1;


        insertSnip: snip => (
            root: (root insertSnip: snip at: offset).
            forward: snip size.
          ^ self
        );

        insertText: t => t do: [ :c | insertCharacter: c ];
        insertCharacter: c => insertSnip: (mod nodes ItemSnip: (mod nodes CharacterItem: c));
        insertReference: r => insertSnip: (mod nodes ItemSnip: (mod nodes ReferenceItem: r));

        backspace => (
            (offset > 0) if: [
                backward: 1.
                root: (root removeSnipAt: offset).
            ].
          ^ self
        );

        line => (
            | ln <- 0, c <- 0 |

            (document documentStream)
                do: [ :item |
                    (c >= offset) if: [ ^ ln ].
                    item ifNewline: [ ln <- ln + 1 ].
                    c <- c + 1.
                ].

            ^ ln
        );

        column => (
            | col <- 0, c <- 0 |

            (document documentStream)
                do: [ :item |
                    (c >= offset) if: [ ^ col ].
                    col <- col + 1.
                    item ifNewline: [ col <- 0 ].
                    c <- c + 1.
                ].
            
            ^ col
        );

        x => column;
        y => line;
    };
}
