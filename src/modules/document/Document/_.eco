{
    static with inherited _ = std Clonable;

    root;

    with inherited trait = {
        static with inherited _ = std Trait;

        init => (
            root <- mod nodes MakeCompoundSnip().
          ^ self
        );

        root: r => root <- r;

        clear => root: (mod nodes MakeCompoundSnip());

        protected mod = {
            "
                module title Module
            "
            static with inherited _ = std Module;
        
            own nodes = (here / 'nodes.eco') importIn: self;
            own Caret = (here / 'Caret.eco') importIn: self;
            own Line  = (here / 'Line.eco') importIn: self;
        };

        iterator => root iterator;
        documentStream => self iterator;

        newCaret => (mod Caret) new initWithDocument: self;

        lines => (
            |
                offset    <- 0,
                lastStart <- 0,
                lines     <- std util newVector
            |

            iterator do: [ :item |
                [ :break |
                    item ifNewline: [
                        lines add: ((mod Line) new initWithDocument: self Start: lastStart End: (offset max: lastStart)).
                        lastStart <- offset + 1.
                        break value.
                    ].
                ] withBreak.
                offset <- offset + 1.
            ].

            lines add: ((mod Line) new initWithDocument: self Start: lastStart End: (offset max: lastStart)).
        );
    };

    writeOn: w => w << 'a document';
}
