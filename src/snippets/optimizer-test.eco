{
    static with inherited _ = std Module;

    optimizer <- (std os files here / '..' / 'modules' / 'ecosphere' / 'optimizer' / '_.eco') import Init;

    f(x) => [ x * x ] value;
    g(x) => 42;
    h(x) => [ (std io out << 'Hi!') newline commit ] repeat;
    i(x) => [ [ [ a ] repeat. [ b ] repeat ] repeat ] value;
    j(x) => [ foo ] value;
    k(x) => [ condition ] while: [ body ];
    mega(x) => (
        [
            | i <- 0 |
            [ i < 42 ] while: [
                (std io out << i) newline commit.
            ]
        ] repeat
    );
    giga => [ [ [a] while: [b] ] repeat ] value;
    iter => (
        [
            | i <- 0 |
            [ i < 10 ] while: [
                (std io out << i) newline commit.
                i <- i + 1.
            ]
        ] repeat.
    );
    regs(x) => (
        |
            v <- 0,
            i <- 21,
            j <- i * 2,
            k <- i + i
        |
      ^ [ j * k + x ] value
    );

    Main => (
        |
            answer <- optimizer RewriteAST: (optimizer BuildAST: (optimizer Disassemble: #'f' In: self))
        |
        ((optimizer ast Printer) clone initWithWriter: std io out) print: answer.
        (std io out) newline commit.
    );
} Main.
