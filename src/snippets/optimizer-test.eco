{
    static with inherited _ = std Module;

    optimizer <- (std os files here / '..' / 'modules' / 'ecosphere' / 'optimizer' / '_.eco') import Init;

    f(x) => [ x * x ] value;
    g(x) => 42;
    h(x) => [ (std io out << 'Hi!') newline commit ] repeat;
    i(x) => [ [ [ a ] repeat. [ b ] repeat ] repeat ] value;
    j(x) => [ foo ] value;
    k(x) => [ condition ] while: [ body ];
    mega(x) => (
        [
            | i <- 0 |
            [ i < 42 ] while: [
                (std io out << i) newline commit.
            ]
        ] repeat
    );
    giga => [ [ [a] while: [b] ] repeat ] value;
    iter => (
        [
            | i <- 0 |
            [ i < 10 ] while: [
                (std io out << i) newline commit.
                i <- i + 1.
            ]
        ] repeat.
    );
    regs(x) => (
        |
            v <- 0,
            i <- 21,
            j <- i * 2,
            k <- i + i
        |
      ^ [ :xx | j * k + x + xx ] value(42)
    );
    va => [ :i, ... | foo(i, ...) ] value(222, 333);  "This is still producing weird results... the varargs should be inlined!"
    vax => [ ... | foo(...) ] value(222, 333);
    vbx => [ :i, :j, ... | foo(i, j, ...) ] value(222, 333, 443 + 1, 555, 665 + 1);
    vcx => [ :i, :j, ... | [ :k, :l, ... | foo(l, k, ...) ] value(j, i, ...) ] value(111, 222 + 1, 333, 444 + 1);

    until => [ true ] until: [ (std io out << 'Hi!') newline commit ];


    TestMethod: m => (
        (std io out << 'Now processing method: ' << m) newline commit.
        |
            disassembled <- optimizer Disassemble: m In: self
        |
        (std io out << 'Disassembled: ' << disassembled) newline commit.
        |
            ast          <- optimizer BuildAST: disassembled
        |
        (std io out << 'AST: ' << ast) newline commit.
        |
            answer       <- optimizer RewriteAST: ast
        |
        ((optimizer ast Printer) clone initWithWriter: std io out) print: answer ast.
        (std io out) newline commit.
    );

    Main => (
        #( #'f', #'g', #'h', #'i', #'j', #'k', #'mega', #'giga', #'iter', #'regs', #'va', #'vax', #'vbx', #'vcx', #'until' )
            do: [ :m | TestMethod: m ].
    );
} Main.
