
{
    static with inherited _ = std Module;

    ListFiles: path => #'ecosphere.ecore.io.list_files'(path);

    own SharedPathTrait = {
        exists => #'ecosphere.ecore.io.file_exists'(path);
        isDirectory => #'ecosphere.ecore.io.file_is_directory'(path);
        children => (((module ListFiles: path) iterator map: [ :file | child: file ]) into: (std util newVector)) asArray;
        / name => child: name;
        writeOn: w => w << 'a path(' << path << ')';
    };

    own root = {
        static with inherited _ = std Singleton;
        with inherited sharedTrait = $ SharedPathTrait;
        private module = $;

        parent => No;
        name => '/';
        path => '/';
        child: name => (module Path) clone initWithName: name Path: '/' + name Parent: self;
    };

    own Path = {
        static with inherited _ = std Clonable;
        with inherited sharedTrait = $ SharedPathTrait;
        private module = $;

        parent,
        name,
        path;

        with inherited trait = {
            initWithName: _name Path: _path Parent: _parent => (
                parent <- Yes: _parent.
                name   <- _name.
                path   <- _path.
              ^ self
            );

            init => (
                "Initializes a pointer to root"
                parent <- No.
                name   <- '/'.
                path   <- '/'.
              ^ self
            );

            child: name => (
                (name == '.') -> [ ^ self ].
                (name == '..') -> [ ^ parent ].
              ^ (module Path) clone initWithName: name
                                            Path: path + '/' + name
                                          Parent: self.
            );

            openForReading => io OpenFileForReading: path;
        };
    },
}
