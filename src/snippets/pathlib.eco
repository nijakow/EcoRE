
{
    static with inherited _ = std Module;

    ListFiles: path => #'ecosphere.ecore.io.list_files'(path);

    own Path = {
        static with inherited _ = std Clonable;
        private module = $;

        private parent,
        private name,
        path;

        with inherited trait = {
            initWithName: _name Path: _path Parent: _parent => (
                parent <- Yes: _parent.
                name   <- _name.
                path   <- _path.
              ^ self
            );

            init => (
                "Initializes a pointer to root"
                parent <- No.
                name   <- '/'.
                path   <- '/'.
              ^ self
            );

            up => parent;
            exists => #'ecosphere.ecore.io.file_exists'(path);
            isDirectory => #'ecosphere.ecore.io.file_is_directory'(path);

            children => (
                | v <- std util newVector |
                ((module ListFiles: path) iterator map: [ :name | ((module Path) clone) initWithName: name Path: (parent yes: [ :p | path + '/' + name ] no: [ '/' + name ]) Parent: self ]) into: v.
              ^ v asArray
            );

            writeOn: w => w << 'a path(' << path << ')';
        };
    },
}
