
"FDBlockReader"
{
    private fd;

    with inherited trait = {
        initWithFileDescriptor: _fd => (
            fd <- _fd.
          ^ self
        );

        nextBlock: size => fd read: size;
        nextBlock => nextBlock: 4096;
    };

    with inherited parent = #<:std/Clonable>;
}

"BlockReaderCache"
{
    private reader,
    private cachedValue;

    with inherited trait = {
        initWithBlockReader: _reader => (
            reader      <- _reader.
            cachedValue <- No.
          ^ self
        );

        private refresh => (
            |
                block <- reader nextBlock,
                cache <- (BlockReaderCache clone) initWithBlockReader: reader,
                node  <- StreamNode clone initWithVector: block Next: cache
            |
            cachedValue <- Yes: node.
          ^ node
        );

        value => cachedValue
                    yes: [ :v | v ]
                     no: [ refresh ];
    };

    with inherited parent = #<:std/Clonable>;
}

"StreamNode"
{
    private vector,
    private bytes,
    private nextPtr,
    private loader;

    with inherited trait = {
        initWithVector: _vector Next: _next => (
            vector   <- _vector.
            fill     <- _fill.
            nextPtr  <- No.
          ^ self
        );

        at: index => vector at: index;
        size => vector size;

        next => next value;
    };

    with inherited parent = #<std/Clonable>;
}

"StreamNodeIteratorPosition"
{
    private node,
    private index;

    with inherited trait = {
        initWithNode: _node Index: _index => (
            node  <- _node.
            index <- _index.
          ^ self
        );
        initWithNode: node => initWithNode: node Index: 0;

        copy => clone;

        private ensureValidIndex => (
            (index < node size) -> [ node <- node next. index <- 0 ].
        );

        has => (
            ensureValidIndex.
          ^ index < node size
        );

        get => (
            ensureValidIndex.
          ^ node at: index
        );

        forward => (
            (index < node size)
                  if: [ index <- index + 1 ]
                else: [ node <- node next. index <- 0 ].
          ^ self
        );
    };

    with inherited parent = #<:std/Clonable>;
}

"StreamNodeIterator"
{
    private pos;

    with inherited trait = {

        forward => pos forward;

        has => pos has;

        current => pos get;

        withReset: block => (
            | old_pos <- pos copy |
          ^ block value([ pos <- old_pos ])
        );
    };

    with inherited iteratorTrait = #<:std/util/iterators/IteratorTrait>;
    with inherited parent = #<:std/Clonable>;
}
