{
    static with inherited parent = std Clonable;

    private bytecodes,
    private it,
    private constants,
    private closures;

    with inherited trait = {
        initWithBytecodes: _bytecodes Constants: _constants Closures: _closures => (
            bytecodes <- _bytecodes.
            constants <- _constants.
            closures  <- _closures.
            it        <- _bytecodes iterator.
          ^ self
        );
        initWithCode: _code => initWithBytecodes: (_code bytecodes) Constants: (_code constants) Closures: (_code closures);

        protected nextU8 => (it next) bitAnd: 255;
        protected nextU16 => (
            | v <- nextU8 |
            v <- v bitOr: (nextU8 rshift: 8).
          ^ v
        );

        protected nextConstant => constants at: nextU16;

        disassembleTo: w => (
            [ it hasNext ] while: [
                | opcode <- nextU8 |
                (opcode == lang eco bytecodes NOOP)  -> [ (w << 'NOOP') newline ].
                (opcode == lang eco bytecodes CONST) -> [ (w << 'CONST ' << nextU16) newline ].
                (opcode == lang eco bytecodes PUSHC) -> [ (w << 'PUSHC ' << nextU16) newline ].
                (opcode == lang eco bytecodes PUSH)  -> [ (w << 'PUSH ' << nextU8) newline ].
                (opcode == lang eco bytecodes POP)   -> [ (w << 'POP') newline ].
                (opcode == lang eco bytecodes DROP)  -> [ (w << 'DROP') newline ].
                (opcode == lang eco bytecodes DUP)   -> [ (w << 'DUP') newline ].
                (opcode == lang eco bytecodes R2R)   -> [ (w << 'R2R ' << nextU8 << ' ' << nextU8) newline ].
                (opcode == lang eco bytecodes R2L)   -> [ (w << 'R2L ' << nextU8 << ' ' << nextU8 << ' ' << nextU8) newline ].
                (opcode == lang eco bytecodes BUILTIN) -> [ (w << 'BUILTIN ' << nextU8 << ' ' << nextConstant) newline ].
                (opcode == lang eco bytecodes BUILTINV) -> [ (w << 'BUILTINV ' << nextU8 << ' ' << nextConstant) newline ].
                (opcode == lang eco bytecodes SEND) -> [ (w << 'SEND ' << nextU8 << ' ' << nextConstant) newline ].
                (opcode == lang eco bytecodes SENDV) -> [ (w << 'SENDV ' << nextU8 << ' ' << nextConstant) newline ].
                (opcode == lang eco bytecodes ASSIGN) -> [ (w << 'SENDV ' << nextConstant) newline ].
                (opcode == lang eco bytecodes AS) -> [ (w << 'AS') newline ].
                (opcode == lang eco bytecodes RETURN) -> [ (w << 'RETURN ' << nextU8) newline ].
                (opcode == lang eco bytecodes CLOSURE) -> [ (w << 'CLOSURE ' << nextU8 << ' ' << nextU16) newline ].
            ].
          ^ self
        );

        writeOn: w => w << 'a disassembler';
    };
}
