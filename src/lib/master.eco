"
    master.eco - The Master Object
"

#=lobby: {
    meta = {
        name    => 'Ecosphere Standard Library',
        version => '0.1',
        author  => 'nijakow'
    };

    with packages = {
        with std = #<:std>;
        with interfaces = #<:interfaces>;
        lang = #<:lang>;
    };

    writeOn: writer => writer << 'lobby';
},

#=bootstrapper: {

    InitTypes => (
        #'ecosphere.ecore.init.set_lobby'(#<:lobby>).
        #'ecosphere.ecore.init.set_true'(#<:std/bool/true>).
        #'ecosphere.ecore.init.set_false'(#<:std/bool/false>).
        any <- #'ecosphere.ecore.constant.any'().
        #'ecosphere.ecore.init.set_proxy'(#'ecosphere.ecore.constant.integer_type'(), #<:init/integer_proxy>).
        #'ecosphere.ecore.init.set_proxy'(#'ecosphere.ecore.constant.character_type'(), #<:init/character_proxy>).
        #'ecosphere.ecore.init.set_proxy'(#'ecosphere.ecore.constant.block_type'(), #<:std/reflect/proxies/Block>).
        #'ecosphere.ecore.init.set_proxy'(#'ecosphere.ecore.constant.key_type'(), #<:init/key_proxy>).
        #'ecosphere.ecore.init.set_proxy'(#'ecosphere.ecore.constant.array_type'(), #<:init/array_proxy>).
        #'ecosphere.ecore.init.set_proxy'(#'ecosphere.ecore.constant.blob_type'(), #<:init/blob_proxy>).
        #'ecosphere.ecore.init.set_proxy'(#'ecosphere.ecore.constant.code_type'(), #<:init/code_proxy>).
        #'ecosphere.ecore.init.set_proxy'(#'ecosphere.ecore.constant.string_type'(), #<:init/string_proxy>).
        #'ecosphere.ecore.init.set_proxy'(#'ecosphere.ecore.constant.port_type'(), #<:init/port_proxy>).
        #'ecosphere.ecore.init.set_proxy'(#'ecosphere.ecore.constant.interface_type'(), #<:init/interface_proxy>).
        #'ecosphere.ecore.init.set_proxy'(#'ecosphere.ecore.constant.ffitype_type'(), #<:init/ffitype_proxy>).
        #'ecosphere.ecore.init.set_proxy'(#'ecosphere.ecore.constant.ffifunc_type'(), #<:init/ffifunc_proxy>).
    );

    InitIO => termio <- std io OpenFileDescriptor: 0;

    Init => (
        InitTypes.
        InitIO.

        termio out << 'EcoRE image online and ready.'.
        termio out newline.
        termio out commit.

        |
            reader <- (termio in) lens: (lang eco tokenizer PortReader),
            tok    <- reader lens: (lang eco tokenizer Tokenizer),
            parser <- tok lens: (lang eco parser Parser)
        |

        parser exprDo: [ :expr |
            |
                env  <- {
                    addVar: name => #'ecosphere.ecore.reflect.add_value_slot'(self, -1, 0, any, name, false);
                    writeOn: writer => writer << '<session>';
                    with inherited parent = #<:std/Clonable>;
                },
                result
            |

            [
                | code <- expr compileInEnv: lobby |
                result <- (code execute(env)).
                termio out << '        ' << result.
                termio out newline
            ] catch: [
                termio out << '--== Error Caught ==--'.
                termio out newline.
            ].
            termio out commit.
        ]
    );

    with lobby = #<:lobby>;
},

#<:bootstrapper> Init.
