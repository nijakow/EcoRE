

#=lang/compiler/ValueType: {
    Register = {
        number, depth;

        initWithNumber: n Depth: d => (
            number <- n.
            depth <- d.
          ^ self
        );

        initWithNumber: n => initWithNumber: n Depth: 0;

        isRegister => true;
        isConstant => false;
        isStack => false;
        isClosure => false;
        ifRegister: r ifConstant: c ifClosure: cl ifStack: s => r value;

        with inherited parent = #<:std/Clonable>;
    },
    Stack = {
        isRegister => false;
        isConstant => false;
        isStack => true;
        isClosure => false;
        ifRegister: r ifConstant: c ifClosure: cl ifStack: s => s value;
        with inherited parent = #<:std/Clonable>;
    },
    Constant = {
        constantValue;

        initWithValue: v => (
            constantValue <- v.
          ^ self
        );

        isRegister => false;
        isConstant => true;
        isStack => false;
        isClosure => false;
        ifRegister: r ifConstant: c ifClosure: cl ifStack: s => c value;
        with inherited parent = #<:std/Clonable>;
    },
    Closure = {
        closureValue;

        initWithValue: v => (
            closureValue <- v.
          ^ self
        );

        isRegister => false;
        isConstant => false;
        isStack => false;
        isClosure => true;
        ifRegister: r ifConstant: c ifClosure: cl ifStack: s => cl value;
        with inherited parent = #<:std/Clonable>;
    }
}
