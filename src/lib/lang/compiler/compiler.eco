
#=lang/compiler/Scope: {
    parent_scope, bindings;

    init => initWithParent: self;

    initWithParent: p LexicalParent: l => (
        parent_scope <- p.
        bindings <- std util newMap.
      ^ self
    );

    createNormalSubscope => (#<:lang/compiler/NormalScope> clone) initWithParent: self;
    createBlockSubscope => (#<:lang/compiler/BlockScope> clone) initWithParent: self;

    getParentScope => parent_scope;

    with inherited parent = #<:std/Clonable>;
},

#=lang/compiler/NormalScope: {
    with inherited own parent = #<:lang/compiler/Scope>;
},

#=lang/compiler/BlockScope: {
    with inherited own parent = #<:lang/compiler/Scope>;
},

#=lang/compiler/Compiler: {
    writer, scopes;

    initWithWriter: w => (
        writer <- w.
        scopes <- (#<:lang/compiler/BlockScope> new).
      ^ self
    );

    pushNormalScope => scopes <- scopes createNormalSubscope;
    pushBlockScope => scopes <- scopes createBlockSubscope;
    popScope => scopes <- scopes getParentScope;

    addParameter: p => "TODO";
    bindVariable: varname => "TODO";
    enableVarargs => "TODO";

    loadSelf => "TODO";
    loadConstant: c => "TODO";
    loadRegister: r => "TODO";
    loadVariable: name IfNotPresent: block => "TODO";
    storeVariable: name IfNotPresent: block => "TODO";
    storeVariable: name => storeVariable: name IfNotPresent: [];

    push => "TODO";
    pop => "TODO";
    drop => "TODO";

    builtinWithMessage: msg ArgCount: args Varargs: varargs => "TODO";
    sendWithMessage: msg ArgCount: args => "TODO";

    returnWithDepth: depth => "TODO";
    fullReturn => "TODO";

    with inherited parent = #<:std/Clonable>;
},


#=lang/compiler: {
    Bytecodes = #<:lang/compiler/Bytecodes>;
    CodeWriter = #<:lang/compiler/CodeWriter>;
    Visitor = #<:lang/compiler/Visitor>;
    Compiler = #<:lang/compiler/Compiler>;
}
