
#=lang/compiler/Scope: {
    shared, parent_scope, bindings;

    initWithShared: s => (
        shared <- s.
      ^ initWithParent: self
    );

    initWithParent: p => (
        shared <- p shared.
        parent_scope <- p.
        bindings <- std util newMap.
      ^ self
    );

    createSubscope => (#<:lang/compiler/NormalScope> clone) initWithParent: self Lexical: getLexicalScope;

    getParentScope => parent_scope;

    bindVariable: varname WithInfo: info => bindings at: varname put: info;

    with inherited parent = #<:std/Clonable>;
},


#=lang/compiler/Compiler: {
    writer;

    initWithWriter: w => (
        writer <- w.
      ^ self
    );

    loadSelf => "TODO";
    loadConstant: c => "TODO";
    loadRegister: r => "TODO";
    loadVariable: name IfNotPresent: block => "TODO";
    storeVariable: name IfNotPresent: block => "TODO";
    storeVariable: name => storeVariable: name IfNotPresent: [];

    push => "TODO";
    pop => "TODO";
    drop => "TODO";

    builtinWithMessage: msg ArgCount: args Varargs: varargs => "TODO";
    sendWithMessage: msg ArgCount: args => "TODO";

    returnWithDepth: depth => "TODO";
    fullReturn => "TODO";

    with inherited parent = #<:std/Clonable>;
},

#=lang/compiler/ScopeSharedInfo: {
    lexical_parent_scope;

    init => (
        lexical_parent_scope <- self.
      ^ self
    );

    initWithLexicalParentScope: l => (
        lexical_parent_scope <- l.
      ^ self
    );

    with inherited parent = #<:std/Clonable>;
},

#=lang/compiler/ScopedCompiler: {
    scopes;

    init => (
        scopes <- newScope;
      ^ self
    );

    newBlockContextWithParent: p => (#<:lang/compiler/ScopeSharedInfo> clone) initWithLexicalParentScope: l;
    newBlockContext => (#<:lang/compiler/ScopeSharedInfo> clone) init;
    newScopeFromBlockContext: bc => (#<:lang/compiler/BlockScope> clone) initWithShared: bc;
    newScope => newScopeFromBlockContext: newBlockContext;

    pushNormalScope => scopes <- scopes createSubscope;
    pushBlockScope => scopes <- newBlockContextWithParent: scopes;
    popScope => scopes <- scopes getParentScope;
},


#=lang/compiler: {
    Bytecodes = #<:lang/compiler/Bytecodes>;
    CodeWriter = #<:lang/compiler/CodeWriter>;
    Visitor = #<:lang/compiler/Visitor>;
    Compiler = #<:lang/compiler/Compiler>;
}
