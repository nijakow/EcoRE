
#=lang/compiler/Visitor: {
    compiler;

    EvaluateAST(ast) => "TODO";

    visitUnknown: ast => "TODO: Error";
    
    visitSelf: ast => compiler loadSelf;
    
    visitConstant: ast => compiler loadConstant: EvaluateAST(ast);

    visitArray: ast => visitConstant: ast;

    visitInterface: ast => visitConstant: ast;

    visitMolecule: ast => visitConstant: ast;

    visitCompound: ast => ast getExprs do: [ :e | e acceptVisitor: self ];

    visitBlock: ast => "TODO";

    visitBuiltin: ast => (
        | args <- ast getArgs |
        args do: [ :arg | arg acceptVisitor: self. compiler push ].
        compiler builtinWithMessage: ast getName ArgCount: args size Varargs: ast getVarargs
    );

    visitCall: ast => (
        | args <- ast getArgs |
        getSubject acceptVisitor: self.
        compiler push.
        args do: [ :arg | arg acceptVisitor: self. compiler push ].
        compiler sendWithMessage: #'value' ArgCount: args size Varargs: ast getVarargs
    );

    visitSend: ast => (
        | args <- ast getArgs |
        getSubject acceptVisitor: self.
        compiler push.
        args do: [ :arg | arg acceptVisitor: self. compiler push ].
        compiler sendWithMessage: ast getMessage ArgCount: args size Varargs: ast getVarargs
    );

    visitReturn: ast => compiler fullReturn;

    visitVariableDeclaration: ast => "TODO";

    visitAssignment: ast => "TODO";

    visitAs: ast => "TODO";

    "TODO: Implements interface lang/ast/IVisitor"
    with inherited parent = #<:std/Clonable>;
} 
