
#=lang/compiler/AssignmentVisitor: {
    compiler, rhs, visitor;

    initWithCompiler: _compiler RHS: _rhs Visitor: v => (
       compiler <- _compiler.
       rhs      <- _rhs.
       visitor  <- v.
      ^ self
    );

    visitUnknown: ast => ( io out << 'Visiting unknown AST for assignment'. io out newline. io out commit );

    visitSend: ast => (
        rhs acceptVisitor: visitor.
        (ast subject isSelfAST) if: [
            (compiler isLocal: ast message) if: [
                compiler storeVariable: ast message
                             IfPresent: [ ^ ]
                          IfNotPresent: [
                              io out << 'Local bound and not bound at the same time!'.
                              io out newline.
                              io out commit.
                            ^
                          ]
            ]
        ].
        ast subject acceptVisitor: visitor.
        compiler push.
        rhs acceptVisitor: visitor.
        compiler push.
        compiler assignWithKey: ast message
    );

    with inherited parent = #<:std/Clonable>;
},


#=lang/compiler/Visitor: {
    compiler;

    initWithCompiler: _compiler => (
       compiler <- _compiler.
      ^ self
    );

    visitUnknown: ast => ( io out << 'Visiting unknown AST'. io out newline. io out commit );
    
    visitSelf: ast => compiler loadSelf;
    
    visitConstant: ast => compiler loadConstant: ast constantValue;

    visitArray: ast => visitConstant: ast;

    visitInterface: ast => visitConstant: ast;

    visitMolecule: ast => visitConstant: ast;

    visitCompound: ast => (
        compiler pushNormalScope.
        ast getExprs do: [ :e | e acceptVisitor: self ].
        compiler popScope
    );

    visitBlock: ast => (
        compiler pushBlockScope.
        ast getArgs do: [ :arg | compiler addParameter: (arg getName) ].
        ast hasVarargs if: [ compiler enableVarargs ].
        ast getBody acceptVisitor: self.
        compiler popBlockScope
    );

    visitBuiltin: ast => (
        | args <- ast getArgs |
        args do: [ :arg | arg acceptVisitor: self. compiler push ].
        compiler builtinWithMessage: ast getName ArgCount: args size Varargs: ast getVarargs
    );

    visitCall: ast => (
        | args <- ast getArgs |
        ast subject acceptVisitor: self.
        compiler push.
        args do: [ :arg | arg acceptVisitor: self. compiler push ].
        compiler sendWithMessage: #'value' ArgCount: args size + 1 Varargs: ast getVarargs
    );

    visitSend: ast => (
        | args <- ast getArgs |

        (ast subject isSelfAST) if: [
            compiler loadVariable: ast message IfPresent: [ ^ ] IfNotPresent: []
        ].
        ast subject acceptVisitor: self.
        compiler push.
        args do: [ :arg | arg acceptVisitor: self. compiler push ].
        compiler sendWithMessage: ast message ArgCount: args size + 1 Varargs: ast getVarargs
    );

    visitReturn: ast => (
        ast returnValue acceptVisitor: self.
        compiler fullReturn
    );

    visitVariableDeclaration: ast => (
        compiler bindVariable: ast getName.
        ast getValue acceptVisitor: self.
        compiler storeVariable: ast getName.
        ast getFollowup acceptVisitor: self
    );

    visitAssignment: ast => (
        "TODO: Create a special visitor for this!"
        | v <- (#<:lang/compiler/AssignmentVisitor> clone) initWithCompiler: compiler RHS: ast rhs Visitor: self |
        ast lhs acceptVisitor: v
    );

    visitAs: ast => (
        "TODO"
        lhs acceptVisitor: self
    );

    "TODO: Implements interface lang/ast/IVisitor"
    with inherited parent = #<:std/Clonable>;
} 
