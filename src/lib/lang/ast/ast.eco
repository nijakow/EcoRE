
#=lang/ast: {
    with construction = #<:lang/ast/ASTConstruction>;

    AST_SharedBehavior = #=lang/ast/AST_SharedBehavior: {
        writeOn: writer => writer << 'AST';
    };

    ASTFlags = {
        is_with, is_inherited, is_own, is_method;

        init => (
            is_with      <- false.
            is_inherited <- false.
            is_own       <- false.
            is_method    <- false.
          ^ self
        );

        isWith      => is_with;
        isInherited => is_inherited;
        isOwn       => is_own;
        isMethod    => is_method;

        setWith      => ( is_with <- true. self ).
        setInherited => ( is_inherited <- true. self ).
        setOwn       => ( is_own <- true. self ).
        setMethod    => ( is_method <- true. self ).

        writeOn: writer => (
            isWith      if: [ writer << 'with '      ].
            isInherited if: [ writer << 'inherited ' ].
            isOwn       if: [ writer << 'own '       ].
            isMethod    if: [ writer << '<method>'   ]. "isMethod is usually not printed"
        );

        with inherited parent = #<:std/Clonable>;
    };

    ASTSelf = {
        new => self;
        writeOn: writer => writer << 'self';
        with inherited ast_shared = #<:lang/ast/AST_SharedBehavior>;
        with inherited parent = #<:std/Clonable>;
    };

    ASTConstant = {
        constant;

        initWithValue: value => (
            constant <- value.
          ^ self
        );
        writeOn: writer => writer << 'ASTConstant(' << constant << ')';
        with inherited ast_shared = #<:lang/ast/AST_SharedBehavior>;
        with inherited parent = #<:std/Clonable>;
    };

    ASTArray = {
        exprs;

        initWithExprs: _exprs => (
            exprs <- _exprs.
          ^ self
        );
        writeOn: writer => writer << 'ASTArray(' << exprs << ')';
        with inherited ast_shared = #<:lang/ast/AST_SharedBehavior>;
        with inherited parent = #<:std/Clonable>;
    };

    ASTInterface = {
        parents, entries;

        initWithParents: _parents Entries: _entries => (
            parents <- _parents.
            entries <- _entries.
          ^ self
        );

        writeOn: writer => writer << 'ASTInterface(' << parents << ', ' << entries << ')';
        with inherited ast_shared = #<:lang/ast/AST_SharedBehavior>;
        with inherited parent = #<:std/Clonable>;
    };

    ASTMolecule = {
        slots;

        initWithSlots: _slots => (
            slots <- _slots.
          ^ self
        );

        writeOn: writer => writer << 'ASTMolecule(' << slots << ')';
        with inherited ast_shared = #<:lang/ast/AST_SharedBehavior>;
        with inherited parent = #<:std/Clonable>;
    };

    ASTBuiltin = {
        name, args, varargs;

        initWithName: _name Args: _args Varargs: _varargs => (
            name    <- _name.
            args    <- _args.
            varargs <- _varargs.
          ^ self
        );
        writeOn: writer => writer << 'ASTBuiltin(' << name << ', ' << args << ', ' << varargs << ')';
        with inherited ast_shared = #<:lang/ast/AST_SharedBehavior>;
        with inherited parent = #<:std/Clonable>;
    };

    ASTCall = {
        subject, args, varargs;

        initWithSubject: _subject Args: _args Varargs: _varargs => (
            subject <- _subject.
            args    <- _args.
            varargs <- _varargs.
          ^ self
        );
        writeOn: writer => writer << 'ASTCall(' << subject << ', ' << args << ', ' << varargs << ')';
        with inherited ast_shared = #<:lang/ast/AST_SharedBehavior>;
        with inherited parent = #<:std/Clonable>;
    };

    ASTSend = {
        subject, message, args, varargs;

        initWithSubject: _subject Message: _message Args: _args Varargs: _varargs => (
            subject <- _subject.
            message <- _message.
            args    <- _args.
            varargs <- _varargs.
          ^ self
        );
        writeOn: writer => writer << 'ASTSend(' << subject << ', ' << message << ', ' << args << ', ' << varargs << ')';
        with inherited ast_shared = #<:lang/ast/AST_SharedBehavior>;
        with inherited parent = #<:std/Clonable>;
    };

    ASTAssignment = {
        lhs, rhs;

        initWithLHS: _lhs RHS: _rhs => (
            lhs <- _lhs.
            rhs <- _rhs.
          ^ self
        );
        writeOn: writer => writer << 'ASTAssignment(' << lhs << ', ' << rhs << ')';
        with inherited ast_shared = #<:lang/ast/AST_SharedBehavior>;
        with inherited parent = #<:std/Clonable>;
    };

    ASTVariableDeclaration = {
        type, name, value, followup;

        initWithType: _type Name: _name Value: _value Followup: _followup => (
            type     <- _type.
            name     <- _name.
            value    <- _value.
            followup <- _followup.
          ^ self
        );
        writeOn: writer => writer << 'ASTVariableDeclaration(' << type << ', ' << name << ', ' << value << ', ' << followup << ')';
        with inherited ast_shared = #<:lang/ast/AST_SharedBehavior>;
        with inherited parent = #<:std/Clonable>;
    };

    ASTCompound = {
        exprs;

        initWithExprs: _exprs => (
            exprs <- _exprs.
          ^ self
        );
        writeOn: writer => writer << 'ASTCompound(' << exprs << ')';
        with inherited ast_shared = #<:lang/ast/AST_SharedBehavior>;
        with inherited parent = #<:std/Clonable>;
    };

    ASTBlock = {
        args, varargs, body;

        initWithArgs: _args Varargs: _varargs Body: _body => (
            args    <- _args.
            varargs <- _varargs.
            body    <- _body.
          ^ self
        );
        writeOn: writer => writer << 'ASTBlock(' << args << ', ' << varargs << ', ' << body << ')';
        with inherited ast_shared = #<:lang/ast/AST_SharedBehavior>;
        with inherited parent = #<:std/Clonable>;
    };

    ASTReturn = {
        value;

        initWithValue: _value => (
            value <- _value.
          ^ self
        );
        writeOn: writer => writer << 'ASTReturn(' << value << ')';
        with inherited ast_shared = #<:lang/ast/AST_SharedBehavior>;
        with inherited parent = #<:std/Clonable>;
    };

    ASTAs = {
        lhs, rhs;

        initWithLHS: _lhs RHS: _rhs => (
            lhs <- _lhs.
            rhs <- _rhs.
          ^ self
        );
        writeOn: writer => writer << 'ASTAs(' << lhs << ', ' << rhs << ')';
        with inherited ast_shared = #<:lang/ast/AST_SharedBehavior>;
        with inherited parent = #<:std/Clonable>;
    };
}
