
#=lang/eco/compiler/AssignmentVisitor: {
    with inherited parent = #<:std/Clonable>;

    compiler, rhs, visitor;

    initWithCompiler: _compiler RHS: _rhs Visitor: v => (
       compiler <- _compiler.
       rhs      <- _rhs.
       visitor  <- v.
      ^ self
    );

    visitUnknown: ast => ( io out << 'Visiting unknown AST for assignment'. io out newline. io out commit );

    visitSend: ast => (
        (ast subject isImplicitAST) if: [
            (compiler isLocal: ast message) if: [
                compiler storeVariable: ast message
                             Interlude: [ rhs acceptVisitor: visitor ]
                             IfPresent: [ ^ ]
                          IfNotPresent: [
                              io out << 'Local bound and not bound at the same time!'.
                              io out newline.
                              io out commit.
                            ^
                          ]
            ]
        ].
        ast subject acceptVisitor: visitor.
        compiler push.
        rhs acceptVisitor: visitor.
        compiler push.
        compiler assignWithKey: ast message
    );
},


#=lang/eco/compiler/Visitor: {
    "TODO: Implements interface lang/eco/ast/IVisitor"
    static with inherited parent = #<:std/Clonable>;
    with inherited module = #<:lang/eco/compiler>;

    protected compiler,
    protected environment,
    protected host,
    protected nexthost;

    initWithCompiler: _compiler => (
       compiler    <- _compiler.
       environment <- Yes: lobby.
       host        <- No.
       nexthost    <- No.
     ^ self
    );

    environment: e => environment <- Yes: e;
    host:        h => host        <- Yes: h;
    self:        s => nexthost    <- Yes: s;

    protected EvaluateExpression: expr => (
        nexthost yes: [ :h | expr evaluateInEnv: (environment yes) Host: (nexthost yes) ]
                  no: [      expr evaluateInEnv: (environment yes)                      ]
    );

    protected EvaluateExpression: expr In: object => (
        |
            driver <- (lang eco compiler CompilationDriver) new
                        ~ subject: expr
        |
        environment yes: [ :e | driver environment: e ].
        nexthost    yes: [ :s | driver host:        s ].
        driver self: object.
      ^ driver evaluate
    );

    protected ErrorMessage: text OnAST: ast => ('CompileError: ' + text) throw;

    visitUnknown: ast => ErrorMessage: 'Visiting unknown AST' OnAST: ast;

    visitImplicit: ast => compiler loadSelf;
    
    visitSelf: ast => (
        nexthost yes: [ :v | compiler loadConstant: v ]
                  no: [      compiler loadSelf        ]
    );

    visitMy: ast => compiler loadMy;

    visitHostRef: ast => (
        host yes: [ :h | compiler loadConstant: h]
              no: [      ErrorMessage: 'No host was defined!' OnAST: ast ]
    );

    visitResend: ast => ast resendValue acceptVisitor: self; "TODO!"
    
    visitConstant: ast => compiler loadConstant: ast constantValue;

    visitCompound: ast => (
        compiler pushNormalScope.
        ast getExprs do: [ :e | e acceptVisitor: self ].
        compiler popScope.
    );

    visitBlock: ast => (
        compiler pushBlockScope.
        ast getArgs do: [ :arg | compiler addParameter: (arg getName) ].
        ast hasVarargs if: [ compiler enableVarargs ].
        ast getBody acceptVisitor: self.
        compiler popBlockScope
    );

    "Closure blocks are to be found in the molecule section down below"

    visitBuiltin: ast => (
        | args <- ast getArgs |
        args do: [ :arg | arg acceptVisitor: self. compiler push ].
        compiler builtinWithMessage: ast getName ArgCount: args size Varargs: ast getVarargs
    );

    visitCall: ast => (
        | args <- ast getArgs |
        ast subject acceptVisitor: self.
        compiler push.
        args do: [ :arg | arg acceptVisitor: self. compiler push ].
        compiler sendWithMessage: #'value' ArgCount: args size + 1 Varargs: ast getVarargs
    );

    visitSend: ast => (
        | args <- ast getArgs |

        (ast subject isImplicitAST) if: [
            compiler loadVariable: ast message IfPresent: [ ^ ] IfNotPresent: []
        ].
        ast subject acceptVisitor: self.
        compiler push.
        args do: [ :arg | arg acceptVisitor: self. compiler push ].
        ast subject isResendAST
            if: [ compiler resendWithMessage: ast message ArgCount: args size + 1 Varargs: ast getVarargs ]
          else: [ compiler   sendWithMessage: ast message ArgCount: args size + 1 Varargs: ast getVarargs ]
    );

    visitReturn: ast => (
        ast returnValue acceptVisitor: self.
        compiler fullReturn
    );

    visitVariableDeclaration: ast => (
        compiler bindVariable: ast name Type: (EvaluateExpression: ast type).
        compiler storeVariable: ast name Interlude: [ ast getValue acceptVisitor: self ].
        ast getFollowup acceptVisitor: self
    );

    visitAssignment: ast => (
        | v <- (AssignmentVisitor clone) initWithCompiler: compiler RHS: ast rhs Visitor: self |
        ast lhs acceptVisitor: v
    );

    visitAs: ast => (
        "TODO"
        lhs acceptVisitor: self
    );

    visitArray: ast => (
        | array <- std util newArray: ast exprs size |
        ast exprs forEach: [ :i, :v | array at: i put: (EvaluateExpression: v) ].
        compiler loadConstant: array
    );


    AddSlot: slot ToInterface: interface => (
        | realType <- EvaluateExpression: slot type,
          realArgs <- std util newArray: slot args size |
        slot args forEach: [ :i, :v | realArgs at: i put: (EvaluateExpression: v type) ].
      ^ #'ecosphere.ecore.object.interface.add_entry'(interface, realType, slot name, realArgs, slot varargs if: 1 else: 0)
    );

    visitInterface: ast => (
        | i <- %[] |
        ast parents do: [ :p | i <- i addParent: (EvaluateExpression: p In: i) ].
        ast entries do: [ :s | i <- AddSlot: s ToInterface: i ].
        compiler loadConstant: i
    );


    AddSlot: slot ToMolecule: molecule => (
        | realType  <- EvaluateExpression: slot type, flagBits  <- 0 |
            
        slot flags isWith          if: [ flagBits <- flagBits bitOr: 0b00010 ].
        slot flags isInherited unless: [ flagBits <- flagBits bitOr: 0b00001 ].
        slot flags isOwn           if: [ flagBits <- flagBits bitOr: 0b00100 ].
        slot flags isProtected     if: [ flagBits <- flagBits bitOr: 0b01000 ].
        slot flags isStatic        if: [ flagBits <- flagBits bitOr: 0b10000 ].

        slot flags isMethod if: [
            |
                driver <- (lang eco compiler CompilationDriver) new
                            ~ subject: slot body
            |
            slot args do: [ :arg | driver addParameter: arg name "TODO: Also compile and add the type" ].
            slot varargs if: [ driver enableVarargs ].
            #'ecosphere.ecore.reflect.add_code_slot'(molecule, -1, flagBits, realType, slot name, driver commit).
        ] else: [
            #'ecosphere.ecore.reflect.add_value_slot'(molecule, -1, flagBits, realType, slot name, EvaluateExpression: slot body In: molecule).
        ].
    );

    visitMolecule: ast => (
        | m <- #'ecosphere.ecore.clone'({}) |  "TODO: Use a different mechanism, maybe Clone: obj"
        "TODO: Parent entries"
        ast slots do: [ :s | AddSlot: s ToMolecule: m ].
        compiler loadConstant: m
    );

    visitClosureBlock: ast => (
        | m <- #'ecosphere.ecore.clone'({}) |  "TODO: Use a different mechanism, maybe Clone: obj"

        |
            driver <- (lang eco compiler CompilationDriver) new
                        ~ subject: ast getBody
        |
        ast getArgs do: [ :arg |
            driver addParameter: arg getName "TODO: Also compile and add the type"
        ].
        ast hasVarargs if: [ driver enableVarargs ].

        #'ecosphere.ecore.reflect.add_value_slot'(m, -1, 0b10010, any, #'_', std Clonable).
        #'ecosphere.ecore.reflect.add_value_slot'(m, -1, 0b00010, any, #'_', {
            static with inherited _ = #<:std/Trait>;

            bind(...) => clone init(...);

            writeOn: w => w << 'a proper block closure';
        }).

        ast getClosedArgs do: [ :arg |
            #'ecosphere.ecore.reflect.add_value_slot'(m, -1, 0b00000, any, arg getName, m)
        ].

        | mappedNames <- std util newMap |
        ast getClosedArgs do: [ :arg |
            mappedNames at: arg getName put: (sys builtins object key Gensym).
        ].

        |
            astBuilder <- #<:lang/eco/ast/ASTConstruction>,
            initSource <- astBuilder newASTCompoundWithInstructions: (
                            (astBuilder newASTCompoundWithInstructions: (
                    ast getClosedArgs map: [ :arg |
                        (astBuilder newASTAssignmentWithLHS: (astBuilder newASTSendWithSubject: (astBuilder newASTSelf) Message: (arg getName) Args: (std util newArray()) HasVarargs: false)
                                                        RHS: (astBuilder newASTSendWithSubject: (astBuilder newASTImplicit) Message: ((mappedNames at: arg getName) yes) Args: (std util newArray()) HasVarargs: false))
                    ].
                )) & (
                    astBuilder newASTReturnWithValue: (astBuilder newASTSelf)
                ) ~ asArray
            ),
            initDriver <- (lang eco compiler CompilationDriver) new
                            ~ subject: initSource
        |
        ast getClosedArgs do: [ :arg |
            initDriver addParameter: ((mappedNames at: arg getName) yes)  "TODO: Type?"
        ].

        #'ecosphere.ecore.reflect.add_code_slot'(m, -1, 0b00001, any, #'init', initDriver commit).
        #'ecosphere.ecore.reflect.add_code_slot'(m, -1, 0b00001, any, #'value', driver commit).
        compiler loadConstant: m
    );
} 
