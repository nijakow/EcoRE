
#=lang/eco/compiler: {
    with inherited lobby = #<:lobby>;

    Bytecodes = #<:lang/eco/compiler/Bytecodes>;
    RegisterAllocator = #<:lang/eco/compiler/RegisterAllocator>;
    CodeWriter = #<:lang/eco/compiler/CodeWriter>;
    AssignmentVisitor = #<:lang/eco/compiler/AssignmentVisitor>;
    Visitor = #<:lang/eco/compiler/Visitor>;
    ValueType = #<:lang/eco/compiler/ValueType>;
    Scope = #<:lang/eco/compiler/Scope>;
    Compiler = #<:lang/eco/compiler/Compiler>;
    ScopedCompiler = #<:lang/eco/compiler/ScopedCompiler>;

    CompilationDriver = {
        static with inherited _ = #<:std/Clonable>;
        protected module = #<:lang/eco/compiler>;

        protected subject;
        protected selfOverride;
        protected environmentOverride;
        protected hostOverride;

        with inherited trait = {
            initWithSubject: _subject => (
                subject             <- _subject.
                selfOverride        <- No.
                environmentOverride <- No.
                hostOverride        <- No.
              ^ self
            );

            commit => (
                |
                    compiler <- (module ScopedCompiler) new,
                    visitor  <- ((module Visitor) clone)
                                  ~ initWithCompiler: compiler
                                         Environment: (environmentOverride yes: [ :e | e ] no: [ lobby ])
                                                Host: (hostOverride yes: [ :e | e ] no: [ lobby ])
                                            NextHost: (selfOverride yes: [ :e | e ] no: [ lobby ])
                |
                subject acceptVisitor: visitor.
              ^ compiler finish
            );
        }
    }
}
