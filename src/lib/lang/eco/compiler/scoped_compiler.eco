
#=lang/eco/compiler/ScopedCompiler: {
    scopes;

    init => (
        scopes <- newScope.
        addParameter: #'self'.
      ^ self
    );

    protected newBlockContextWithParent: p => (#<:lang/eco/compiler/ScopeSharedInfo> clone) initWithLexicalParent: p;
    protected newBlockContext => #<:lang/eco/compiler/ScopeSharedInfo> new;
    protected newScopeFromBlockContext: bc => (Scope clone) initWithShared: bc;
    protected newScope => newScopeFromBlockContext: newBlockContext;

    protected localCompiler => scopes compiler;

    pushNormalScope => scopes <- scopes createSubscope;
    pushBlockScope => (
        scopes <- newScopeFromBlockContext: (newBlockContextWithParent: scopes).
        addParameter: #'self'
    );
    popScope => scopes <- scopes parentScope;
    popBlockScope => (
        | c <- finish |
        scopes lexicalParentScope yes: [ :lp | scopes <- lp ]
                                   no: [ "TODO: Error" ].
        loadClosure: c
    );

    finish => scopes finish;

    loadSelf => localCompiler loadSelf;
    loadConstant: c => localCompiler loadConstant: c;
    loadClosure: c => localCompiler loadClosure: c;

    push => localCompiler push;

    sendWithMessage: msg ArgCount: args Varargs: varargs => (
        localCompiler sendWithMessage: msg ArgCount: args Varargs: varargs
    );
    builtinWithMessage: msg ArgCount: args Varargs: varargs => (
        localCompiler builtinWithMessage: msg ArgCount: args Varargs: varargs
    );
    assignWithKey: key => localCompiler assignWithKey: key;

    returnWithDepth: depth => localCompiler returnWithDepth: depth;
    fullReturn => returnWithDepth: scopes depth;

    addParameter: name => scopes addParameter: name;
    enableVarargs => scopes enableVarargs;

    bindVariable: name Type: type => scopes bindVariable: name Type: type;
    bindVariable: name => scopes bindVariable: name;
    loadVariable: name IfPresent: present IfNotPresent: notpresent => (
        scopes findVariable: name
                    IfFound: [ :info, :depth |
                                localCompiler loadRegister: (info index) Depth: depth.
                                present value
                             ]
                 IfNotFound: notpresent
    );
    storeVariable: name Interlude: interlude IfPresent: present IfNotPresent: notpresent => (
        scopes findVariable: name
                    IfFound: [ :info, :depth |
                                | type <- info type |
                                (any != info type) if: [
                                    localCompiler loadConstant: info type.
                                    localCompiler push.
                                    interlude value.
                                    localCompiler push.
                                    localCompiler sendWithMessage: #'cast:' ArgCount: 2. 
                                ] else: [
                                    interlude value.
                                ].
                                localCompiler moveLastValueToReg: (info index) Depth: depth.
                                present value
                             ]
                 IfNotFound: notpresent
    );
    storeVariable: name Interlude: interlude => storeVariable: name Interlude: interlude IfPresent: [] IfNotPresent: [];
    isLocal: name => scopes findVariable: name IfFound: [ :info, :depth | ^ true ] IfNotFound: [ ^ false ];

    with inherited parent = #<:std/Clonable>;
    with inherited module = #<:lang/eco/compiler>;
}
