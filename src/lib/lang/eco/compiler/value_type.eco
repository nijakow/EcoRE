

#=lang/eco/compiler/ValueType: {
    static with inherited _ = #<:std/Module>;

    RegisterDetails = {
        static with inherited _ = #<:std/Clonable>;
        with inherited module = #<:lang/eco/compiler>;

        index, isArg;

        with inherited trait = {
            initWithIndex: _index IsArg: _isArg => (
                index <- _index.
                isArg <- _isArg.
              ^ self
            );

            bcIndex => isArg if: [ index ] else: [ index + 128 ];
        };
    },

    Reg: index => (RegisterDetails clone) initWithIndex: index IsArg: false;
    Arg: index => (RegisterDetails clone) initWithIndex: index IsArg: true;

    Register = {
        static with inherited parent = #<:std/Clonable>;
        with inherited module = #<:lang/eco/compiler>;

        details, depth;

        initWithDetails: _details Depth: _depth => (
            details <- _details.
            depth   <- _depth.
          ^ self
        );

        initWithDetails: details => initWithDetails: details Depth: depth;

        isRegister => true;
        isConstant => false;
        isStack => false;
        isClosure => false;
        ifRegister: r ifConstant: c ifClosure: cl ifStack: s => r value;

        writeOn: w => w << 'register value ' << details;
    },
    Stack = {
        static with inherited parent = #<:std/Clonable>;
        with inherited module = #<:lang/eco/compiler>;

        isRegister => false;
        isConstant => false;
        isStack => true;
        isClosure => false;
        ifRegister: r ifConstant: c ifClosure: cl ifStack: s => s value;
    },
    Constant = {
        static with inherited parent = #<:std/Clonable>;
        with inherited module = #<:lang/eco/compiler>;

        constantValue;

        initWithValue: v => (
            constantValue <- v.
          ^ self
        );

        isRegister => false;
        isConstant => true;
        isStack => false;
        isClosure => false;
        ifRegister: r ifConstant: c ifClosure: cl ifStack: s => c value;
    },
    Closure = {
        static with inherited parent = #<:std/Clonable>;
        with inherited module = #<:lang/eco/compiler>;

        closureValue;

        initWithValue: v => (
            closureValue <- v.
          ^ self
        );

        isRegister => false;
        isConstant => false;
        isStack => false;
        isClosure => true;
        ifRegister: r ifConstant: c ifClosure: cl ifStack: s => cl value;
    }
}
