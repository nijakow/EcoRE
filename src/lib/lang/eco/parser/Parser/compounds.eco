
#=lang/eco/parser/Parser/Compounds: {
    static with inherited _ = #<:std/Module>;

    parseCompound => parseCompoundWithTerminator: TokenType RPAREN;
    
    parseCompoundWithTerminator: terminator => (
      ^ newASTCompoundWithInstructions: (parseExpressionsWithTerminator: terminator)
    );

    parseBlock => (
        |
            parameters <- std util newVector,
            varargs    <- false,
            the_type,
            key
        |
        [
          begin
            if: [ (check: TokenType COLON) isYes ] then: [
              parameters append: parseArgdef.
              check: TokenType SEPARATOR.
              check: TokenType BAR.
            ] ~
            if: [ (check: TokenType ELLIPSIS) isYes ] then: [
                varargs <- true.
                expect: TokenType BAR.
              ^ newASTBlockWithArgs: (parameters)
                            Varargs: (varargs)
                               Body: (parseCompoundWithTerminator: TokenType RBRACK)
            ] ~
            default: [
              ^ newASTBlockWithArgs: (parameters)
                            Varargs: (varargs)
                               Body: (parseCompoundWithTerminator: TokenType RBRACK)
            ]
        ] repeat.
    );
}
