
#=lang/eco/parser/Parser/Checks: {
    static with inherited _ = #<:std/Module>;

    error: msg => "TODO" ('Compile error: ' + msg) throw;

    check: type => check: type withProperty: [ :token | true ];
    check: type withProperty: block => (
        | t <- tokenizer nextToken |
        ([t hasType: type] and: [block value(t)])
          ~ if: [ Yes: t     ]
          else: [ t fail. No ]
    );

    checkIdentifier => check: TokenType IDENTIFIER;
    checkDotIdentifier => (
        check: TokenType IDENTIFIER withProperty: [
            :token | (token payload asString asVector last) == #\:
        ]
    );
    checkBinaryIdentifier => (
        check: TokenType IDENTIFIER withProperty: [
            :token | (token payload asString asVector last) let: [
                :c | [ IsBin(c) ] and: [ c != #\: ]
            ]
        ]
    );
    checkNAryIdentifier => (
        check: TokenType IDENTIFIER withProperty: [
            :token | IsBin(token payload asString asVector last)
        ]
    );
    checkUnaryIdentifier => (
        check: TokenType IDENTIFIER withProperty: [
            :token | IsBin(token payload asString asVector last) not
        ]
    );
    checkUnaryIdentifierOrKey => (
        checkUnaryIdentifier yes: [ :value | ^ Yes: value ].
      ^ check: TokenType KEY
    );

    expect: type => (
        (check: type) yes: [ :v | ^ v ].
        error: 'Expected a different token!'
    );
}
