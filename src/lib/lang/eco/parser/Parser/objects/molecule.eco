
#=lang/eco/parser/Parser/Molecule: {
    static with inherited _ = #<:std/Module>;

    parseObjectSlotFlags: flags => (
        [
            begin
              if: [ check: TokenType DEPRECATED ] then: [ flags setDeprecated ] ~
              if: [ check: TokenType PROTECTED  ] then: [ flags setProtected  ] ~
              if: [ check: TokenType STATIC     ] then: [ flags setStatic     ] ~
              if: [ check: TokenType PRIVATE    ] then: [ flags setPrivate    ] ~
              if: [ check: TokenType FINAL      ] then: [ flags setFinal      ] ~
              if: [ check: TokenType WITH       ] then: [ flags setWith       ] ~
              if: [ check: TokenType OWN        ] then: [ flags setOwn        ] ~
              if: [ check: TokenType INHERITED  ] then: [ flags setInherited  ] ~
            default: [ ^ flags ]
        ] repeat
    );

    parseSlotWithBuilder: builder => (
        | flags <- builder openFlags |
        parseObjectSlotFlags: flags.

        |
            type     <- parseOptionalType,
            decl     <- parseMethodDeclaration,
            slotname <- decl first,
            arglist  <- decl second,
            varargs  <- decl third
        |

        (check: TokenType RARROW) if: [
            | body <- parseExpression |
            builder addCodeSlotWithFlags: flags
                                    Type: type
                                    Name: slotname
                                    Args: arglist
                                    Varargs: varargs
                                    Body: body
        ] else: [
            | value |
            (check: TokenType ASSIGNMENT) if: [ value <- parseExpression ]
                                        else: [ value <- newASTSelf ].
            builder addValueSlotWithFlags: flags
                                        Type: type
                                        Name: slotname
                                    Value: value
        ]
    );

    parseMolecule => (
        | builder <- newASTMoleculeBuilder |
        parseMoleculeUntil: TokenType RCURLY WithBuilder: builder.
      ^ builder commit
    );

    parseMoleculeUntil: stop WithBuilder: builder => (
        [ :break |
            begin
              if: [ check: stop             ] then: [ break value                                               ] ~
              if: [ check: TokenType LPAREN ] then: [ parseMoleculeUntil: TokenType RPAREN WithBuilder: builder ] ~
              if: [ check: TokenType CARET  ] then: [ builder addParent: parseExpression                        ] ~
            default: [ parseSlotWithBuilder: builder ].
            (check: stop) if: [ break value ].
            expect: TokenType SEPARATOR
        ] repeatWithBreak.
    );
}
