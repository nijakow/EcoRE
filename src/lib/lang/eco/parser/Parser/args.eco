
#=lang/eco/parser/Parser/Args: {
    static with inherited _ = #<:std/Module>;

    parseArgdef => (
        | type <- parseOptionalType,
          name <- (expect: TokenType IDENTIFIER) payload |
      ^ newASTType: type AndName: name
    );

    parseArgdefsWithoutEllipsis => (
        | defs <- std util newVector |
        [ (check: TokenType RPAREN) isYes ] until: [
            defs append: parseArgdef.
            (check: TokenType RPAREN) yes: [ ^ defs ].
            expect: TokenType SEPARATOR
        ].
      ^ defs
    );

    parseOptionalArgdefsWithoutEllipsis => (
        (check: TokenType LPAREN)
          ~ yes: [ parseArgdefsWithoutEllipsis ]
             no: [ std util newVector          ]
    );

    parseArgdefs => (
        | defs <- std util newVector |
        [ (check: TokenType RPAREN) isYes ] until: [
            (check: TokenType ELLIPSIS) yes: [
                expect: TokenType RPAREN.
              ^ defs & true
            ].
            defs append: parseArgdef.
            (check: TokenType RPAREN) yes: [ ^ defs & false ].
            expect: TokenType SEPARATOR
        ].
      ^ defs & false
    );

    parseOptionalArgdefs => (
        (check: TokenType LPAREN)
          ~ yes: [ parseArgdefs                 ]
             no: [ (std util newVector) & false ]
    );

    parseMethodDeclaration => (
        | v <- check: TokenType KEY |
        v no: [ v <- checkUnaryIdentifier ].
        v yes: [
            :tok |  | lst <- parseOptionalArgdefs |
            ^ (tok payload) & (lst first) & (lst second)
        ].

        checkBinaryIdentifier yes: [
            :tok |  | args <- std util newVector |
            args append: parseArgdef.
          ^ (tok payload) & args & false
        ].

        |
            name <- '',
            args <- std util newVector
        |

        [
            | ident <- checkNAryIdentifier |

            ident no: [ ^ (name asKey) & args & false ].
            name <- name + (ident yes payload asString).
            args append: parseArgdef.
        ] repeat
    );

    parseArglist => (
        | exprs <- std util newVector |
        [ (check: TokenType RPAREN) isYes ] until: [
            (check: TokenType ELLIPSIS) yes: [
                expect: TokenType RPAREN.
              ^ exprs & true
            ].
            exprs append: parseExpression.
            (check: TokenType RPAREN) yes: [ ^ exprs & false ].
            expect: TokenType SEPARATOR
        ].
      ^ exprs & false
    );

    parseOptionalArglist => (
        (check: TokenType LPAREN) yes: [ parseArglist ]
                                   no: [ std util newVector & false ]
    );
}
