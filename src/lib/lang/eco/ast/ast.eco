
#=lang/eco/ast: {
    with construction = #<:lang/eco/ast/ASTConstruction>;
    
    IVisitor = #<:lang/eco/ast/IVisitor>;

    AST_SharedBehavior = #=lang/eco/ast/AST_SharedBehavior: {
        acceptVisitor: visitor => visitor visitUnknown: self;
        writeOn: writer => writer << 'AST';
        compileInEnv: env => compileInEnv: env Host: lobby;
        compileInEnv: env Host: host => compileInEnv: env Host: host NextHost: host;
        compileInEnv: env Host: host NextHost: nexthost => (
            | driver <- (lang eco compiler CompilationDriver) new
                          ~ subject: self
                          ~ self: nexthost
                          ~ host: host
                          ~ environment: env
            |
          ^ driver commit
        );
        evaluateInEnv: env => (compileInEnv: env) execute(env);
        evaluateInEnv: env Host: host => (compileInEnv: env Host: host) execute(env);
        evaluateInEnv: env Host: host NextHost: nexthost => (compileInEnv: env Host: host NextHost: nexthost) execute(env);
        isImplicitAST => false;
        isSelfAST => false;
        isResendAST => false;
    };

    ASTFlags = {
        static with inherited parent = #<:std/Clonable>;

        isDeprecated, isProtected, isStatic, isFinal, isWith, isInherited, isOwn, isMethod;

        init => (
            isDeprecated <- false.
            isProtected  <- false.
            isStatic     <- false.
            isFinal      <- false.
            isWith       <- false.
            isInherited  <- false.
            isOwn        <- false.
            isMethod     <- false.
          ^ self
        );

        isPrivate => [ isProtected ] and: [ isPrivate ];

        setDeprecated => ( isDeprecated <- true. self );
        setProtected  => ( isProtected <- true. self );
        setStatic     => ( isStatic  <- true. self );
        setPrivate    => ( setProtected. setStatic. self );
        setFinal      => ( isFinal <- true. self );
        setWith       => ( isWith <- true. self );
        setInherited  => ( isInherited <- true. self );
        setOwn        => ( isOwn <- true. self );
        setMethod     => ( isMethod <- true. self );

        writeOn: writer => (
            isDeprecated if: [ writer << '@deprecated ' ].
            isProtected  if: [ writer << 'protected '   ].
            isStatic     if: [ writer << 'static '      ].
            isFinal      if: [ writer << 'final '       ].
            isWith       if: [ writer << 'with '        ].
            isInherited  if: [ writer << 'inherited '   ].
            isOwn        if: [ writer << 'own '         ].
            isMethod     if: [ writer << '<method> '    ]. "isMethod is usually not printed"
        );
    };

    ASTTypeAndName = {
        static with inherited parent = #<:std/Clonable>;

        type, name;

        initWithType: t Name: n => (
            type <- t.
            name <- n.
          ^ self
        );

        getType => type;
        getName => name;

        writeOn: writer => writer << '[' << type << '] ' << name;
    };

    ASTSlotDef = {
        static with inherited parent = #<:std/Clonable>;

        flags, type, name, args, varargs, body;

        initWithFlags: f Type: t Name: n Args: a Varargs: v Body: b => (
            flags   <- f.
            type    <- t.
            name    <- n.
            args    <- a.
            varargs <- v.
            body    <- b.
          ^ self
        );

        writeOn: writer => (
            writer << flags.
            writer << '[' << type << '] '.
            writer << name << ' ('.
            args forEach: [ :i, :e | (i > 0) if: [ writer << ', ' ]. writer << e ].
            writer << (varargs if: ', ...) ' else: ') ').
            writer << body.
        );
        addToInterface: interface WithEnv: env Host: host => (
            | realType <- type evaluateInEnv: env Host: host,
              realArgs <- std util newArray: args size |
            args forEach: [ :i, :v | realArgs at: i put: (v type evaluateInEnv: env Host: host) ].
          ^ #'ecosphere.ecore.object.interface.add_entry'(interface, realType, name, realArgs, varargs if: 1 else: 0)
        );
        addToMolecule: molecule WithEnv: env Host: host => (
            "TODO: Use Mirrors for this!"

            | realType  <- type evaluateInEnv: env Host: host,
              flagBits  <- 0 |
            
            flags isWith          if: [ flagBits <- flagBits bitOr: 0b00010 ].
            flags isInherited unless: [ flagBits <- flagBits bitOr: 0b00001 ].
            flags isOwn           if: [ flagBits <- flagBits bitOr: 0b00100 ].
            flags isProtected     if: [ flagBits <- flagBits bitOr: 0b01000 ].
            flags isStatic        if: [ flagBits <- flagBits bitOr: 0b10000 ].

            flags isMethod if: [
                "TODO, FIXME, XXX: This approach is totally horrendous"
                |
                    compiler <- (lang eco compiler ScopedCompiler) new,
                    visitor  <- ((lang eco compiler Visitor) clone) initWithCompiler: compiler Environment: env
                |
                args do: [ :arg | compiler addParameter: arg name "TODO: Also compile and add the type" ].
                varargs if: [ compiler enableVarargs ].
                body acceptVisitor: visitor.
                #'ecosphere.ecore.reflect.add_code_slot'(molecule, -1, flagBits, realType, name, compiler finish).
            ] else: [
                | realValue <- body evaluateInEnv: env Host: host NextHost: molecule |
                #'ecosphere.ecore.reflect.add_value_slot'(molecule, -1, flagBits, realType, name, realValue).
            ].
          ^ molecule
        );
    };

    ASTImplicit = {
        static with inherited parent = #<:std/Singleton>;
        with inherited ast_shared = #<:lang/eco/ast/AST_SharedBehavior>;

        isImplicitAST => true;
        acceptVisitor: visitor => visitor visitImplicit: self;
        writeOn: writer => writer << 'implicit';
    };

    ASTSelf = {
        static with inherited parent = #<:std/Singleton>;
        with inherited ast_shared = #<:lang/eco/ast/AST_SharedBehavior>;

        isSelfAST => true;
        acceptVisitor: visitor => visitor visitSelf: self;
        writeOn: writer => writer << 'self';
    };

    ASTMy = {
        static with inherited parent = #<:std/Clonable>;
        with inherited ast_shared = #<:lang/eco/ast/AST_SharedBehavior>;

        acceptVisitor: visitor => visitor visitMy: self;
        writeOn: writer => writer << 'my';
    };

    ASTHostRef = {
        static with inherited parent = #<:std/Singleton>;
        with inherited ast_shared = #<:lang/eco/ast/AST_SharedBehavior>;

        acceptVisitor: visitor => visitor visitHostRef: self;
        writeOn: writer => writer << '$';
    };

    ASTResend = {
        static with inherited parent = #<:std/Clonable>;
        with inherited ast_shared = #<:lang/eco/ast/AST_SharedBehavior>;

        resendValue;

        initWithValue: v => (
            resendValue <- v.
          ^ self
        );

        isResendAST => true;
        acceptVisitor: visitor => visitor visitResend: self;
        writeOn: writer => writer << '$(' << resendValue << ')';
    };

    ASTConstant = {
        static with inherited parent = #<:std/Clonable>;
        with inherited ast_shared = #<:lang/eco/ast/AST_SharedBehavior>;

        constantValue;

        initWithValue: v => (
            constantValue <- v.
          ^ self
        );
        acceptVisitor: visitor => visitor visitConstant: self;
        writeOn: writer => writer << 'ASTConstant(' << constantValue << ')';
    };

    ASTArray = {
        static with inherited parent = #<:std/Clonable>;
        with inherited ast_shared = #<:lang/eco/ast/AST_SharedBehavior>;

        exprs;

        initWithExprs: _exprs => (
            exprs <- _exprs.
          ^ self
        );
        acceptVisitor: visitor => visitor visitArray: self;
        writeOn: writer => writer << 'ASTArray(' << exprs << ')';
    };

    ASTInterface = {
        static with inherited parent = #<:std/Clonable>;
        with inherited ast_shared = #<:lang/eco/ast/AST_SharedBehavior>;

        parents, entries;

        initWithParents: _parents Entries: _entries => (
            parents <- _parents.
            entries <- _entries.
          ^ self
        );

        acceptVisitor: visitor => visitor visitInterface: self;
        writeOn: writer => writer << 'ASTInterface(' << parents << ', ' << entries << ')';
    };

    ASTMolecule = {
        static with inherited parent = #<:std/Clonable>;
        with inherited ast_shared = #<:lang/eco/ast/AST_SharedBehavior>;

        slots;

        initWithSlots: _slots => (
            slots <- _slots.
          ^ self
        );

        acceptVisitor: visitor => visitor visitMolecule: self;
        writeOn: writer => writer << 'ASTMolecule(' << slots << ')';
    };

    ASTBuiltin = {
        static with inherited parent = #<:std/Clonable>;
        with inherited ast_shared = #<:lang/eco/ast/AST_SharedBehavior>;

        name, args, varargs;

        initWithName: _name Args: _args Varargs: _varargs => (
            name    <- _name.
            args    <- _args.
            varargs <- _varargs.
          ^ self
        );
        getName => name;
        getArgs => args asArray;
        getVarargs => varargs;
        acceptVisitor: visitor => visitor visitBuiltin: self;
        writeOn: writer => writer << 'ASTBuiltin(' << name << ', ' << args << ', ' << varargs << ')';
    };

    ASTCall = {
        static with inherited parent = #<:std/Clonable>;
        with inherited ast_shared = #<:lang/eco/ast/AST_SharedBehavior>;

        subject, args, varargs;

        initWithSubject: _subject Args: _args Varargs: _varargs => (
            subject <- _subject.
            args    <- _args.
            varargs <- _varargs.
          ^ self
        );
        getSubject => subject;
        getArgs => args asArray;
        getVarargs => varargs;
        acceptVisitor: visitor => visitor visitCall: self;
        writeOn: writer => writer << 'ASTCall(' << subject << ', ' << args << ', ' << varargs << ')';
    };

    ASTSend = {
        static with inherited parent = #<:std/Clonable>;
        with inherited ast_shared = #<:lang/eco/ast/AST_SharedBehavior>;

        subject, message, args, varargs;

        initWithSubject: _subject Message: _message Args: _args Varargs: _varargs => (
            subject <- _subject.
            message <- _message.
            args    <- _args.
            varargs <- _varargs.
          ^ self
        );
        getSubject => subject;
        getMessage => message;
        getArgs => args asArray;
        getVarargs => varargs;
        acceptVisitor: visitor => visitor visitSend: self;
        writeOn: writer => writer << 'ASTSend(' << subject << ', ' << message << ', ' << args << ', ' << varargs << ')';
    };

    ASTAssignment = {
        static with inherited parent = #<:std/Clonable>;
        with inherited ast_shared = #<:lang/eco/ast/AST_SharedBehavior>;

        lhs, rhs;

        initWithLHS: _lhs RHS: _rhs => (
            lhs <- _lhs.
            rhs <- _rhs.
          ^ self
        );
        acceptVisitor: visitor => visitor visitAssignment: self;
        writeOn: writer => writer << 'ASTAssignment(' << lhs << ', ' << rhs << ')';
    };

    ASTVariableDeclaration = {
        static with inherited parent = #<:std/Clonable>;
        with inherited ast_shared = #<:lang/eco/ast/AST_SharedBehavior>;

        type, name, value, followup;

        initWithType: _type Name: _name Value: _value Followup: _followup => (
            type     <- _type.
            name     <- _name.
            value    <- _value.
            followup <- _followup.
          ^ self
        );
        "These get-style functions are deprecated"
        getType => type;
        getName => name;
        getValue => value;
        getFollowup => followup;
        acceptVisitor: visitor => visitor visitVariableDeclaration: self;
        writeOn: writer => writer << 'ASTVariableDeclaration(' << type << ', ' << name << ', ' << value << ', ' << followup << ')';
    };

    ASTCompound = {
        static with inherited parent = #<:std/Clonable>;
        with inherited ast_shared = #<:lang/eco/ast/AST_SharedBehavior>;

        exprs;

        initWithExprs: _exprs => (
            exprs <- _exprs.
          ^ self
        );
        getExprs => exprs asArray;
        acceptVisitor: visitor => visitor visitCompound: self;
        writeOn: writer => writer << 'ASTCompound(' << exprs << ')';
    };

    ASTBlock = {
        static with inherited parent = #<:std/Clonable>;
        with inherited ast_shared = #<:lang/eco/ast/AST_SharedBehavior>;

        args, varargs, body;

        initWithArgs: _args Varargs: _varargs Body: _body => (
            args    <- _args.
            varargs <- _varargs.
            body    <- _body.
          ^ self
        );
        getArgs => args asArray;
        hasVarargs => varargs;
        getBody => body;
        acceptVisitor: visitor => visitor visitBlock: self;
        writeOn: writer => writer << 'ASTBlock(' << args << ', ' << varargs << ', ' << body << ')';
    };

    ASTReturn = {
        static with inherited parent = #<:std/Clonable>;
        with inherited ast_shared = #<:lang/eco/ast/AST_SharedBehavior>;

        returnValue;

        initWithValue: _value => (
            returnValue <- _value.
          ^ self
        );
        acceptVisitor: visitor => visitor visitReturn: self;
        writeOn: writer => writer << 'ASTReturn(' << returnValue << ')';
    };

    ASTAs = {
        static with inherited parent = #<:std/Clonable>;
        with inherited ast_shared = #<:lang/eco/ast/AST_SharedBehavior>;
        
        lhs, rhs;

        initWithLHS: _lhs RHS: _rhs => (
            lhs <- _lhs.
            rhs <- _rhs.
          ^ self
        );
        acceptVisitor: visitor => visitor visitAs: self;
        writeOn: writer => writer << 'ASTAs(' << lhs << ', ' << rhs << ')';
    };
}
