
#=lang/ast/ASTConstruction/ASTInterfaceBuilder: {
    parents, entries;

    with inherited trait = {
        init => (
            parents <- std util newVector.
            entries <- std util newVector.
          ^ self
        );

        addParent: ast => parents append: ast;
        addEntryWithType: type Name: name Args: args Varargs: varargs => (
            entries append: ((((ast ASTSlotDef) new) initWithFlags: ((ast ASTFlags) new) Type: type Name: name Args: args Varargs: varargs Body: ((ast ASTSelf) new)))
        );

        commit => ((ast ASTInterface) new) initWithParents: parents Entries: entries;

        ast = #<:lang/ast>;
        with inherited parent = #<:std/Clonable>;
    };
},

#=lang/ast/ASTConstruction/ASTMoleculeBuilder: {
    slots;

    with inherited trait = {
        init => (
            slots <- std util newVector.
          ^ self
        );

        openFlags => (ast ASTFlags) new;

        addCodeSlotWithFlags: flags Type: type Name: name Args: args Varargs: varargs Body: body => (
            flags setMethod.
            slots append: (((ast ASTSlotDef) new) initWithFlags: flags Type: type Name: name Args: args Varargs: varargs Body: body)
        );

        addValueSlotWithFlags: flags Type: type Name: name Value: value => (
            slots append: ((((ast ASTSlotDef) new) initWithFlags: flags Type: type Name: name Args: (std util newVector) Varargs: false Body: value))
        );

        commit => ((ast ASTMolecule) new) initWithSlots: slots;

        ast = #<:lang/ast>;
        with inherited parent = #<:std/Clonable>;
    };
},

#=lang/ast/ASTConstruction: {
  with ast = #<:lang/ast>;

  newASTType: t AndName: n => (ASTTypeAndName new) initWithType: t Name: n;

  newASTSelf => (ASTSelf new);

  newASTConstantWithValue: value => (ASTConstant new) initWithValue: value;

  newASTArrayWithExpressions: exprs => (ASTArray new) initWithExprs: exprs;

  newASTInterfaceBuilder => #<:lang/ast/ASTConstruction/ASTInterfaceBuilder> new;

  newASTMoleculeBuilder => #<:lang/ast/ASTConstruction/ASTMoleculeBuilder> new;

  newASTBuiltinWithName: name Args: args HasVarargs: varargs => (ASTBuiltin new) initWithName: name Args: args Varargs: varargs;

  newASTCallWithSubject: subject Args: args HasVarargs: varargs => (ASTCall new) initWithSubject: subject Args: args Varargs: varargs;

  newASTSendWithSubject: subject Message: msg Args: args HasVarargs: varargs => (ASTSend new) initWithSubject: subject Message: msg Args: args Varargs: varargs;

  newASTAssignmentWithLHS: lhs RHS: rhs => (ASTAssignment new) initWithLHS: lhs RHS: rhs;

  newASTBarWithType: type Var: var Value: value Followup: followup => (ASTVariableDeclaration new) initWithType: type Name: var Value: value Followup: followup;

  newASTCompoundWithInstructions: instructions => (ASTCompound new) initWithExprs: instructions;

  newASTBlockWithArgs: args Varargs: varargs Body: body => (ASTBlock new) initWithArgs: args Varargs: varargs Body: body;

  newASTReturnWithValue: value => (ASTReturn new) initWithValue: value;

  newASTAsWithLHS: lhs RHS: rhs => (ASTAs new) initWithLHS: lhs RHS: rhs;
}
