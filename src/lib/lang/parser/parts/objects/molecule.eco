
#=lang/parser/Parser/Molecule: {
    parseObjectSlotFlags: flags => (
        [
            begin
              if: [ check: TokenType DEPRECATED ] then: [ flags setDeprecated ]
              if: [ check: TokenType PRIVATE    ] then: [ flags setPrivate    ] ~
              if: [ check: TokenType FINAL      ] then: [ flags setFinal      ] ~
              if: [ check: TokenType WITH       ] then: [ flags setWith       ] ~
              if: [ check: TokenType OWN        ] then: [ flags setOwn        ] ~
              if: [ check: TokenType INHERITED  ] then: [ flags setInherited  ] ~
            default: [ ^ flags ]
        ] repeat
    );

    parseMolecule => (
        | builder <- newASTMoleculeBuilder |
        [ check: TokenType RCURLY ] until: [
            (check: TokenType CARET) if: [
                builder addParent: parseExpression
            ] else: [
                | flags <- builder openFlags |
                parseObjectSlotFlags: flags.

                |
                    type     <- parseOptionalType,
                    decl     <- parseMethodDeclaration,
                    slotname <- decl first,
                    arglist  <- decl second,
                    varargs  <- decl third
                |

                (check: TokenType RARROW) if: [
                    | body <- parseExpression |
                    builder addCodeSlotWithFlags: flags
                                            Type: type
                                            Name: slotname
                                            Args: arglist
                                         Varargs: varargs
                                            Body: body
                ] else: [
                    | value |
                    (check: TokenType ASSIGNMENT) if: [ value <- parseExpression ]
                                                else: [ value <- newASTSelf ].
                    builder addValueSlotWithFlags: flags
                                             Type: type
                                             Name: slotname
                                            Value: value
                ]
            ].
            (check: TokenType RCURLY) if: [ ^ builder commit ].
            expect: TokenType SEPARATOR
        ].
      ^ builder commit
    );
}
