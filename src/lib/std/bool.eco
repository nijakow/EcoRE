
#=std/bool: {
    true = #=std/bool/true: {
        static with inherited parent = #<:std/Clonable>;
        with inherited trait = {
            asBool           => self;
            not              => false;
            if: t else: f    => t value;
            true: t false: f => if: t else: f;
            true: t          => if: t;
            false: f         => unless: f;
            if: c then: b    => ( (c value) if: [ b value. ^ false ] else: [ ^ self ] );
            default: b       => ( b value. ^ self );
            writeOn: writer  => writer << 'true';
        };
    },

    false = #=std/bool/false: {
        static with inherited parent = #<:std/Clonable>;
        with inherited trait = {
            asBool           => self;
            not              => true;
            if: t else: f    => f value;
            true: t false: f => if: t else: f;
            true: t          => if: t;
            false: f         => unless: f;
            if: c then: b    => self;
            default: b       => self;
            writeOn: writer  => writer << 'false';
        };
    }
}
