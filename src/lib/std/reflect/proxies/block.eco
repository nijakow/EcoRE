
#=std/reflect/proxies/Block: {
    isBlock    => true;
    value(...) => #'ecosphere.ecore.flow.value'(self, ...);
    value: v   => value(v);
    repeat     => ( self value. #'ecosphere.ecore.flow.reset'() );

    withBreak  => self value([ ^ self ]);
    exitValue  => self value([ :v | ^ v ]);

    repeatWithExitValue => (
        | breaker <- [ :v | ^ v ] |
        [ self value(breaker) ] repeat.
    );

    repeatWithBreak => (
        | breaker <- [ ^ self ] |
        [ self value(breaker) ] repeat.
    );

    repeatWithContinue => (
        [
            self repeatWithBreak
        ] repeat.
    );

    withRestart => (
        [
            [ :inner |
                ^ value(inner).
            ] withBreak.
        ] repeat.
    );

    returns: v => ( value. ^ v );

    while: b   => ( (self value) unless: [ ^ self ]. b value. #'ecosphere.ecore.flow.reset'() );
    until: b   => ( (self value) if: [ ^ self ]. b value. #'ecosphere.ecore.flow.reset'() );
    catch: b   => ( [ #'ecosphere.ecore.flow.set_exception_handler'(b). self value ] value );
    and:   b   => (
        | v <- self value |
        v if: [ ^ b value ] else: [ ^ v ]
    );
    or:    b   => (
        | v <- self value |
        v if: [ ^ v ] else: [ ^ b value ]
    );
    writeOn: writer => writer << 'a block closure';
    with inherited parent = #<:std/Clonable>;
}
