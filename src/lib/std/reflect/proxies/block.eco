
#=std/reflect/proxies/Block: {
    static with inherited parent = #<:std/Clonable>;
    
    isBlock    => true;
    value(...) => #'ecosphere.ecore.flow.value'(self, ...);
    value: v   => value(v);
    repeat     => ( self value. #'ecosphere.ecore.flow.reset'() );

    withBreak  => self value([ ^ self ]);
    exitValue  => self value([ :v | ^ v ]);

    repeatWithExitValue => (
        | breaker <- [ :v | ^ v ] |
        [ self value(breaker) ] repeat.
    );

    repeatWithBreak => (
        | breaker <- [ ^ self ] |
        [ self value(breaker) ] repeat.
    );

    repeatWithContinue => (
        [
            self repeatWithBreak
        ] repeat.
    );

    withRestart => (
        [
            [ :inner |
                ^ value(inner).
            ] withBreak.
        ] repeat.
    );

    returns: v => ( value. ^ v );

    "
        TODO: Since the inliner in the optimizer will optimize these loops away,
              returning 'self' might not be the best idea, since this would enforce
              the optimizer to keep the loop object around. Maybe we should
              return a special object?
    "
    while: b   => ( (self value) unless: [ ^ self ]. b value. #'ecosphere.ecore.flow.reset'() );
    until: b   => ( (self value) if: [ ^ self ]. b value. #'ecosphere.ecore.flow.reset'() );

    catch: b   => ( [ #'ecosphere.ecore.flow.set_exception_handler'(b). self value ] value );
    ok: yblock => [ yblock value(self value) ] catch: [ :e | self ];
    error: nblock => self catch: nblock;
    ok: yblock error: nblock => [ yblock value(self value) ] catch: nblock;
    error: nblock ok: yblock => [ yblock value(self value) ] catch: nblock;
    protected: block => (
        | v <- self catch: [ :v | block value. #'ecosphere.ecore.flow.throw'(v) ] |
        block value.
      ^ v
    );
    ensure: block => protected: block;

    and:   b   => (
        | v <- self value |
        v if: [ ^ b value ] else: [ ^ v ]
    );
    or:    b   => (
        | v <- self value |
        v if: [ ^ v ] else: [ ^ b value ]
    );
    writeOn: writer => writer << 'a block closure';
}
