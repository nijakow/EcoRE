
#=std/reflect/proxies/Blob: {
    size => #'ecosphere.ecore.object.blob.size'(self);
    isEmpty => size isZero;
    at: index => int8At: index;
    int8At: index => #'ecosphere.ecore.object.blob.at_int8'(self, index);
    int16At: index => #'ecosphere.ecore.object.blob.at_int16'(self, index);
    int32At: index => #'ecosphere.ecore.object.blob.at_int32'(self, index);
    at: index put: value => at: index putInt8: value;
    at: index putInt8: value => #'ecosphere.ecore.object.blob.at_put_int8'(self, index, value);
    at: index putInt16: value => #'ecosphere.ecore.object.blob.at_put_int16'(self, index, value);
    at: index putInt32: value => #'ecosphere.ecore.object.blob.at_put_int32'(self, index, value);

    with inherited iterations = #<:std/util/StandardListIterations>;
    with inherited conversions = #<:std/util/StandardListConversions>;
    with inherited access = #<:std/util/StandardListAccess>;
    with inherited search = #<:std/util/StandardListSearch>;

    readFromFileDescriptor: fd => #'ecosphere.ecore.object.blob.read_from'(self, fd);
    writeToFileDescriptor: fd => #'ecosphere.ecore.object.blob.write_to'(self, fd);
    
    writeOn: writer => writer << '<blob: ' << size << '>';

    with inherited parent = #<:std/Clonable>;
}
