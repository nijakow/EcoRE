
#=std/reflect/proxies/Blob: {
    size => #'ecosphere.ecore.object.blob.size'(self);
    isEmpty => size isZero;
    at: index => int8: index;
    int8: index => #'ecosphere.ecore.object.blob.at_int8'(self, index);
    int16: index => #'ecosphere.ecore.object.blob.at_int16'(self, index);
    int32: index => #'ecosphere.ecore.object.blob.at_int32'(self, index);
    at: index put: value => at: index putInt8: value;
    at: index putInt8: value => #'ecosphere.ecore.object.blob.at_put_int8'(self, index, value);
    at: index putInt16: value => #'ecosphere.ecore.object.blob.at_put_int16'(self, index, value);
    at: index putInt32: value => #'ecosphere.ecore.object.blob.at_put_int32'(self, index, value);

    with inherited iterations = #<:std/util/StandardListIterations>;
    with inherited conversions = #<:std/util/StandardListConversions>;
    with inherited access = #<:std/util/StandardListAccess>;
    with inherited search = #<:std/util/StandardListSearch>;


    read: b BytesWithOffset: offset FromFileDescriptor: fd => #'ecosphere.ecore.object.blob.read_from'(self, fd, offset, b);
    write: b BytesWithOffset: offset ToFileDescriptor: fd => #'ecosphere.ecore.object.blob.write_to'(self, fd, offset, b);
    read: b BytesFromFileDescriptor: fd => read: b BytesWithOffset: 0 FromFileDescriptor: fd;
    write: b BytesToFileDescriptor: fd => write: b BytesWithOffset: 0 ToFileDescriptor: fd;
    readFromFileDescriptor: fd => read: size BytesWithOffset: 0 FromFileDescriptor: fd;
    writeToFileDescriptor: fd => write: size BytesWithOffset: 0 ToFileDescriptor: fd;
    
    writeOn: writer => writer << '<blob: ' << size << '>';

    with inherited parent = #<:std/Clonable>;
}
