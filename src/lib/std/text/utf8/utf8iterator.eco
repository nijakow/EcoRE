
#=std/text/utf8/UTF8ForwardIterator: {
    protected iterator;

    with inherited trait = {
        init: _iterator => (
            iterator <- _iterator.
          ^ self
        );

        withReset: block => iterator withReset: block;

        hasNext => iterator hasNext;

        next => (
            "TODO: Check if we actually have a next byte"
            | b <- iterator next, bytes, v |
            begin
                if: [ (b bitAnd: 0b10000000) isZero        ] then: [ ^ b asChar                             ] ~
                if: [ (b bitAnd: 0b11100000) == 0b11000000 ] then: [ v <- b bitAnd: 0b00011111. bytes <- 1. ] ~
                if: [ (b bitAnd: 0b11110000) == 0b11100000 ] then: [ v <- b bitAnd: 0b00001111. bytes <- 2. ] ~
                if: [ (b bitAnd: 0b11111000) == 0b11110000 ] then: [ v <- b bitAnd: 0b00000111. bytes <- 3. ] ~
                default: [ ^ 0xfffd asChar ].
            1 to: bytes do: [ :i |
                b <- iterator next.
                ((b bitAnd: 0b11000000) != (0b10000000)) if: [ ^ 0xfffd asChar ].
                v <- ((v shift: 6) bitOr: (b bitAnd: 0b00111111)).
            ].
          ^ v asChar
        );

        current => withReset: [ :reset | reset returns: next ];
        
        writeOn: w => w << 'a utf8 forward iterator';

        with inherited iteratorTrait = #<:std/util/iterators/IteratorTrait>;
    };

    with inherited parent = #<:std/Clonable>;
};
