
#=std/text/utf8/UTF8ForwardIterator: {
    protected it,
    protected lastChar,
    protected hasLastChar;

    with inherited trait = {
        initOnByteIterator: _it => (
            it          <- _it.
            lastChar    <- 0 asChar.
            hasLastChar <- false.
          ^ self
        );

        protected readNext => (
            | b <- it next, bytes, v |
            begin
                if: [ (b bitAnd: 0b10000000) isZero        ] then: [ ^ b asChar                             ] ~
                if: [ (b bitAnd: 0b11100000) == 0b11000000 ] then: [ v <- b bitAnd: 0b00011111. bytes <- 1. ] ~
                if: [ (b bitAnd: 0b11110000) == 0b11100000 ] then: [ v <- b bitAnd: 0b00001111. bytes <- 2. ] ~
                if: [ (b bitAnd: 0b11111000) == 0b11110000 ] then: [ v <- b bitAnd: 0b00000111. bytes <- 3. ] ~
                default: [ ^ 0xfffd asChar ].
            1 to: bytes do: [ :i |
                b <- it next.
                ((b bitAnd: 0b11000000) != (0b10000000)) if: [ ^ 0xfffd asChar ].
                v <- ((v shift: 6) bitOr: (b bitAnd: 0b00111111)).
            ].
          ^ v asChar
        );

        forward => (
            (it hasNext) if: [
                lastChar <- readNext.
                hasLastChar <- true.
            ] else: [
                hasLastChar <- false.
            ].
          ^ self
        );

        has => [ hasLastChar ] or: [ it hasNext ];
        hasNext => has;

        current => (
            (hasLastChar not) -> [ forward ].
          ^ lastChar
        );
        next => [ forward ] returns: current;

        writeOn: w => w << 'a utf8 forward iterator';

        with inherited iteratorTrait = #<:std/util/iterators/IteratorTrait>;
    };

    with inherited parent = #<:std/Clonable>;
};
