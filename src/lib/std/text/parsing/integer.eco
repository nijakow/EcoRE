
#=std/text/parsing/integer: {
    private own Base10Transformer = {
        base => 10;
        transformFromChar: c => (
            ((c asInt) isBetween: (#\0 asInt) And: (#\9 asInt)) -> [
              ^ Yes: ((c asInt) - (#\0 asInt))
            ].
          ^ No
        );
        with inherited parent = #<:std/Clonable>;
    };

    ParseUIntFromStream: it Transformer: transformer => (
        |
            v <- 0,
            n <- 0
        |
        it do: [ :c |
            (transformer transformFromChar: c)
                yes: [ :digit | v <- (v * (transformer base)) + digit ]
                 no: [ (n > 0) -> [ ^ Yes: v ]. ^ No ].
            n <- n + 1.
        ].
      ^ No
    );

    ParseIntFromStream: it Transformer: transformer => (
        ([ it has ] and: [ it current == #\- ])
            -> [ it forward. ^ (ParseUIntFromStream: it Transformer: transformer) negate ].
        ([ it has ] and: [ it current == #\+ ]) -> [ it forward ].
      ^ ParseUIntFromStream: it Transformer: transformer
    );

    ParseUIntFromStream: it => (
        ParseUIntFromStream: it
                Transformer: Base10Transformer
    );

    ParseIntFromStream: it => (
        ParseIntFromStream: it
               Transformer: Base10Transformer
    );
}
