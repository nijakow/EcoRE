
#=std/text/writing/NumberWriter: {
    static with inherited _ = #<:std/Module>;
    
    protected own Base10Transformer = {
        base => 10;
        transform: n => ((#\0 asInt) + (n asInt)) asChar;
    };

    protected WriteUIntLoop(writer, i, transformer) => (
        (i isZero) unless: [
            WriteUIntLoop(writer, i / (transformer base), transformer).
            writer << (transformer transform: (i mod: (transformer base))).
        ].
    );

    protected WriteUInt: i To: writer => (
        (i isZero)   if: [ writer << #\0 ]
                   else: [ WriteUIntLoop(writer, i, Base10Transformer) ]
    );

    WriteInt: i To: writer => (
        (i isNegative) -> [ writer << '-'. i <- i negate ].
        WriteUInt: i To: writer.
    );

    protected WriteFractional: f To: writer Transformer: transformer => (
        1 to: 6 do: [ :iteration |
            f <- f * (transformer base).
            writer << (transformer transform: (f integerPart)).
            f <- f fractionalPart.
            (f isZero) -> [ ^ ].
        ].
    );

    WriteFloat: f To: writer => (
        (f < 0) -> [ writer << #\-. f <- f negate ].
        WriteInt: (f integerPart) To: writer.
        writer << '.'.
        WriteFractional: f fractionalPart
                     To: writer
            Transformer: Base10Transformer.
    );
}
