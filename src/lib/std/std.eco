"
    std.eco - The std part of the Ecosphere Standard Library
"

#=std: {
    with globals = {
        char = {
            backspace =>  8 asChar;
            tab       =>  9 asChar;
            newline   => 10 asChar;
            return    => 13 asChar;
            escape    => 27 asChar;
        };

        begin = #<:std/bool/true>;
    };

    Clonable = #=std/Clonable: {
        init         => ^ self;
        clone        => #'ecosphere.ecore.clone'(self);
        new          => clone init;
        lens: other  => (other clone) init: self;
        mirror       => ;   "TODO"
        is: other    => #'ecosphere.ecore.is'(self, other);
        == other     => is: other;
        != other     => (== other) not;
        asBool       => true;
        @ second     => ((std util Pair) new) first: self second: second;
        & value      => (((std util Collector) clone) init: self) & value;
        with lobby   = #<:lobby>;
    };

    Object = #=std/Object: {
        with inherited trait = #<:std/Clonable>;
    },

    with bool = {
        true = #=std/bool/true: {
            with inherited trait = {
                asBool           => self;
                not              => false;
                if: t else: f    => t value;
                if: t            => t value;
                unless: f        => false;
                true: t false: f => if: t else: f;
                true: t          => if: t;
                false: f         => unless: f;
                if: c then: b    => ( (c value asBool) if: [ b value. ^ false ] else: [ ^ self ] );
                default: b       => ( b value. ^ self );
            };
            with inherited parent = #<:std/Clonable>;
        },

        false = #=std/bool/false: {
            with inherited trait = {
                asBool           => self;
                not              => true;
                if: t else: f    => f value;
                if: t            => self;
                unless: f        => f value;
                true: t false: f => if: t else: f;
                true: t          => if: t;
                false: f         => unless: f;
                if: c then: b    => self;
                default: b       => self;
            };
            with inherited parent = #<:std/Clonable>;
        }
    },

    io = #<:std/io>;
    util = #<:std/util>;
    reflect = #<:std/reflect>;
}
