#=std/util/Map: {
    values;

    with inherited trait = {
        init => (
            values <- std util newVector.
            ^ self
        );

        forEach: block => values do: [ :v | block value(v first, v second) ];
        do: block => forEach: [ :k, :v | block value(k) ];

        at: index do: found else: notfound => ( forEach: [ :k, :v | (k == index) if: [ ^ found value(v) ] ]. ^ notfound value );
        at: index do: found => at: index do: found else: [];
        at: index else: notfound => at: index do: [ :v | ^ v ] else: notfound;
        at: index default: def => at: index else: [ ^ def ];
        at: index => at: index do: [ :v | ^ Yes: v ] else: [ ^ No ];

        at: index put: value => (
            values do: [ :p | (p first == index) if: [ p second: value. ^ self ] ].
            values append: (index ~> value).
            ^ self
        );

        writeOn: w => w << values;
    };

    with inherited parent = #<:std/Clonable>;
}
