#=std/util/Map: {
    values;

    with inherited trait = {
        init => (
            values <- std util newVector.
            ^ self
        );

        forEach: block => values do: [ :v | block value(v first, v second) ];
        do: block => forEach: [ :k, :v | block value(k) ];

        from: collection => ( collection forEach: [ :k, :v | at: k put: v ]. ^ self );
        into: collection => collection from: self;

        at: index => ( forEach: [ :k, :v | (k == index) if: [ ^ Yes: v ] ]. No );

        at: index put: value => (
            values do: [ :p | (p first == index) if: [ p second: value. ^ self ] ].
            values append: (index ~> value).
            ^ self
        );

        writeOn: w => w << values;
    };

    with inherited parent = #<:std/Clonable>;
}
