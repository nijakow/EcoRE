
#=std/util/Stack: {
    private elements;

    with inherited trait = {
        init => (
            elements <- std util newVector.
          ^ self
        );

        from: sequence => ( sequence do: [ :e | push: e ]. ^ self).

        isEmpty => elements isEmpty;
        size => elements size;

        push: e => ( elements append: e. ^ self );
        pop => elements removeLast;
        top => elements last;
        
        writeOn: w => w << 'a stack';
    };

    with inherited parent = #<:std/Clonable>;
}
