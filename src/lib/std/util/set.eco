
#=std/util/Set: {
    private elements;

    with inherited trait = {
        init => (
            elements <- std util newVector.
          ^ self
        );

        from: sequence => ( sequence do: [ :e | addElement: e ]. ^ self).

        forEach: block => elements forEach: block;
        do: block => elements do: block;

        isEmpty => elements isEmpty;

        contains: e => (elements find: e) yes: [ :i | ^ true ] no: [ ^ false ];
        addElement: e => (contains: e) unless: [ elements append: e ];
        removeElement: e => (elements find: e) yes: [ :i | elements remove: i ];
        add: e => addElement: e;
        remove: e => removeElement: e;
        take => (
            elements isEmpty if: [ invalidIndexError ].
            | v <- elements at: 0 |
            elements remove: 0.
          ^ v
        );
        
        writeOn: w => w << 'a set';
    };

    with inherited parent = #<:std/Clonable>;
}
