
#=std/util/vectors/VectorTrait: {
    with inherited iterations = #<:std/util/StandardListIterations>;
    with inherited conversions = #<:std/util/StandardListConversions>;
    with inherited access = #<:std/util/StandardListAccess>;
    with inherited search = #<:std/util/StandardListSearch>;

    init => ( elements <- allocate: 0. ^ self );

    capacity => elements size;
    isEmpty => size isZero;

    at: index => elements at: index;
    at: index put: value => elements at: index put: value;  "TODO: Index >= capacity"

    resize: cap => (
        | new_elements = allocate: cap |
        (cap < capacity) if: [
            0 for: cap do: [ :i | new_elements at: i put: (at: i) ]
        ] else: [
            forEach: [ :index, :value | new_elements at: index put: value ]
        ].
        elements <- new_elements.
        ^ self
    );

    resizeToAtLeast: cap => (
        (cap > capacity) if: [ resize: ((capacity * 2) max: cap) ].
        ^ self
    );

    append: element => (
        resizeToAtLeast: (size + 1).
        elements at: size put: element.
        size <- size + 1.
        ^ self
    );

    add: element => append: element;
    remove: e => (find: e) yes: [ :i | ^ Yes: (erase: i) ] no: [ ^ No ];

    erase: index => (
        | elem <- at: index |
        index to: (size - 2) do: [ :i | at: i put: (at: i + 1) ].
        size <- size - 1.
      ^ elem
    );

    removeFirst => erase: 0;
    removeLast  => erase: (size - 1);

    clear => ( size <- 0. ^ self );

    iterator => (std util iterators IndexIterator) clone init: self;

    writeOn: writer => (
        writer << '#['.
        forEach: [ :i, :e | (i > 0) if: [ writer << ', ' ]. writer << e ].
        writer << ']'.
    );
},

#=std/util/ByteVector: {
    static with inherited parent = #<:std/Clonable>;

    size = 0,
    own elements;

    with inherited trait = {
        with inherited vectorTrait = #<:std/util/vectors/VectorTrait>;

        protected allocate: n => std util newBlob: n;
    };
},

#=std/util/Vector: {
    static with inherited parent = #<:std/Clonable>;

    size = 0,
    own elements;

    with inherited trait = {
        with inherited vectorTrait = #<:std/util/vectors/VectorTrait>;
        
        asString => asArray asString;

        protected allocate: n => std util newArray: n;
    };
}
