"
    util.eco - The `std util` package of the Ecosphere
"

#=std/util/StandardListIterations: {
    do: body => (
        0 for: size do: [ :i | body value(at: i) ].
      ^ self
    );

    forEach: body => (
        0 for: size do: [ :i | body value(i, at: i) ].
      ^ self
    );

    reverseDo: block => (
        | i <- size - 1 |
        [ i >= 0 ] while: [
            block value(at: i).
            i <- i - 1.
        ].
      ^ self
    );
},

#=std/util/StandardListConversions: {
    into: other => other from: self;
    from: other => ( other do: [ :e | add: e ]. ^ self);

    asArray  => into: (std util newArray: size);
    asBlob   => into: (std util newBlob: size);
    asVector => into: (std util newVector);
},

#=std/util/StandardListAccess: {
    first => at: 0;
    second => at: 1;
    third => at: 2;
    fourth => at: 3;
    fifth => at: 4;
    sixth => at: 5;
    seventh => at: 6;
    eighth => at: 7;
    ninth => at: 8;
    tenth => at: 9;
    last => at: (size - 1);
},

#=std/util/StandardListSearch: {
    find: element => (
        forEach: [ :i, :v | (v is: element) if: [ ^ Yes: i ] ].
        ^ No
    );
},

#=std/util: {
    static with inherited _ = #<:std/Module>;
    
    iterators = #<:std/util/iterators>;
    comparators = #<:std/util/comparators>;

    newArray(...) => #'ecosphere.ecore.object.array.array'(...);
    newArray: size => #'ecosphere.ecore.object.array.new'(size);
    newBlob:  size => #'ecosphere.ecore.object.blob.new'(size);
    newByteVector  => (#<:std/util> ByteVector) new;
    newVector      => (#<:std/util> Vector) new;
    newStack       => (#<:std/util> Stack) new;
    newQueue       => (#<:std/util> Queue) new;
    newSet         => (#<:std/util> Set) new;
    newMap         => (#<:std/util> Map) new;
    newRangeFrom: start To: end => ((#<:std/util> Range) clone) initWithStart: start End: end;

    WriteIterable: it On: writer => (
        writer << '#('.
        it forEach: [ :i, :e | (i > 0) if: [ writer << ', ' ]. writer << e ].
        writer << ')'
    );

    Stack = #<:std/util/Stack>;

    Queue = #<:std/util/Queue>;

    Set = #<:std/util/Set>;

    Vector = #<:std/util/Vector>;

    ByteVector = #<:std/util/ByteVector>;

    Collector = #<:std/util/Collector>;

    MutablePair = #<:std/util/MutablePair>;

    Map = #<:std/util/Map>;

    Range = #<:std/util/Range>;
}
