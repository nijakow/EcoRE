#=std/util/List: {
    own elements;

    with inherited trait = {
        init => ( elements <- (std util Link) clone init. ^ self );
        size => (
            | s <- 0, p <- elements next |
            [ p != elements ] while: [ s <- s + 1. p <- p next. ].
            ^ s
        );
        isEmpty => size isZero;
        do: block => (
            | p <- elements next |
            [ p != elements ] while: [ block value(p value). p <- p next. ].
            ^ self
        );
        at: i => (
            do: [ :e | (i isZero) if: [ ^ e ]. i <- i - 1 ].
            invalidIndexError
        );
        append: value => (
            | link <- (std util Link) clone init |
            link value: value.
            link next: elements prev: elements prev.
            (elements prev) next: link.
            elements prev: link.
            ^ self
        );

        with inherited conversions = #<:std/util/StandardListConversions>;
        with inherited access = #<:std/util/StandardListAccess>;
    };

    with inherited parent = #<:std/Clonable>;
}
