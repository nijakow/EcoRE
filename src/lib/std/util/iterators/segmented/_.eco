
#=std/util/iterators/segmented: {

    SegmentListLink = {
        private segmented = #<:std/util/iterators/segmented>,
        private reader,
        private cachedValue;

        with inherited trait = {
            initWithSegmentReader: _reader => (
                reader      <- _reader.
                cachedValue <- No.
              ^ self
            );

            private refresh => (
                |
                    segment <- reader nextSegment,
                    cache   <- ((segmented SegmentListLink) clone) initWithSegmentReader: reader,
                    node    <- ((segmented SegmentListNode) clone) initWithVector: segment Next: cache
                |
                cachedValue <- Yes: node.
              ^ node
            );

            value => cachedValue
                        yes: [ :v | v ]
                         no: [ refresh ];
        };

        with inherited parent = #<:std/Clonable>;
    };

    SegmentListNode = {
        private vector,
        private bytes,
        private nextPtr,
        private loader;

        with inherited trait = {
            initWithVector: _vector Next: _next => (
                vector   <- _vector.
                fill     <- _fill.
                nextPtr  <- No.
              ^ self
            );

            at: index => vector at: index;
            size => vector size;

            next => next value;
        };

        with inherited parent = #<std/Clonable>;
    };

    IteratorState = {
        private node,
        private index;

        with inherited trait = {
            initWithNode: _node Index: _index => (
                node  <- _node.
                index <- _index.
              ^ self
            );
            initWithNode: node => initWithNode: node Index: 0;

            copy => clone;

            private ensureValidIndex => (
                (index < node size) -> [ node <- node next. index <- 0 ].
            );

            has => (
                ensureValidIndex.
              ^ index < node size
            );

            get => (
                ensureValidIndex.
              ^ node at: index
            );

            forward => (
                (index < node size)
                      if: [ index <- index + 1 ]
                    else: [ node <- node next. index <- 0 ].
              ^ self
            );
        };

        with inherited parent = #<:std/Clonable>;
    };

    Iterator = {
        private segmented = #<:std/util/iterators/segmented>,
        private state;

        with inherited trait = {
            initOnSegmentReader: reader => (
                |
                    node <- (((segmented SegmentListLink) clone) initWithSegmentReader: reader) value
                |
                state <- ((segmented IteratorState) clone) initWithNode: node.
              ^ self
            );

            forward => state forward;

            has => state has;

            current => state get;

            withReset: block => (
                | old_state <- state copy |
              ^ block value([ state <- state_pos ])
            );
        };

        with inherited iteratorTrait = #<:std/util/iterators/IteratorTrait>;
        with inherited parent = #<:std/Clonable>;
    }
}
