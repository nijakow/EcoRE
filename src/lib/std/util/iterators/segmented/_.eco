
#=std/util/iterators/segmented: {

    SegmentListLink = {
        protected segmented = #<:std/util/iterators/segmented>,
        protected reader,
        protected cachedValue;

        with inherited trait = {
            initWithSegmentReader: _reader => (
                reader      <- _reader.
                cachedValue <- No.
              ^ self
            );

            protected refresh => (
                | segment <- reader nextSegment |
                segment yes: [ :seg |
                    |
                        cache <- ((segmented SegmentListLink) clone) initWithSegmentReader: reader,
                        node  <- ((segmented SegmentListNode) clone) initWithVector: seg Next: cache
                    |
                    cachedValue <- Yes: (Yes: node).
                  ^ Yes: node
                ] no: [
                    cachedValue <- Yes: No.
                  ^ No
                ]
            );

            value => cachedValue
                        yes: [ :v | v ]
                         no: [ refresh ];
        };

        static with inherited parent = #<:std/Clonable>;
    };

    SegmentListNode = {
        protected vector,
        protected bytes,
        protected nextPtr,
        protected loader;

        with inherited trait = {
            initWithVector: _vector Next: _next => (
                vector   <- _vector.
                nextPtr  <- _next.
              ^ self
            );

            at: index => vector at: index;
            size => vector size;

            next => nextPtr value;
        };

        static with inherited parent = #<std/Clonable>;
    };

    IteratorState = {
        protected atEOF,
        protected node,
        protected index;

        with inherited trait = {
            initWithNode: _node Index: _index => (
                _node yes: [ :n |
                    atEOF <- false.
                    node  <- n.
                    index <- _index.
                ] no: [
                    atEOF <- true.
                ].
              ^ self
            );
            initWithNode: node => initWithNode: node Index: 0;

            copy => clone;

            protected ensureValidIndex => (
                atEOF -> [ ^ ].
                (index < node size) unless: [
                    (node next)
                        yes: [ :n | node <- n. index <- 0 ]
                         no: [      atEOF <- true         ]
                ].
            );

            has => (
                ensureValidIndex.
                atEOF -> [ ^ false ].
              ^ index < node size
            );

            get => (
                ensureValidIndex.
                atEOF -> [ ^ 0 ].
              ^ node at: index
            );

            forward => (
                atEOF -> [ ^ self ].
                (index < node size)
                      if: [ index <- index + 1 ]
                    else: [
                        (node next)
                            yes: [ :n | node <- n. index <- 0 ]
                             no: [      atEOF <- true         ]
                    ].
              ^ self
            );
        };

        static with inherited parent = #<:std/Clonable>;
    };

    Iterator = {
        protected segmented = #<:std/util/iterators/segmented>,
        protected state;

        with inherited trait = {
            initOnSegmentReader: reader => (
                |
                    link <- ((segmented SegmentListLink) clone) initWithSegmentReader: reader,
                    node <- ((segmented SegmentListNode) clone) initWithVector: (std util newBlob: 0) Next: link
                |
                state <- ((segmented IteratorState) clone) initWithNode: (Yes: node).
              ^ self
            );

            forward => state forward;

            has => state has;

            current => state get;

            withReset: block => (
                | old_state <- state copy |
              ^ block value([ state <- old_state ])
            );
        };

        with inherited iteratorTrait = #<:std/util/iterators/IteratorTrait>;
        static with inherited parent = #<:std/Clonable>;
    }
}
