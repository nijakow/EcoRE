
#=std/util/iterators: {
    static with inherited _ = #<:std/Module>;

    IteratorTrait = #=std/util/iterators/IteratorTrait: {
        hasNext => has;
        next => [ forward ] returns: current;
        forEach: block => (
            | i <- 0 |
            [ hasNext ] while: [ block value(i, next). i <- i + 1 ]
        );
        do: block => [ hasNext ] while: [ block value(next) ];
        map: func => (#<:std/util/iterators/MappingIterator> clone) initWithIterator: self Function: func;
        termmap: func => (#<:std/util/iterators/TerminationMappingIterator> clone) initWithIterator: self Function: func;
        into: acceptor => acceptor from: self;
        check: elem => ([ has ] and: [ current == elem ]) -> [ forward. true ];
        peek: sequence => (
            withReset: [ :reset |
                sequence do: [ :element |
                    ([ has not ] or: [ (current == element) not ]) -> [ reset value. ^ false ].
                    forward.
                ]
            ].
          ^ true
        );
        writeOn: w => w << 'an iterator';
    };

    BiIteratorTrait = #=std/util/iterators/BiIteratorTrait: {
        with inherited parent = #<:std/util/iterators/IteratorTrait>;
        previous => ( backward. current );
    };

    IndexIterator = {
        static with inherited parent = #<:std/Clonable>;

        protected blob,
        protected index;

        with inherited trait = {
            with inherited iteratorTrait = #<:std/util/iterators/BiIteratorTrait>;
            
            init: _blob => (
                blob  <- _blob.
                index <- 0.
              ^ self
            );

            forward => ( index <- index + 1. self );
            backward => ( index <- index - 1. self );

            has => index < blob size;
            hasPrevious => index > 0;

            current => blob at: index;

            withReset: block => (
                | resetIndex <- index |
              ^ block value([ index <- resetIndex ])
            );
        };
    };

    MappingIterator = #=std/util/iterators/MappingIterator: {
        static with inherited _ = #<:std/Clonable>;

        protected it,
        protected func;

        with inherited trait = {
            with inherited iteratorTrait = #<:std/util/iterators/BiIteratorTrait>;

            initWithIterator: _it Function: _func => (
                it   <- _it.
                func <- _func.
              ^ self
            );

            forward => it forward;
            backward => it backward;

            has => it has;
            hasPrevious => it hasPrevious;

            current => func value(it current);

            withReset: block => it withReset: block;

            writeOn: w => w << 'a mapping iterator';
        };
    };

    TerminationMappingIterator = #=std/util/iterators/TerminationMappingIterator: {
        static with inherited _ = #<:std/Clonable>;

        protected it,
        protected func;

        with inherited trait = {
            with inherited iteratorTrait = #<:std/util/iterators/BiIteratorTrait>;

            initWithIterator: _it Function: _func => (
                it   <- _it.
                func <- _func.
              ^ self
            );

            forward => it forward;
            backward => it backward;

            has => (
                it withReset: [ :r |
                    ((it has) not) if: [ ^ false ].
                    | v <- (func value(it current)) isYes |
                    r value.
                  ^ v
                ]
            );

            hasPrevious => it hasPrevious;

            current => (func value(it current)) yes;

            withReset: block => it withReset: block;

            writeOn: w => w << 'a termination mapping iterator';
        };
    };

    segmented = #<:std/util/iterators/segmented>;
}
