"
    std.eco - The std part of the Ecosphere Standard Library
"

#=std: {
    with globals = {
        char = {
            space     => 32 asChar;
            backspace =>  8 asChar;
            tab       =>  9 asChar;
            newline   => 10 asChar;
            return    => 13 asChar;
            escape    => 27 asChar;
        };

        begin = #<:std/bool/true>;

        io = #<:std/bool/false>;
    };

    DefaultBehavior = #=std/DefaultBehavior: {
        value         => self;
        mirror        => (std reflect Mirror) clone init: self;
        asBool        => true;
        not           => asBool not;
        is: other     => #'ecosphere.ecore.is'(self, other);
        equals: e     => is: e;
        == other      => is: other;
        != other      => (== other) not;
        lens: other   => (other clone) init: self;
        let: block    => block value(self);
        when: block   => asBool if: [ block value(self) ];
        if: block     => asBool if: block;
        unless: block => asBool unless: block;
        if: t else: f => asBool if: t else: f;
        & value       => (((std util Collector) clone) init: self) & value;
        cons: value   => ((std util MutablePair) clone) initWithFirst: self Second: value;
        writeOn: writer => writer << 'object';
        with lobby    = #<:lobby>;
    };

    Clonable = #=std/Clonable: {
        with inherited parent = #<:std/DefaultBehavior>;
        init          => ^ self;
        clone         => #'ecosphere.ecore.clone'(self);
        new           => clone init;
        writeOn: writer => writer << 'clonable';
        isBlock       => false;
        isInt         => false;
        isChar        => false;
        isKey         => false;
        isString      => false;
        isArray       => false;
    };

    Object = #=std/Object: {
        with inherited trait = #<:std/Clonable>;
    },

    any = #<:std/bool/false>,

    with bool = {
        true = #=std/bool/true: {
            with inherited trait = {
                asBool           => self;
                not              => false;
                if: t else: f    => t value;
                if: t            => t value;
                unless: f        => false;
                true: t false: f => if: t else: f;
                true: t          => if: t;
                false: f         => unless: f;
                if: c then: b    => ( (c value asBool) if: [ b value. ^ false ] else: [ ^ self ] );
                default: b       => ( b value. ^ self );
                writeOn: writer  => writer << 'true';
            };
            with inherited parent = #<:std/Clonable>;
        },

        false = #=std/bool/false: {
            with inherited trait = {
                asBool           => self;
                not              => true;
                if: t else: f    => f value;
                if: t            => self;
                unless: f        => f value;
                true: t false: f => if: t else: f;
                true: t          => if: t;
                false: f         => unless: f;
                if: c then: b    => self;
                default: b       => self;
                writeOn: writer  => writer << 'false';
            };
            with inherited parent = #<:std/Clonable>;
        }
    },

    with maybe = {
        Yes: value => (
            |
                maybe <- {
                    value;

                    with inherited trait = {
                        init: v => value <- v;
                        yes: block => block value(value);
                        no: block => self;
                        yes: yblock no: nblock => yblock value(value);
                        writeOn: writer => writer << 'Yes: ' << value;
                    };
                    with inherited parent = #<:std/Clonable>;
                }
            |
          ^ (maybe clone) init: value
        );

        No => (
            |
                maybe <- {
                    with inherited trait = {
                        value => false;
                        yes: block => self;
                        no: block => block value;
                        yes: yblock no: nblock => nblock value;
                        writeOn: writer => writer << 'No';
                    };
                    with inherited parent = #<:std/Clonable>;
                }
            |
          ^ (maybe clone)
        );
    },

    io = #<:std/io>;
    util = #<:std/util>;
    reflect = #<:std/reflect>;
}
