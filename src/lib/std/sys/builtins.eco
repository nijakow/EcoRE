
#=std/sys/Builtins: {
    static with inherited _ = #<:std/Module>;

    Is(a, b) => #'ecosphere.ecore.is'(a, b);
    Clone(e) => #'ecosphere.ecore.clone'(e);

    Value(e) => #'ecosphere.ecore.flow.value'(e);
    Throw(e) => #'ecosphere.ecore.flow.throw'(e);

    object = {
        static with inherited _ = #<:std/Module>;

        char = {
            static with inherited _ = #<:std/Module>;

            AsInt(f) => #'ecosphere.ecore.char.as_int'(f);
        };

        int = {
            static with inherited _ = #<:std/Module>;

            AsFloat(i) => #'ecosphere.ecore.int.as_float'(i);
            AsChar(i) => #'ecosphere.ecore.int.as_char'(i);
        };

        float = {
            static with inherited _ = #<:std/Module>;

            AsInt(f) => #'ecosphere.ecore.float.as_int'(f);
        };

        key = {
            static with inherited _ = #<:std/Module>;

            AsString(k) => #'ecosphere.ecore.key.as_string'(k);
            Gensym => #'ecosphere.ecore.object.key.gensym'();
        };

        string = {
            static with inherited _ = #<:std/Module>;

            ByteAt(s, i) => #'ecosphere.ecore.object.string.byte_at'(s, i);
            ByteLength(s) => #'ecosphere.ecore.object.string.byte_length'(s);

            AsKey(s) => #'ecosphere.ecore.string.as_key'(s);
        };

        array = {
            static with inherited _ = #<:std/Module>;

            Array(...) => #'ecosphere.ecore.object.array.array'(...);
            New(size) => #'ecosphere.ecore.object.array.new'(size);
            Size(a) => #'ecosphere.ecore.object.array.size'(a);
            At(a, i) => #'ecosphere.ecore.object.array.at'(a, i);
            AtPut(a, i, v) => #'ecosphere.ecore.object.array.at_put'(a, i, v);

            ToString(a) => #'ecosphere.ecore.object.to_string'(a);
        };

        blob = {
            static with inherited _ = #<:std/Module>;

            New(size) => #'ecosphere.ecore.object.blob.new'(size);
            Size(b) => #'ecosphere.ecore.object.blob.size'(b);

            AtInt8(b, i)   => #'ecosphere.ecore.object.blob.at_int8'(b, i);
            AtInt16(b, i)  => #'ecosphere.ecore.object.blob.at_int16'(b, i);
            AtInt32(b, i)  => #'ecosphere.ecore.object.blob.at_int32'(b, i);
            AtIntPtr(b, i) => #'ecosphere.ecore.object.blob.at_ptr'(b, i);
            AtIntAny(b, i) => #'ecosphere.ecore.object.blob.at_any'(b, i);

            AtPutInt8(b, i, v)   => #'ecosphere.ecore.object.blob.at_put_int8'(b, i, v);
            AtPutInt16(b, i, v)  => #'ecosphere.ecore.object.blob.at_put_int16'(b, i, v);
            AtPutInt32(b, i, v)  => #'ecosphere.ecore.object.blob.at_put_int32'(b, i, v);
            AtPutIntPtr(b, i, v) => #'ecosphere.ecore.object.blob.at_put_ptr'(b, i, v);
            AtPutIntAny(b, i, v) => #'ecosphere.ecore.object.blob.at_put_any'(b, i, v);

            ReadFrom(b, fd) => #'ecosphere.ecore.object.blob.read_from'(b, fd);
            WriteTo(b, fd) => #'ecosphere.ecore.object.blob.write_to'(b, fd);
        };

        code = {
            static with inherited _ = #<:std/Module>;

            New(bytecode, constants, registers, fixed_args, flags) => #'ecosphere.ecore.object.code.new'(bytecode, constants, registers, fixed_args, flags);
            Bytecodes(code) => #'ecosphere.ecore.object.code.bytecodes'(code);
            Constants(code) => #'ecosphere.ecore.object.code.constants'(code);
        };
    };
    
    math = {
        static with inherited _ = #<:std/Module>;

        AddIntegers(x, y) => #'ecosphere.ecore.math.add_integers'(x, y);

        Add(x, y) => #'ecosphere.ecore.math.add'(x, y);
        Sub(x, y) => #'ecosphere.ecore.math.sub'(x, y);
        Mul(x, y) => #'ecosphere.ecore.math.mul'(x, y);
        Div(x, y) => #'ecosphere.ecore.math.div'(x, y);
        Mod(x, y) => #'ecosphere.ecore.math.mod'(x, y);

        BitOr(x, y) => #'ecosphere.ecore.math.bit_or'(x, y);
        BitAnd(x, y) => #'ecosphere.ecore.math.bit_and'(x, y);
        BitXor(x, y) => #'ecosphere.ecore.math.bit_xor'(x, y);

        BitshiftLeft(x, y) => #'ecosphere.ecore.math.bitshift_left'(x, y);
        BitshiftRight(x, y) => #'ecosphere.ecore.math.bitshift_right'(x, y);

        Less(x, y) => #'ecosphere.ecore.math.less'(x, y);

        Sqrt(x) => #'ecosphere.ecore.math.sqrt'(x);
        Sin(x) => #'ecosphere.ecore.math.sin'(x);
        Cos(x) => #'ecosphere.ecore.math.cos'(x);
        Tan(x) => #'ecosphere.ecore.math.tan'(x);
    };

    io = {
        static with inherited _ = #<:std/Module>;

        OpenFile(path) => #'ecosphere.ecore.io.fd.open_file'(path);
        FileExists(path) => #'ecosphere.ecore.io.file_exists'(path);
        FileIsDirectory(path) => #'ecosphere.ecore.io.file_is_directory'(path);
        ListFiles(path) => #'ecosphere.ecore.io.list_files'(path);
    };

    os = {
        static with inherited _ = #<:std/Module>;

        GetEnv(var) => #'ecosphere.ecore.os.getenv'(var);
    };

    sys = {
        static with inherited _ = #<:std/Module>;

        VersionString => #'ecosphere.ecore.init.version_string'();
    };
}
