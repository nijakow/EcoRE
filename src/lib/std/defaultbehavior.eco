
#=std/DefaultBehavior: {
    protected with lobby = #<:lobby>;
    
    value         => self;
    mirror        => (std reflect Mirror) clone init: self;
    asBool        => true;
    is: other     => #'ecosphere.ecore.is'(self, other);
    equals: e     => is: e;
    == other      => is: other;
    != other      => (== other) not;

    let: block    => block value(self);
    run: block   => ( block value(self). self );

    when: block   => asBool if: [ block value(self) ];
    not           => asBool if: [ false ] else: [ true ];

    & value       => (((std util Collector) clone) init: self) & value;
    ~> value      => ((std util MutablePair) clone) initWithFirst: self Second: value;

    throw         => #'ecosphere.ecore.flow.throw'(self);

    writeOn: writer => writer << 'an object';
}
