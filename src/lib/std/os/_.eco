
#=std/os/OsTypeTrait: {
    static with inherited _ = #<:std/Trait>;

    isLinux   => false;
    isMacOS   => false;

    writeOn: w => w << 'an unknown OS type';
};

#=std/os: {
    static with inherited _ = #<:std/Module>;
    
    files = #<:std/os/files>;

    types = {
        static with inherited _ = #<:std/Module>;

        Unknown = {
            static with inherited _ = #<:std/Enum>;
            with inherited trait = #<:std/os/OsTypeTrait>;
        };

        Linux = {
            static with inherited _ = #<:std/Enum>;
            with inherited trait = #<:std/os/OsTypeTrait>;

            isLinux => true;

            writeOn: w => w << 'Linux';
        };

        FreeBSD = {
            static with inherited _ = #<:std/Enum>;
            with inherited trait = #<:std/os/OsTypeTrait>;

            isLinux => true;

            writeOn: w => w << 'FreeBSD';
        };

        MacOS = {
            static with inherited _ = #<:std/Enum>;
            with inherited trait = #<:std/os/OsTypeTrait>;

            isMacOS => true;

            writeOn: w => w << 'MacOS';
        };

        Windows = {
            static with inherited _ = #<:std/Enum>;
            with inherited trait = #<:std/os/OsTypeTrait>;

            writeOn: w => w << 'Windows';
        };

        Current => (
            Switch: #'ecosphere.ecore.init.os_version_id'()
              ~ case: 1 do: [ ^ Linux   ]
              ~ case: 2 do: [ ^ FreeBSD ]
              ~ case: 3 do: [ ^ MacOS   ]
            ~ default: [ ^ Unknown ]
        );
    };

    env = {
        static with inherited _ = #<:std/Module>;

        Lookup: var => (
            | v <- #'ecosphere.ecore.os.getenv'(var) |
            v asBool -> [ ^ Yes: v ].
          ^ No
        );
    };
}
