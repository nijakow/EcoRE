"
    io.eco - The `std io` package of the Ecosphere
"

#=std/io: {
    static with inherited _ = #<:std/Module>;

    in, out;

    FileDescriptor = #<:std/io/FileDescriptor>;

    FDSegmentReader = #<:std/io/FDSegmentReader>;
    FDByteReader = #<:std/io/FDByteReader>;
    FDByteWriter = #<:std/io/FDByteWriter>;

    PortInput = #<:std/io/PortInput>;
    PortOutput = #<:std/io/PortOutput>;
    PortIO = #<:std/io/PortIO>;

    Writer = #<:std/io/Writer>;
    StringWriter = #<:std/io/StringWriter>;

    OpenFileForReading: path  => (std text utf8 UTF8Iterator) clone init: (((std io FDSegmentReader) clone initWithFileDescriptor: ((std io FileDescriptor) clone init: #'ecosphere.ecore.io.fd.open_file'(path, 1))) iterator);
    OpenFileForWriting: path  => PortOutput clone init: ((FDByteWriter clone) initWithFileDescriptor: (((FileDescriptor clone) init: #'ecosphere.ecore.io.fd.open_file'(path, 6))));
    OpenFile:           path  => OpenFileDescriptor: ((FileDescriptor clone) init: #'ecosphere.ecore.io.fd.open_file'(path, 7));
    OpenFile: path Mode: mode => OpenFile: path;  "TODO: Mode objects"

    WithOpenFileForReading: path Do: block => (
        |
            port <- OpenFileForReading: path,
            val  <- block value(port)
        |
        port close.  "TODO: Unwind-Protect!"
      ^ val
    );

    SlurpFile: file => WithOpenFileForReading: file Do: [ :in |
        | sw <- StringWriter new |
        in do: [ :c | sw << c ].
      ^ sw commit
    ];

    ParseFile: file => (SlurpFile: file) parse;
    EvaluateFile: file InEnv: env => (ParseFile: file) evaluateInEnv: env;

    Import: file Path: path => (
      (out << 'Importing: ' << file << '...') newline commit.
      |
        env <- {
          static with inherited _ = #<:std/Clonable>;
          with lobby = #<:lobby>;

          here;
          init: _here => here <- _here;
        }
      |
      EvaluateFile: file InEnv: (env clone init: path)
    );
    Import: file => Import: file Path: (std os files here);
}
